{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v7.json", "dbt_version": "1.3.2", "generated_at": "2023-01-20T01:10:26.346047Z", "invocation_id": "00f369d4-beca-4245-867b-f831c1e3e89b", "env": {"DBT_CLOUD_PROJECT_ID": "89074", "DBT_CLOUD_RUN_ID": "115190130", "DBT_CLOUD_JOB_ID": "83771", "DBT_CLOUD_RUN_REASON": "Kicked off from the UI by pat.kearns@dbtlabs.com", "DBT_CLOUD_RUN_REASON_CATEGORY": "other"}, "project_id": "5ebe2294ecd0e0f08eab7690d2a6ee69", "user_id": "67b5d2ef-d1ed-4482-960c-a9994ee1b917", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.secret.my_first_model": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.get_filtered_columns_in_relation"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "my_first_model"], "unique_id": "model.secret.my_first_model", "raw_code": "select 'hello, world!' as col,\n'{{ this }}' as this,\n'{{ this.name }}' as this_name,\n{{ dbt_utils.get_filtered_columns_in_relation( this ) }} as cols2", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "my_first_model.sql", "original_file_path": "models/my_first_model.sql", "name": "my_first_model", "alias": "my_first_model", "checksum": {"name": "sha256", "checksum": "efffeb36ef989308b20b4a66ccd42304b859b59e66ff4f24ffca925ac6d1ef11"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {"col": {"name": "col", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "secret://models/_core.yml", "compiled_path": "target/compiled/secret/models/my_first_model.sql", "build_path": "target/run/secret/models/my_first_model.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1674177029.0174434, "compiled_code": "select 'hello, world!' as col,\n'DEVELOPMENT.prod.my_first_model' as this,\n'my_first_model' as this_name,\n['COL', 'THIS', 'THIS_NAME', 'COLS2'] as cols2", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.my_first_model"}, "model.secret.json_example": {"resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "json_example"], "unique_id": "model.secret.json_example", "raw_code": "", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "json_example.sql", "original_file_path": "models/json_example.sql", "name": "json_example", "alias": "json_example", "checksum": {"name": "sha256", "checksum": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1674177028.281282}, "model.secret.my_incremental_model": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["generic_id", "unique_id", "sometimes_bad_id"], "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "my_incremental_model"], "unique_id": "model.secret.my_incremental_model", "raw_code": "{{\n    config(\n        materialized='incremental',\n        unique_key=['generic_id', 'unique_id', 'sometimes_bad_id']\n    )\n}}\n\nwith\n\nsample_data as (\n    select\n        1 as generic_id,\n        1 as unique_id,\n        'Pass' as sometimes_bad_id,\n        current_timestamp as _updated_at\n\n    union all\n\n    select\n        1 as generic_id,\n        2 as unique_id,\n        'Fail' as sometimes_bad_id,\n        current_timestamp as _updated_at\n\n    union all\n\n    select\n        1 as generic_id,\n        2 as unique_id,\n        null as sometimes_bad_id,\n        current_timestamp as _updated_at\n)\n\nselect\n    *\nfrom sample_data\n\n    {% if is_incremental() %}\n        -- this filter will only be applied on an incremental run\n        where _updated_at > (select max(_updated_at) from {{ this }}) \n    {% endif %}", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "my_incremental_model.sql", "original_file_path": "models/my_incremental_model.sql", "name": "my_incremental_model", "alias": "my_incremental_model", "checksum": {"name": "sha256", "checksum": "95c1369082e1cae9f6af2f2fe09d6afab593fba52c09ff1a4e4683a48976a176"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/my_incremental_model.sql", "build_path": "target/run/secret/models/my_incremental_model.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": ["generic_id", "unique_id", "sometimes_bad_id"]}, "created_at": 1674177028.2851007, "compiled_code": "\n\nwith\n\nsample_data as (\n    select\n        1 as generic_id,\n        1 as unique_id,\n        'Pass' as sometimes_bad_id,\n        current_timestamp as _updated_at\n\n    union all\n\n    select\n        1 as generic_id,\n        2 as unique_id,\n        'Fail' as sometimes_bad_id,\n        current_timestamp as _updated_at\n\n    union all\n\n    select\n        1 as generic_id,\n        2 as unique_id,\n        null as sometimes_bad_id,\n        current_timestamp as _updated_at\n)\n\nselect\n    *\nfrom sample_data\n\n    \n        -- this filter will only be applied on an incremental run\n        where _updated_at > (select max(_updated_at) from DEVELOPMENT.prod.my_incremental_model) \n    ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.my_incremental_model"}, "model.secret.incrementing_incremental": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "unique_id", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "incrementing_incremental"], "unique_id": "model.secret.incrementing_incremental", "raw_code": "{{\n    config(\n        materialized='incremental',\n        unique_key='unique_id'\n    )\n}}\n\nwith\n\nsample_data as (\n    select\n        1 as unique_id,\n        1 as generic_id,\n        'Pass' as some_status,\n        current_timestamp as _updated_at\n\n    union all\n\n    select\n        2 as unique_id,\n        1 as generic_id,\n        'Fail' as some_status,\n        current_timestamp as _updated_at\n\n    union all\n\n    select\n        3 as unique_id,\n        2 as generic_id,\n        'Pass' as some_status,\n        current_timestamp as _updated_at\n)\n\n{% if is_incremental() %}\n,increment_data as (\n    select\n        unique_id + 1 as unique_id,\n        case when generic_id % 2 = 3 then 1 else 2 end as generic_id,\n        case when unique_id % 3 = 0 then 'Pass' else 'Fail' end as some_status,\n        _updated_at\n    from\n        {{ this }}\n    order by unique_id desc\n    limit 1\n)\n{% endif %}\n\n,increment_data as (\n    select 0\n)\n\n{% if is_incremental() %}\n,final as (\n    select * from increment_data\n)\n{% endif %}\n\n,final as (\n    select * from sample_data\n)\n\nselect\n    *\nfrom final", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "incrementing_incremental.sql", "original_file_path": "models/incrementing_incremental.sql", "name": "incrementing_incremental", "alias": "incrementing_incremental", "checksum": {"name": "sha256", "checksum": "92ca5a83a6c1297266ca989faf56b26a6d3aeea775d9c41319e053e9196f66f7"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/incrementing_incremental.sql", "build_path": "target/run/secret/models/incrementing_incremental.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "unique_id"}, "created_at": 1674177028.2957563, "compiled_code": "\n\nwith\n\nsample_data as (\n    select\n        1 as unique_id,\n        1 as generic_id,\n        'Pass' as some_status,\n        current_timestamp as _updated_at\n\n    union all\n\n    select\n        2 as unique_id,\n        1 as generic_id,\n        'Fail' as some_status,\n        current_timestamp as _updated_at\n\n    union all\n\n    select\n        3 as unique_id,\n        2 as generic_id,\n        'Pass' as some_status,\n        current_timestamp as _updated_at\n)\n\n\n,increment_data as (\n    select\n        unique_id + 1 as unique_id,\n        case when generic_id % 2 = 3 then 1 else 2 end as generic_id,\n        case when unique_id % 3 = 0 then 'Pass' else 'Fail' end as some_status,\n        _updated_at\n    from\n        DEVELOPMENT.prod.incrementing_incremental\n    order by unique_id desc\n    limit 1\n)\n\n\n,increment_data as (\n    select 0\n)\n\n\n,final as (\n    select * from increment_data\n)\n\n\n,final as (\n    select * from sample_data\n)\n\nselect\n    *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.incrementing_incremental"}, "model.secret.my_second_model": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.secret.my_first_model"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "my_second_model"], "unique_id": "model.secret.my_second_model", "raw_code": "select * from {{ ref('my_first_model') }}", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "my_second_model.sql", "original_file_path": "models/my_second_model.sql", "name": "my_second_model", "alias": "my_second_model", "checksum": {"name": "sha256", "checksum": "bad6dfa47b28ee092b8bad095a0eeac721a312673403b467d5982cb25f2e877a"}, "tags": [], "refs": [["my_first_model"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/my_second_model.sql", "build_path": "target/run/secret/models/my_second_model.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1674177028.3027356, "compiled_code": "select * from DEVELOPMENT.prod.my_first_model", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.my_second_model"}, "model.secret.my_third_model": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.secret.my_second_model"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "my_third_model"], "unique_id": "model.secret.my_third_model", "raw_code": "select *, current_timestamp::date as updated_day from {{ref('my_second_model')}}", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "my_third_model.sql", "original_file_path": "models/my_third_model.sql", "name": "my_third_model", "alias": "my_third_model", "checksum": {"name": "sha256", "checksum": "f4568ba048ef5db8a43d16729c820f6faa2b4429d90d45c019059bd9aa4da944"}, "tags": [], "refs": [["my_second_model"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/my_third_model.sql", "build_path": "target/run/secret/models/my_third_model.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1674177028.30561, "compiled_code": "select *, current_timestamp::date as updated_day from DEVELOPMENT.prod.my_second_model", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.my_third_model"}, "model.secret.stg_stripe__payments": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "staging", "stg_stripe__payments"], "unique_id": "model.secret.stg_stripe__payments", "raw_code": "select * from raw.stripe.payment", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "staging/stg_stripe__payments.sql", "original_file_path": "models/staging/stg_stripe__payments.sql", "name": "stg_stripe__payments", "alias": "stg_stripe__payments", "checksum": {"name": "sha256", "checksum": "e00026029aee7ee25cde279b7d76a6b8159d5fa876c60774d2a24eafc0b0b13e"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/staging/stg_stripe__payments.sql", "build_path": "target/run/secret/models/staging/stg_stripe__payments.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1674177028.3087397, "compiled_code": "select * from raw.stripe.payment", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.stg_stripe__payments"}, "model.secret.stg_customers": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.secret.jaffle_shop.customers"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "staging", "jaffle_shop", "stg_customers"], "unique_id": "model.secret.stg_customers", "raw_code": "select\n    id as customer_id,\n    first_name,\n    last_name\nfrom {{ source('jaffle_shop','customers') }}", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "staging/jaffle_shop/stg_customers.sql", "original_file_path": "models/staging/jaffle_shop/stg_customers.sql", "name": "stg_customers", "alias": "stg_customers", "checksum": {"name": "sha256", "checksum": "2282db28d58a9eddb2d8eea76abea33b9ee39425e86d1c6b706a0c4057c7398c"}, "tags": [], "refs": [], "sources": [["jaffle_shop", "customers"]], "metrics": [], "description": "This model cleans up customer data", "columns": {"customer_id": {"name": "customer_id", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "secret://models/staging/jaffle_shop/stg_jaffle_shop.yml", "compiled_path": "target/compiled/secret/models/staging/jaffle_shop/stg_customers.sql", "build_path": "target/run/secret/models/staging/jaffle_shop/stg_customers.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1674177029.042028, "compiled_code": "select\n    id as customer_id,\n    first_name,\n    last_name\nfrom raw.jaffle_shop.customers", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.stg_customers"}, "model.secret.stg_orders": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.secret.jaffle_shop.orders"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "staging", "jaffle_shop", "stg_orders"], "unique_id": "model.secret.stg_orders", "raw_code": "select\n    id as order_id,\n    user_id as customer_id,\n    order_date,\n    status\n\nfrom {{ source('jaffle_shop','orders') }}", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "staging/jaffle_shop/stg_orders.sql", "original_file_path": "models/staging/jaffle_shop/stg_orders.sql", "name": "stg_orders", "alias": "stg_orders", "checksum": {"name": "sha256", "checksum": "aa7483de088ce07faa14431cb3eb56cf43e61c87b00d67697c727521e7208e7d"}, "tags": [], "refs": [], "sources": [["jaffle_shop", "orders"]], "metrics": [], "description": "One record per order", "columns": {"order_id": {"name": "order_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "One of the following values:\n\n| status         | definition                                                 |\n|----------------|------------------------------------------------------------|\n| placed         | Order placed but not yet shipped                           |\n| shipped        | Order has been shipped but hasn't yet been delivered       |\n| completed      | Order has been received by customers                       |\n| return_pending | Customer has indicated they would like to return this item |\n| returned       | Item has been returned                                     |", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Amount in USD", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "secret://models/staging/jaffle_shop/stg_jaffle_shop.yml", "compiled_path": "target/compiled/secret/models/staging/jaffle_shop/stg_orders.sql", "build_path": "target/run/secret/models/staging/jaffle_shop/stg_orders.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1674177029.044512, "compiled_code": "select\n    id as order_id,\n    user_id as customer_id,\n    order_date,\n    status\n\nfrom raw.jaffle_shop.orders", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.stg_orders"}, "model.secret.stg_payments": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.secret.cents_to_dollars"], "nodes": ["source.secret.stripe.payment"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "staging", "stripe", "stg_payments"], "unique_id": "model.secret.stg_payments", "raw_code": "select\n    id as payment_id,\n    orderid as order_id,\n    paymentmethod as payment_method,\n    status,\n    {{ cents_to_dollars('amount') }} as amount, -- amount is stored in cents, convert it to dollars\n    created as created_at\n\nfrom {{ source('stripe','payment') }}", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "staging/stripe/stg_payments.sql", "original_file_path": "models/staging/stripe/stg_payments.sql", "name": "stg_payments", "alias": "stg_payments", "checksum": {"name": "sha256", "checksum": "3afdf5c5b67ec4060fe53bb53d51e092b464fe2687b141f7536ebbe7604cf09e"}, "tags": [], "refs": [], "sources": [["stripe", "payment"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/staging/stripe/stg_payments.sql", "build_path": "target/run/secret/models/staging/stripe/stg_payments.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1674177028.317198, "compiled_code": "select\n    id as payment_id,\n    orderid as order_id,\n    paymentmethod as payment_method,\n    status,\n    (amount / 100)::numeric(16, 2) as amount, -- amount is stored in cents, convert it to dollars\n    created as created_at\n\nfrom raw.stripe.payment", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.stg_payments"}, "model.secret.product": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.union_relations", "macro.dbt.is_incremental", "macro.dbt_utils.star"], "nodes": ["seed.secret.seed__product__one_time_load", "seed.secret.seed__negative_key", "seed.secret.seed__product__stg_data", "seed.secret.seed__product__one_time_load"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "PRODUCT_KEY", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "onsemi", "product"], "unique_id": "model.secret.product", "raw_code": "-- incremental model to bring in:\n    -- one time load data\n    -- -1 for pk \n    -- stg data \n\n{{\n    config(\n        materialized='incremental',\n        unique_key=\"PRODUCT_KEY\"\n        )\n}}\n\nwith\n\n-- one time load with an added -1 for product key\none_time_load as (\n    {{ dbt_utils.union_relations(\n    relations=[\n        ref('seed__product__one_time_load'),\n        ref('seed__negative_key'),\n        ],\n    ) }}\n\n),\n\n-- daily updated data\nstg_data as (\n    select * from {{ ref('seed__product__stg_data') }}\n    {%- if is_incremental() %}\n    where BIW_UPD_DTTM >= (select max(BIW_UPD_DTTM) from {{ this }})\n    {%- endif %}\n)\n\nselect\n    -- using this to only select columns from the one_time_load_table\n    {{ dbt_utils.star(from=ref('seed__product__one_time_load')) }}\nfrom one_time_load\n    -- after the initial load, we will not need to run this again\n    {%- if is_incremental() %}\n    where BIW_UPD_DTTM >= (select max(BIW_UPD_DTTM) from {{ this }}) or BIW_UPD_DTTM is null\n    {%- endif %}\n\nunion all\n\nselect * from stg_data", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "onsemi/product.sql", "original_file_path": "models/onsemi/product.sql", "name": "product", "alias": "product", "checksum": {"name": "sha256", "checksum": "c3adde0b24e81acca59e1ae8fa59a8b119cd37f77c9729bf4c3d3595de9cbac6"}, "tags": [], "refs": [["seed__product__one_time_load"], ["seed__negative_key"], ["seed__product__stg_data"], ["seed__product__one_time_load"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/onsemi/product.sql", "build_path": "target/run/secret/models/onsemi/product.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "PRODUCT_KEY"}, "created_at": 1674177028.3266249, "compiled_code": "-- incremental model to bring in:\n    -- one time load data\n    -- -1 for pk \n    -- stg data \n\n\n\nwith\n\n-- one time load with an added -1 for product key\none_time_load as (\n    \n    \n\n        (\n            select\n\n                cast('DEVELOPMENT.prod.seed__product__one_time_load' as \n    varchar\n) as _dbt_source_relation,\n                \n                    cast(\"PRODUCT_KEY\" as character varying(16777216)) as \"PRODUCT_KEY\" ,\n                    cast(\"PRODUCT_ID\" as NUMBER(38,0)) as \"PRODUCT_ID\" ,\n                    cast(\"DATA_SOURCE\" as character varying(16777216)) as \"DATA_SOURCE\" ,\n                    cast(\"NPD_BUCKET\" as NUMBER(38,0)) as \"NPD_BUCKET\" ,\n                    cast(\"WEB_PART_GROUP\" as NUMBER(38,0)) as \"WEB_PART_GROUP\" ,\n                    cast(\"IS_WEB_VISIBLE\" as BOOLEAN) as \"IS_WEB_VISIBLE\" ,\n                    cast(\"MOQ_QUANTITY\" as NUMBER(38,0)) as \"MOQ_QUANTITY\" ,\n                    cast(\"PART_OID_AK_ID\" as NUMBER(38,0)) as \"PART_OID_AK_ID\" ,\n                    cast(\"CREATED_DATE\" as DATE) as \"CREATED_DATE\" ,\n                    cast(\"BIW_INS_DTTM\" as NUMBER(38,0)) as \"BIW_INS_DTTM\" ,\n                    cast(\"BIW_UPD_DTTM\" as TIMESTAMP_NTZ) as \"BIW_UPD_DTTM\" ,\n                    cast(\"BIW_BATCH_ID\" as NUMBER(38,0)) as \"BIW_BATCH_ID\" ,\n                    cast(\"BIW_MD5_KEY\" as character varying(16777216)) as \"BIW_MD5_KEY\" ,\n                    cast(null as character varying(16777216)) as \"TRANSACTION_KEY\" ,\n                    cast(null as character varying(16777216)) as \"CORPORATION_KEY\" \n\n            from DEVELOPMENT.prod.seed__product__one_time_load\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('DEVELOPMENT.prod.seed__negative_key' as \n    varchar\n) as _dbt_source_relation,\n                \n                    cast(\"PRODUCT_KEY\" as character varying(16777216)) as \"PRODUCT_KEY\" ,\n                    cast(null as NUMBER(38,0)) as \"PRODUCT_ID\" ,\n                    cast(null as character varying(16777216)) as \"DATA_SOURCE\" ,\n                    cast(null as NUMBER(38,0)) as \"NPD_BUCKET\" ,\n                    cast(null as NUMBER(38,0)) as \"WEB_PART_GROUP\" ,\n                    cast(null as BOOLEAN) as \"IS_WEB_VISIBLE\" ,\n                    cast(null as NUMBER(38,0)) as \"MOQ_QUANTITY\" ,\n                    cast(null as NUMBER(38,0)) as \"PART_OID_AK_ID\" ,\n                    cast(null as DATE) as \"CREATED_DATE\" ,\n                    cast(null as NUMBER(38,0)) as \"BIW_INS_DTTM\" ,\n                    cast(null as TIMESTAMP_NTZ) as \"BIW_UPD_DTTM\" ,\n                    cast(null as NUMBER(38,0)) as \"BIW_BATCH_ID\" ,\n                    cast(null as character varying(16777216)) as \"BIW_MD5_KEY\" ,\n                    cast(\"TRANSACTION_KEY\" as character varying(16777216)) as \"TRANSACTION_KEY\" ,\n                    cast(\"CORPORATION_KEY\" as character varying(16777216)) as \"CORPORATION_KEY\" \n\n            from DEVELOPMENT.prod.seed__negative_key\n\n            \n        )\n\n        \n\n),\n\n-- daily updated data\nstg_data as (\n    select * from DEVELOPMENT.prod.seed__product__stg_data\n)\n\nselect\n    -- using this to only select columns from the one_time_load_table\n    \n\n    \"PRODUCT_KEY\",\n  \"PRODUCT_ID\",\n  \"DATA_SOURCE\",\n  \"NPD_BUCKET\",\n  \"WEB_PART_GROUP\",\n  \"IS_WEB_VISIBLE\",\n  \"MOQ_QUANTITY\",\n  \"PART_OID_AK_ID\",\n  \"CREATED_DATE\",\n  \"BIW_INS_DTTM\",\n  \"BIW_UPD_DTTM\",\n  \"BIW_BATCH_ID\",\n  \"BIW_MD5_KEY\"\nfrom one_time_load\n    -- after the initial load, we will not need to run this again\n\nunion all\n\nselect * from stg_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.product"}, "model.secret.corporation": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.union_relations", "macro.dbt.is_incremental", "macro.dbt_utils.star"], "nodes": ["seed.secret.seed__corporation__one_time_load", "seed.secret.seed__negative_key", "seed.secret.seed__corporation__stg_data", "seed.secret.seed__corporation__one_time_load"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CORPORATION_KEY", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "onsemi", "corporation"], "unique_id": "model.secret.corporation", "raw_code": "-- incremental model to bring in:\n    -- one time load data\n    -- -1 for pk \n    -- stg data \n\n{{\n    config(\n        materialized='incremental',\n        unique_key=\"CORPORATION_KEY\"\n        )\n}}\n\nwith\n\n-- one time load with an added -1 for product key\none_time_load as (\n    {{ dbt_utils.union_relations(\n    relations=[\n        ref('seed__corporation__one_time_load'),\n        ref('seed__negative_key'),\n        ],\n    ) }}\n\n),\n\n-- daily updated data\nstg_data as (\n    select * from {{ ref('seed__corporation__stg_data') }}\n    {%- if is_incremental() %}\n    where snapshot__date >= (select max(snapshot__date) from {{ this }})\n    {%- endif %}\n)\n\nselect\n    -- using this to only select columns from the one_time_load_table\n    {{ dbt_utils.star(from=ref('seed__corporation__one_time_load')) }}\nfrom one_time_load\n    -- after the initial load, we will not need to run this again\n    {%- if is_incremental() %}\n    where snapshot__date >= (select max(snapshot__date) from {{ this }}) or snapshot_date is null\n    {%- endif %}\n\nunion all\n\nselect * from stg_data", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "onsemi/corporation.sql", "original_file_path": "models/onsemi/corporation.sql", "name": "corporation", "alias": "corporation", "checksum": {"name": "sha256", "checksum": "7723676beb47a3bf6f3d65f0374f4393cc36544c71a52a69ee9720fc1ae9d112"}, "tags": [], "refs": [["seed__corporation__one_time_load"], ["seed__negative_key"], ["seed__corporation__stg_data"], ["seed__corporation__one_time_load"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/onsemi/corporation.sql", "build_path": "target/run/secret/models/onsemi/corporation.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "CORPORATION_KEY"}, "created_at": 1674177028.3679001, "compiled_code": "-- incremental model to bring in:\n    -- one time load data\n    -- -1 for pk \n    -- stg data \n\n\n\nwith\n\n-- one time load with an added -1 for product key\none_time_load as (\n    \n    \n\n        (\n            select\n\n                cast('DEVELOPMENT.prod.seed__corporation__one_time_load' as \n    varchar\n) as _dbt_source_relation,\n                \n                    cast(\"CORPORATION_KEY\" as character varying(16777216)) as \"CORPORATION_KEY\" ,\n                    cast(\"SNAPSHOT_DATE\" as DATE) as \"SNAPSHOT_DATE\" ,\n                    cast(\"CORPORATION_CODE\" as NUMBER(38,0)) as \"CORPORATION_CODE\" ,\n                    cast(\"CORPORATION_DESCRIPTION\" as character varying(16777216)) as \"CORPORATION_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"PRODUCT_KEY\" ,\n                    cast(null as character varying(16777216)) as \"TRANSACTION_KEY\" \n\n            from DEVELOPMENT.prod.seed__corporation__one_time_load\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('DEVELOPMENT.prod.seed__negative_key' as \n    varchar\n) as _dbt_source_relation,\n                \n                    cast(\"CORPORATION_KEY\" as character varying(16777216)) as \"CORPORATION_KEY\" ,\n                    cast(null as DATE) as \"SNAPSHOT_DATE\" ,\n                    cast(null as NUMBER(38,0)) as \"CORPORATION_CODE\" ,\n                    cast(null as character varying(16777216)) as \"CORPORATION_DESCRIPTION\" ,\n                    cast(\"PRODUCT_KEY\" as character varying(16777216)) as \"PRODUCT_KEY\" ,\n                    cast(\"TRANSACTION_KEY\" as character varying(16777216)) as \"TRANSACTION_KEY\" \n\n            from DEVELOPMENT.prod.seed__negative_key\n\n            \n        )\n\n        \n\n),\n\n-- daily updated data\nstg_data as (\n    select * from DEVELOPMENT.prod.seed__corporation__stg_data\n)\n\nselect\n    -- using this to only select columns from the one_time_load_table\n    \n\n    \"CORPORATION_KEY\",\n  \"SNAPSHOT_DATE\",\n  \"CORPORATION_CODE\",\n  \"CORPORATION_DESCRIPTION\"\nfrom one_time_load\n    -- after the initial load, we will not need to run this again\n\nunion all\n\nselect * from stg_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.corporation"}, "model.secret.stg_onsemi": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "onsemi", "stg_onsemi"], "unique_id": "model.secret.stg_onsemi", "raw_code": "with\n\nsample_data as (\n    select\n        1 as CORPORATION_CODE,\n        1 as BIW_INS_DTTM,\n        1 as BIW_UPD_DTTM,\n        1 as BIW_BATCH_ID,\n        11 as generic_id,\n        11 as unique_id,\n        'Pass' as sometimes_bad_id,\n        current_timestamp as _updated_at\n\n    union all\n\n    select\n        2 as CORPORATION_CODE,\n        2 as BIW_INS_DTTM,\n        2 as BIW_UPD_DTTM,\n        2 as BIW_BATCH_ID,\n        22 as generic_id,\n        22 as unique_id,\n        'Pass' as sometimes_bad_id,\n        current_timestamp as _updated_at\n\n    union all\n\n    select\n        3 as CORPORATION_CODE,\n        3 as BIW_INS_DTTM,\n        3 as BIW_UPD_DTTM,\n        3 as BIW_BATCH_ID,\n        33 as generic_id,\n        33 as unique_id,\n        'Fail' as sometimes_bad_id,\n        current_timestamp as _updated_at\n)\n\nselect\n    *\nfrom sample_data", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "onsemi/stg_onsemi.sql", "original_file_path": "models/onsemi/stg_onsemi.sql", "name": "stg_onsemi", "alias": "stg_onsemi", "checksum": {"name": "sha256", "checksum": "9dc7bed07a8ed134b6ea26e7b3991f3baeb5ad7d64c02427d3585edbbc84333b"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/onsemi/stg_onsemi.sql", "build_path": "target/run/secret/models/onsemi/stg_onsemi.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1674177028.377922, "compiled_code": "with\n\nsample_data as (\n    select\n        1 as CORPORATION_CODE,\n        1 as BIW_INS_DTTM,\n        1 as BIW_UPD_DTTM,\n        1 as BIW_BATCH_ID,\n        11 as generic_id,\n        11 as unique_id,\n        'Pass' as sometimes_bad_id,\n        current_timestamp as _updated_at\n\n    union all\n\n    select\n        2 as CORPORATION_CODE,\n        2 as BIW_INS_DTTM,\n        2 as BIW_UPD_DTTM,\n        2 as BIW_BATCH_ID,\n        22 as generic_id,\n        22 as unique_id,\n        'Pass' as sometimes_bad_id,\n        current_timestamp as _updated_at\n\n    union all\n\n    select\n        3 as CORPORATION_CODE,\n        3 as BIW_INS_DTTM,\n        3 as BIW_UPD_DTTM,\n        3 as BIW_BATCH_ID,\n        33 as generic_id,\n        33 as unique_id,\n        'Fail' as sometimes_bad_id,\n        current_timestamp as _updated_at\n)\n\nselect\n    *\nfrom sample_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.stg_onsemi"}, "model.secret.check_sources": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.secret.get_sources"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "onsemi", "check_sources"], "unique_id": "model.secret.check_sources", "raw_code": "{%- set target_sources=var('source_database') -%}\n{%- set target_database=var('target_database') -%}\n{%- set sources=get_sources(target_sources) -%}\n\n-- sources exist in this database:\n  -- {{ target_sources }}\n\n-- check if sources exist in this database:\n  -- {{ target_database }}\n\n-- list of sources to check:\n  -- {{ sources }}\n\nselect * from (\n  {%- for source in sources %}\n    select count(1) from {{ target_database }}.{{ source }} {% if not loop.last %} union all {% endif %}\n  {%- endfor %}\n)", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "onsemi/check_sources.sql", "original_file_path": "models/onsemi/check_sources.sql", "name": "check_sources", "alias": "check_sources", "checksum": {"name": "sha256", "checksum": "ed199290193cfa8e00a0e3f0b2b451ff839282bf7cb9c2c990785ed9a6186558"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/onsemi/check_sources.sql", "build_path": "target/run/secret/models/onsemi/check_sources.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1674177028.380744, "compiled_code": "-- sources exist in this database:\n  -- raw\n\n-- check if sources exist in this database:\n  -- raw\n\n-- list of sources to check:\n  -- ['jaffle_shop.customers', 'jaffle_shop.orders', 'stripe.payment']\n\nselect * from (\n    select count(1) from raw.jaffle_shop.customers  union all \n    select count(1) from raw.jaffle_shop.orders  union all \n    select count(1) from raw.stripe.payment \n)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.check_sources"}, "model.secret.product_using_macros": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.secret.one_time_load", "macro.dbt.is_incremental"], "nodes": ["seed.secret.seed__product__one_time_load", "seed.secret.seed__negative_key", "seed.secret.seed__product__stg_data"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "PRODUCT_KEY", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "onsemi", "product_using_macros"], "unique_id": "model.secret.product_using_macros", "raw_code": "-- incremental model to bring in:\n    -- one time load data\n    -- -1 for pk \n    -- stg data \n-- using macros instead\n\n{{\n    config(\n        materialized='incremental',\n        unique_key=\"PRODUCT_KEY\"\n        )\n}}\n\nwith\n\n{{ one_time_load(from=ref('seed__product__one_time_load')) }}\n\n-- daily updated data\nstg_data as (\n    select * from {{ ref('seed__product__stg_data') }}\n    {%- if is_incremental() %}\n    where BIW_UPD_DTTM >= (select max(BIW_UPD_DTTM) from {{ this }})\n    {%- endif %}\n)\n\nselect * from one_time_load\n    -- after the initial load, this should return 0 records\n    {%- if is_incremental() %}\n    where BIW_UPD_DTTM >= (select max(BIW_UPD_DTTM) from {{ this }}) or BIW_UPD_DTTM is null\n    {%- endif %}\n\nunion all\n\nselect * from stg_data", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "onsemi/product_using_macros.sql", "original_file_path": "models/onsemi/product_using_macros.sql", "name": "product_using_macros", "alias": "product_using_macros", "checksum": {"name": "sha256", "checksum": "5b96a54e188d3f290ba76f846b494493e441545f51773589b4180f741d745dfb"}, "tags": [], "refs": [["seed__product__one_time_load"], ["seed__negative_key"], ["seed__product__stg_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/onsemi/product_using_macros.sql", "build_path": "target/run/secret/models/onsemi/product_using_macros.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "PRODUCT_KEY"}, "created_at": 1674177028.4209907, "compiled_code": "-- incremental model to bring in:\n    -- one time load data\n    -- -1 for pk \n    -- stg data \n-- using macros instead\n\n\n\nwith\n\n-- one time load with an added -1 for product key\n    union_relations as (\n    \n\n        (\n            select\n\n                cast('DEVELOPMENT.prod.seed__product__one_time_load' as \n    varchar\n) as _dbt_source_relation,\n                \n                    cast(\"PRODUCT_KEY\" as character varying(16777216)) as \"PRODUCT_KEY\" ,\n                    cast(\"PRODUCT_ID\" as NUMBER(38,0)) as \"PRODUCT_ID\" ,\n                    cast(\"DATA_SOURCE\" as character varying(16777216)) as \"DATA_SOURCE\" ,\n                    cast(\"NPD_BUCKET\" as NUMBER(38,0)) as \"NPD_BUCKET\" ,\n                    cast(\"WEB_PART_GROUP\" as NUMBER(38,0)) as \"WEB_PART_GROUP\" ,\n                    cast(\"IS_WEB_VISIBLE\" as BOOLEAN) as \"IS_WEB_VISIBLE\" ,\n                    cast(\"MOQ_QUANTITY\" as NUMBER(38,0)) as \"MOQ_QUANTITY\" ,\n                    cast(\"PART_OID_AK_ID\" as NUMBER(38,0)) as \"PART_OID_AK_ID\" ,\n                    cast(\"CREATED_DATE\" as DATE) as \"CREATED_DATE\" ,\n                    cast(\"BIW_INS_DTTM\" as NUMBER(38,0)) as \"BIW_INS_DTTM\" ,\n                    cast(\"BIW_UPD_DTTM\" as TIMESTAMP_NTZ) as \"BIW_UPD_DTTM\" ,\n                    cast(\"BIW_BATCH_ID\" as NUMBER(38,0)) as \"BIW_BATCH_ID\" ,\n                    cast(\"BIW_MD5_KEY\" as character varying(16777216)) as \"BIW_MD5_KEY\" ,\n                    cast(null as character varying(16777216)) as \"TRANSACTION_KEY\" ,\n                    cast(null as character varying(16777216)) as \"CORPORATION_KEY\" \n\n            from DEVELOPMENT.prod.seed__product__one_time_load\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('DEVELOPMENT.prod.seed__negative_key' as \n    varchar\n) as _dbt_source_relation,\n                \n                    cast(\"PRODUCT_KEY\" as character varying(16777216)) as \"PRODUCT_KEY\" ,\n                    cast(null as NUMBER(38,0)) as \"PRODUCT_ID\" ,\n                    cast(null as character varying(16777216)) as \"DATA_SOURCE\" ,\n                    cast(null as NUMBER(38,0)) as \"NPD_BUCKET\" ,\n                    cast(null as NUMBER(38,0)) as \"WEB_PART_GROUP\" ,\n                    cast(null as BOOLEAN) as \"IS_WEB_VISIBLE\" ,\n                    cast(null as NUMBER(38,0)) as \"MOQ_QUANTITY\" ,\n                    cast(null as NUMBER(38,0)) as \"PART_OID_AK_ID\" ,\n                    cast(null as DATE) as \"CREATED_DATE\" ,\n                    cast(null as NUMBER(38,0)) as \"BIW_INS_DTTM\" ,\n                    cast(null as TIMESTAMP_NTZ) as \"BIW_UPD_DTTM\" ,\n                    cast(null as NUMBER(38,0)) as \"BIW_BATCH_ID\" ,\n                    cast(null as character varying(16777216)) as \"BIW_MD5_KEY\" ,\n                    cast(\"TRANSACTION_KEY\" as character varying(16777216)) as \"TRANSACTION_KEY\" ,\n                    cast(\"CORPORATION_KEY\" as character varying(16777216)) as \"CORPORATION_KEY\" \n\n            from DEVELOPMENT.prod.seed__negative_key\n\n            \n        )\n\n        ),\n    one_time_load as (\n        select\n            -- using this to only select columns from the one_time_load_table, not the extras from other keys\n            \n\n    \"PRODUCT_KEY\",\n  \"PRODUCT_ID\",\n  \"DATA_SOURCE\",\n  \"NPD_BUCKET\",\n  \"WEB_PART_GROUP\",\n  \"IS_WEB_VISIBLE\",\n  \"MOQ_QUANTITY\",\n  \"PART_OID_AK_ID\",\n  \"CREATED_DATE\",\n  \"BIW_INS_DTTM\",\n  \"BIW_UPD_DTTM\",\n  \"BIW_BATCH_ID\",\n  \"BIW_MD5_KEY\"\n        from union_relations\n    ),\n\n\n\n-- daily updated data\nstg_data as (\n    select * from DEVELOPMENT.prod.seed__product__stg_data\n)\n\nselect * from one_time_load\n    -- after the initial load, this should return 0 records\n\nunion all\n\nselect * from stg_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.product_using_macros"}, "model.secret.onsemi_incremental": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.secret.edw_get_column_list_new", "macro.secret.edw_get_quoted_column_list_new", "macro.secret.edw_get_md5_column_list_new", "macro.dbt.is_incremental", "macro.secret.v_sql_update_macro"], "nodes": ["model.secret.int_onsemi", "model.secret.int_onsemi", "model.secret.int_onsemi", "seed.secret.seed__sample_data_status", "model.secret.int_onsemi", "seed.secret.seed__sample_data_status"]}, "config": {"enabled": true, "alias": "BILLING_FACT", "schema": "MART_SALES", "database": null, "tags": ["MART SALES"], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["CORPORATION_CODE"], "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": false, "merge_update_columns": ["BIW_UPD_DTTM", "BIW_BATCH_ID", "GENERIC_ID", "UNIQUE_ID", "SOMETIMES_BAD_ID", "_UPDATED_AT", "V_PK_LIST", "V_HOUSE_KEEPING_COLUMN", "V_ALL_COLUMN_LIST", "V_UPDATE_COLUMN_LIST", "BIW_MD5_KEY"], "description": "Building table Billing_FACT for sales mart ", "post-hook": [{"sql": "{{ v_sql_update_macro(11) }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "MART_SALES", "fqn": ["secret", "onsemi", "onsemi_incremental"], "unique_id": "model.secret.onsemi_incremental", "raw_code": "-- static\n{%- set v_pk_list = [\"CORPORATION_CODE\"]-%}\n{%- set v_house_keeping_column = [\"BIW_INS_DTTM\",\"BIW_UPD_DTTM\",\"BIW_BATCH_ID\",\"BIW_MD5_KEY\"]-%}\n-- derived\n{%- set v_all_column_list = edw_get_column_list_new(ref('int_onsemi')) -%}\n{%- set v_update_column_list = edw_get_quoted_column_list_new(ref('int_onsemi'), v_pk_list|list + ['BIW_INS_DTTM']|list) -%}\n{%- set v_md5_column_list = edw_get_md5_column_list_new(ref('int_onsemi'), v_pk_list|list+ v_house_keeping_column|list ) -%}\n\n{#\n{%- set v_sql_update_tgt -%}\n    update DEVELOPMENT.dbt_pkearns.seed__sample_data\n    set deleted=3\n    where id not in (\n        select id from {{ ref('seed__sample_data_status') }}\n    )\n{% endset %}\n#}\n\n\n{{\n    config(\n         description = 'Building table Billing_FACT for sales mart '\n        ,transient=false\n        ,materialized='incremental'\n        ,schema ='MART_SALES'\n        ,alias='BILLING_FACT'\n        ,tags ='MART SALES'\n        ,unique_key=v_pk_list\n        ,merge_update_columns=[ \"BIW_UPD_DTTM\", \"BIW_BATCH_ID\", \"GENERIC_ID\", \"UNIQUE_ID\", \"SOMETIMES_BAD_ID\", \"_UPDATED_AT\", \"V_PK_LIST\", \"V_HOUSE_KEEPING_COLUMN\", \"V_ALL_COLUMN_LIST\", \"V_UPDATE_COLUMN_LIST\", \"BIW_MD5_KEY\" ]\n        ,post_hook=\"{{ v_sql_update_macro(11) }}\"\n        )\n}}\n\n-- depends_on: {{ ref('seed__sample_data_status') }}\n\n-- sql\nwith\n\nsample_data as (\n    select * from {{ ref('int_onsemi') }}\n)\n\nselect\n    *,\n    '{{ v_all_column_list }}' as v_all_column_list_incremental,\n    {{ v_update_column_list }} as v_update_column_list_incremental,\n    {{ v_md5_column_list }} as v_md5_column_list_incremental\nfrom sample_data\n\n    {% if is_incremental() %}\n        -- this filter will only be applied on an incremental run\n        where _updated_at > (select max(_updated_at) from {{ this }}) \n    {% endif %}", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "onsemi/onsemi_incremental.sql", "original_file_path": "models/onsemi/onsemi_incremental.sql", "name": "onsemi_incremental", "alias": "BILLING_FACT", "checksum": {"name": "sha256", "checksum": "e9c7de0de4b74c2bca3381cd38a86a067d348ee33237f960ed7519726a5b304e"}, "tags": ["MART SALES"], "refs": [["int_onsemi"], ["int_onsemi"], ["int_onsemi"], ["seed__sample_data_status"], ["int_onsemi"], ["seed__sample_data_status"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/onsemi/onsemi_incremental.sql", "build_path": "target/run/secret/models/onsemi/onsemi_incremental.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "description": "Building table Billing_FACT for sales mart ", "transient": false, "schema": "MART_SALES", "alias": "BILLING_FACT", "tags": ["MART SALES"], "unique_key": ["CORPORATION_CODE"], "merge_update_columns": ["BIW_UPD_DTTM", "BIW_BATCH_ID", "GENERIC_ID", "UNIQUE_ID", "SOMETIMES_BAD_ID", "_UPDATED_AT", "V_PK_LIST", "V_HOUSE_KEEPING_COLUMN", "V_ALL_COLUMN_LIST", "V_UPDATE_COLUMN_LIST", "BIW_MD5_KEY"], "post-hook": ["{{ v_sql_update_macro(11) }}"]}, "created_at": 1674177028.4321434, "compiled_code": "-- static-- derived\n\n\n\n\n-- depends_on: DEVELOPMENT.prod.seed__sample_data_status\n\n-- sql\nwith\n\nsample_data as (\n    select * from DEVELOPMENT.prod.int_onsemi\n)\n\nselect\n    *,\n    'CORPORATION_CODE, BIW_INS_DTTM, BIW_UPD_DTTM, BIW_BATCH_ID, GENERIC_ID, UNIQUE_ID, SOMETIMES_BAD_ID, _UPDATED_AT, V_PK_LIST, V_HOUSE_KEEPING_COLUMN, V_ALL_COLUMN_LIST, V_UPDATE_COLUMN_LIST, BIW_MD5_KEY' as v_all_column_list_incremental,\n    ['BIW_UPD_DTTM', 'BIW_BATCH_ID', 'GENERIC_ID', 'UNIQUE_ID', 'SOMETIMES_BAD_ID', '_UPDATED_AT', 'V_PK_LIST', 'V_HOUSE_KEEPING_COLUMN', 'V_ALL_COLUMN_LIST', 'V_UPDATE_COLUMN_LIST', 'BIW_MD5_KEY'] as v_update_column_list_incremental,\n    md5(object_construct ('col1',GENERIC_ID, 'col2',UNIQUE_ID, 'col3',SOMETIMES_BAD_ID, 'col4',_UPDATED_AT, 'col5',V_PK_LIST, 'col6',V_HOUSE_KEEPING_COLUMN, 'col7',V_ALL_COLUMN_LIST, 'col8',V_UPDATE_COLUMN_LIST)::string ) as v_md5_column_list_incremental\nfrom sample_data\n\n    \n        -- this filter will only be applied on an incremental run\n        where _updated_at > (select max(_updated_at) from DEVELOPMENT.MART_SALES.BILLING_FACT) \n    ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.MART_SALES.BILLING_FACT"}, "model.secret.int_onsemi": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.secret.edw_get_column_list_new", "macro.secret.edw_get_quoted_column_list_new", "macro.secret.edw_get_md5_column_list_new"], "nodes": ["model.secret.stg_onsemi"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "onsemi", "int_onsemi"], "unique_id": "model.secret.int_onsemi", "raw_code": "-- static\n{%- set v_pk_list = [\"CORPORATION_CODE\"] -%}\n{%- set v_house_keeping_column = [\"BIW_INS_DTTM\",\"BIW_UPD_DTTM\",\"BIW_BATCH_ID\",\"BIW_MD5_KEY\"] -%}\n-- derived\n{%- set v_all_column_list = edw_get_column_list_new(this) -%}\n{%- set v_update_column_list = edw_get_quoted_column_list_new(this, v_pk_list|list + ['BIW_INS_DTTM']|list) -%}\n{%- set v_md5_column_list = edw_get_md5_column_list_new(this, v_pk_list|list+ v_house_keeping_column|list ) -%}\n\n-- sql\nwith\n\nsample_data as (\n    select * from {{ ref('stg_onsemi') }}\n)\n\nselect\n    *\n    ,\n    {{ v_pk_list }} as v_pk_list,\n    {{ v_house_keeping_column }} as v_house_keeping_column,\n    '{{ v_all_column_list }}' as v_all_column_list,\n    {{ v_update_column_list }} as v_update_column_list,\n    {{ v_md5_column_list }} as BIW_MD5_KEY\nfrom sample_data", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "onsemi/int_onsemi.sql", "original_file_path": "models/onsemi/int_onsemi.sql", "name": "int_onsemi", "alias": "int_onsemi", "checksum": {"name": "sha256", "checksum": "08e758fc8df54a8f400c31b8e9f70cce35e8ca05f723dc681c9d155d37dbdb7b"}, "tags": [], "refs": [["stg_onsemi"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/onsemi/int_onsemi.sql", "build_path": "target/run/secret/models/onsemi/int_onsemi.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1674177028.4541337, "compiled_code": "-- static-- derived-- sql\nwith\n\nsample_data as (\n    select * from DEVELOPMENT.prod.stg_onsemi\n)\n\nselect\n    *\n    ,\n    ['CORPORATION_CODE'] as v_pk_list,\n    ['BIW_INS_DTTM', 'BIW_UPD_DTTM', 'BIW_BATCH_ID', 'BIW_MD5_KEY'] as v_house_keeping_column,\n    'CORPORATION_CODE, BIW_INS_DTTM, BIW_UPD_DTTM, BIW_BATCH_ID, GENERIC_ID, UNIQUE_ID, SOMETIMES_BAD_ID, _UPDATED_AT, V_PK_LIST, V_HOUSE_KEEPING_COLUMN, V_ALL_COLUMN_LIST, V_UPDATE_COLUMN_LIST, BIW_MD5_KEY' as v_all_column_list,\n    ['BIW_UPD_DTTM', 'BIW_BATCH_ID', 'GENERIC_ID', 'UNIQUE_ID', 'SOMETIMES_BAD_ID', '_UPDATED_AT', 'V_PK_LIST', 'V_HOUSE_KEEPING_COLUMN', 'V_ALL_COLUMN_LIST', 'V_UPDATE_COLUMN_LIST', 'BIW_MD5_KEY'] as v_update_column_list,\n    md5(object_construct ('col1',GENERIC_ID, 'col2',UNIQUE_ID, 'col3',SOMETIMES_BAD_ID, 'col4',_UPDATED_AT, 'col5',V_PK_LIST, 'col6',V_HOUSE_KEEPING_COLUMN, 'col7',V_ALL_COLUMN_LIST, 'col8',V_UPDATE_COLUMN_LIST)::string ) as BIW_MD5_KEY\nfrom sample_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.int_onsemi"}, "model.secret.stg_warehouse_metering_history": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.secret.standardize_timestamp", "macro.dbt_utils.star", "macro.dbt.is_incremental"], "nodes": ["source.secret.snowflake_meta.warehouse_metering_history", "source.secret.snowflake_meta.warehouse_metering_history"]}, "config": {"enabled": true, "alias": null, "schema": "snowflake_meta", "database": null, "tags": ["snowflake_meta", "snowflake_meta", "daily"], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": true, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "snowflake_meta", "fqn": ["secret", "snowflake_meta", "staging", "stg_warehouse_metering_history"], "unique_id": "model.secret.stg_warehouse_metering_history", "raw_code": "{{ config(tags=[\"snowflake_meta\", \"daily\"], materialized='incremental', transient=true) }}\n\nWITH HISTORY AS (\n  SELECT \n    {{ standardize_timestamp('START_TIME') }} AS START_TIME_CENTRAL_TIME,\n    {{ standardize_timestamp('END_TIME') }}   AS END_TIME_CENTRAL_TIME,\n\n\t{{ \n      dbt_utils.star(\n        from=source('snowflake_meta', 'warehouse_metering_history'),\n        except=[\n          \"START_TIME\",\n          \"END_TIME\",\n          \"INGESTION_TIME\"\n        ]\n      ) \n    }}, \n\n    END_TIME AS WATERMARK\n\n  FROM \n    {{ source('snowflake_meta', 'warehouse_metering_history') }}\n\n  {% if is_incremental() %}\n    -- this filter will only be applied on an incremental run\n    WHERE \n      WATERMARK > (SELECT MAX(THIS.WATERMARK) FROM {{ this }} THIS)\n  {% endif %}\n)\n\nSELECT * FROM HISTORY", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "snowflake_meta/staging/stg_warehouse_metering_history.sql", "original_file_path": "models/snowflake_meta/staging/stg_warehouse_metering_history.sql", "name": "stg_warehouse_metering_history", "alias": "stg_warehouse_metering_history", "checksum": {"name": "sha256", "checksum": "5d6fbfb45abe5b9157138103cc8128455cd87d448138822c9b803f81ecffe34f"}, "tags": ["snowflake_meta", "daily"], "refs": [], "sources": [["snowflake_meta", "warehouse_metering_history"], ["snowflake_meta", "warehouse_metering_history"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/snowflake_meta/staging/stg_warehouse_metering_history.sql", "build_path": "target/run/secret/models/snowflake_meta/staging/stg_warehouse_metering_history.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "snowflake_meta", "tags": ["snowflake_meta", "daily"], "transient": true}, "created_at": 1674177028.4628346, "compiled_code": "\n\nWITH HISTORY AS (\n  SELECT \n    \n  CONVERT_TIMEZONE('America/Chicago', START_TIME)::TIMESTAMP_NTZ\n AS START_TIME_CENTRAL_TIME,\n    \n  CONVERT_TIMEZONE('America/Chicago', END_TIME)::TIMESTAMP_NTZ\n   AS END_TIME_CENTRAL_TIME,\n\n\t\n\n    \"WAREHOUSE_ID\",\n  \"WAREHOUSE_NAME\",\n  \"CREDITS_USED\",\n  \"CREDITS_USED_COMPUTE\",\n  \"CREDITS_USED_CLOUD_SERVICES\", \n\n    END_TIME AS WATERMARK\n\n  FROM \n    snowflake.account_usage.warehouse_metering_history\n\n  \n    -- this filter will only be applied on an incremental run\n    WHERE \n      WATERMARK > (SELECT MAX(THIS.WATERMARK) FROM DEVELOPMENT.snowflake_meta.stg_warehouse_metering_history THIS)\n  \n)\n\nSELECT * FROM HISTORY", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.snowflake_meta.stg_warehouse_metering_history"}, "model.secret.orders": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.secret.stg_orders", "model.secret.stg_payments"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "marts", "core", "orders"], "unique_id": "model.secret.orders", "raw_code": "with orders as  (\n\n    select * from {{ ref('stg_orders' )}}\n\n),\n\npayments as (\n\n    select * from {{ ref('stg_payments') }}\n    \n),\n\norder_payments as (\n\n    select\n\n        order_id,\n        sum(case when status = 'success' then amount end) as amount_usd\n\n    from payments\n    group by 1\n),\n\nfinal as (\n\n    select\n    \n        orders.order_id,\n        orders.customer_id,\n        orders.order_date,\n        coalesce(order_payments.amount_usd, 0) as amount\n    from orders\n    left join order_payments using (order_id)\n)\n\nselect * from final", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "marts/core/orders.sql", "original_file_path": "models/marts/core/orders.sql", "name": "orders", "alias": "orders", "checksum": {"name": "sha256", "checksum": "65112f247f72b87b4d8002d1f37972b165ee1b979e5a4323c8464b2736f0ac82"}, "tags": [], "refs": [["stg_orders"], ["stg_payments"]], "sources": [], "metrics": [], "description": "Complete orders model including the amount associated with each order.", "columns": {"order_id": {"name": "order_id", "description": "Primary key for orders", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "secret://models/marts/core/core.yml", "compiled_path": "target/compiled/secret/models/marts/core/orders.sql", "build_path": "target/run/secret/models/marts/core/orders.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1674177029.1036694, "compiled_code": "with orders as  (\n\n    select * from DEVELOPMENT.prod.stg_orders\n\n),\n\npayments as (\n\n    select * from DEVELOPMENT.prod.stg_payments\n    \n),\n\norder_payments as (\n\n    select\n\n        order_id,\n        sum(case when status = 'success' then amount end) as amount_usd\n\n    from payments\n    group by 1\n),\n\nfinal as (\n\n    select\n    \n        orders.order_id,\n        orders.customer_id,\n        orders.order_date,\n        coalesce(order_payments.amount_usd, 0) as amount\n    from orders\n    left join order_payments using (order_id)\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.orders"}, "model.secret.customers": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.secret.stg_customers", "model.secret.orders"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "marts", "core", "customers"], "unique_id": "model.secret.customers", "raw_code": "{{\n    config(\n        materialized='table'\n    )\n}}\n\nwith customers as (\n    select * from {{ ref('stg_customers')}}\n),\norders as (\n    select * from {{ ref('orders')}}\n),\ncustomer_orders as (\n    select\n        customer_id,\n        min(order_date) as first_order_date,\n        max(order_date) as most_recent_order_date,\n        count(order_id) as number_of_orders,\n        sum(amount) as lifetime_value\n    from orders\n    group by 1\n),\nfinal as (\n    select\n        customers.customer_id,\n        customers.first_name,\n        customers.last_name,\n        customer_orders.first_order_date,\n        customer_orders.most_recent_order_date,\n        coalesce(customer_orders.number_of_orders, 0) as number_of_orders,\n        customer_orders.lifetime_value\n    from customers\n    left join customer_orders using (customer_id)\n)\nselect * from final", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "marts/core/customers.sql", "original_file_path": "models/marts/core/customers.sql", "name": "customers", "alias": "customers", "checksum": {"name": "sha256", "checksum": "8397e7bacb0cb4d71bdc2b0b85fb732b0a6a173de770a0b86c89918306e24367"}, "tags": [], "refs": [["stg_customers"], ["orders"]], "sources": [], "metrics": [], "description": "One record per customer", "columns": {"customer_id": {"name": "customer_id", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_order_date": {"name": "first_order_date", "description": "NULL when a customer has not yet placed an order.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "secret://models/marts/core/core.yml", "compiled_path": "target/compiled/secret/models/marts/core/customers.sql", "build_path": "target/run/secret/models/marts/core/customers.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1674177029.102175, "compiled_code": "\n\nwith customers as (\n    select * from DEVELOPMENT.prod.stg_customers\n),\norders as (\n    select * from DEVELOPMENT.prod.orders\n),\ncustomer_orders as (\n    select\n        customer_id,\n        min(order_date) as first_order_date,\n        max(order_date) as most_recent_order_date,\n        count(order_id) as number_of_orders,\n        sum(amount) as lifetime_value\n    from orders\n    group by 1\n),\nfinal as (\n    select\n        customers.customer_id,\n        customers.first_name,\n        customers.last_name,\n        customer_orders.first_order_date,\n        customer_orders.most_recent_order_date,\n        coalesce(customer_orders.number_of_orders, 0) as number_of_orders,\n        customer_orders.lifetime_value\n    from customers\n    left join customer_orders using (customer_id)\n)\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.customers"}, "model.secret.payments__pivoted": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.get_column_values"], "nodes": ["model.secret.stg_payments", "model.secret.stg_payments"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "marts", "core", "payments__pivoted"], "unique_id": "model.secret.payments__pivoted", "raw_code": "{% set payment_methods = dbt_utils.get_column_values(table=ref('stg_payments'), column='payment_method') -%}\n\nwith payments as (\n    select * from {{ ref('stg_payments') }}\n),\n\npivoted as (\n    select\n        order_id,\n\n        {%- for payment_method in payment_methods -%}\n\n        sum(case when payment_method = '{{ payment_method }}' then amount else 0 end) as {{ payment_method }}_amount\n        \n        {%- if not loop.last -%}\n        ,\n        {% endif -%}\n        \n        {%- endfor %}\n    \n    from payments\n    group by 1\n)\n\nselect * from pivoted", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "marts/core/payments__pivoted.sql", "original_file_path": "models/marts/core/payments__pivoted.sql", "name": "payments__pivoted", "alias": "payments__pivoted", "checksum": {"name": "sha256", "checksum": "f0032b61d8e864f87adf3f6bd644ed35d7304db465458c948c181a3f606abc88"}, "tags": [], "refs": [["stg_payments"], ["stg_payments"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/marts/core/payments__pivoted.sql", "build_path": "target/run/secret/models/marts/core/payments__pivoted.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1674177028.4785974, "compiled_code": "with payments as (\n    select * from DEVELOPMENT.prod.stg_payments\n),\n\npivoted as (\n    select\n        order_id,sum(case when payment_method = 'credit_card' then amount else 0 end) as credit_card_amount,\n        sum(case when payment_method = 'bank_transfer' then amount else 0 end) as bank_transfer_amount,\n        sum(case when payment_method = 'coupon' then amount else 0 end) as coupon_amount,\n        sum(case when payment_method = 'gift_card' then amount else 0 end) as gift_card_amount\n    \n    from payments\n    group by 1\n)\n\nselect * from pivoted", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.payments__pivoted"}, "model.secret.execute_query": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_query"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "demos", "execute_query", "execute_query"], "unique_id": "model.secret.execute_query", "raw_code": "{% set your_query %}\n-- this should return 100\nselect count(customer_id) from customers where customer_id is not null\n{% endset %}\n\n{% set results = run_query(your_query) %}\n\n\n{% if execute %}\n{% set results_list = results.columns[0].values() %}\n{% else %}\n{% set results_list = [] %}\n{% endif %}\n\nselect\n{% for value in results_list %}\n'{{ value }}' as col,\n    {% if value == 100 %}\n        'is equal to 100'\n    {% else %}\n        'is NOT equal to 100'\n    {% endif %}\n    as some_context_col\n{% endfor %}", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "demos/execute_query/execute_query.sql", "original_file_path": "models/demos/execute_query/execute_query.sql", "name": "execute_query", "alias": "execute_query", "checksum": {"name": "sha256", "checksum": "356883310cb4fe8c1bd1d10065cc2bf9ef7f3a3387eb242b22607b70e7d9fbc7"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/demos/execute_query/execute_query.sql", "build_path": "target/run/secret/models/demos/execute_query/execute_query.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1674177028.496617, "compiled_code": "\n\n\n\n\n\n\n\n\nselect\n\n'100' as col,\n    \n        'is equal to 100'\n    \n    as some_context_col\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.execute_query"}, "model.secret.hard_deletes__augmented_snapshot_view": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.secret.create_augmented_snapshot"], "nodes": ["snapshot.secret.hard_deletes__snapshot"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "demos", "hard_deletes", "hard_deletes__augmented_snapshot_view"], "unique_id": "model.secret.hard_deletes__augmented_snapshot_view", "raw_code": "{{ create_augmented_snapshot(ref('hard_deletes__snapshot'), 'id') }}", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "demos/hard_deletes/hard_deletes__augmented_snapshot_view.sql", "original_file_path": "models/demos/hard_deletes/hard_deletes__augmented_snapshot_view.sql", "name": "hard_deletes__augmented_snapshot_view", "alias": "hard_deletes__augmented_snapshot_view", "checksum": {"name": "sha256", "checksum": "8938a6fa0b6e493eba21435a3349e32bb2ece179ed8b88b3cbe2ab6eb34d2fc1"}, "tags": [], "refs": [["hard_deletes__snapshot"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/demos/hard_deletes/hard_deletes__augmented_snapshot_view.sql", "build_path": "target/run/secret/models/demos/hard_deletes/hard_deletes__augmented_snapshot_view.sql", "deferred": false, "unrendered_config": {"materialized": "view", "enabled": true}, "created_at": 1674177028.5062394, "compiled_code": "\n\n    \n        \n\n    \n    \n    \n\n\n    with\n\n    snapshot_with_distant_past_and_distant_future_raw as (\n        select\n            *,\n\n            iff(\n                dbt_valid_from = min(dbt_valid_from) over (\n            partition by id order by dbt_valid_from rows between unbounded preceding and unbounded following\n        ),\n                TO_TIMESTAMP('1900-01-01 00:00:00+00'),\n                dbt_valid_from\n            ) as valid_from_with_distant_past,\n\n            iff(\n                dbt_valid_to is null,\n                TO_TIMESTAMP('9999-12-31 23:59:59+00'),\n                dbt_valid_to\n            ) as valid_to_with_distant_future\n\n        from DEVELOPMENT.prod.hard_deletes__snapshot\n    ),\n\n\n    snapshot_with_distant_past_and_distant_future as (\n        select \n            \n\n    \"ID\",\n  \"COLOR\",\n  \"THE_ANSWER\",\n  \"INSERT_TIME\",\n  \"DBT_SCD_ID\",\n  \"DBT_UPDATED_AT\",\n  \"DBT_VALID_FROM\",\n  \"DBT_VALID_TO\",\n            valid_from_with_distant_past,\n            valid_to_with_distant_future\n        \n        from snapshot_with_distant_past_and_distant_future_raw\n    ),\n\n\n    snapshot_with_is_deleted as (\n        select \n            *,\n            first_value(dbt_valid_to) over (\n                partition by id order by dbt_valid_to asc rows between unbounded preceding and unbounded following\n            ) is not null as is_deleted\n        \n        from snapshot_with_distant_past_and_distant_future\n    ),\n\n    snapshot_with_current_values as (\n        select \n            *,\n\n            iff(\n                is_deleted or (dbt_valid_to is null),\n                true,\n                false\n            ) as is_current\n        \n        from snapshot_with_is_deleted\n    )\n\n    select * from snapshot_with_current_values\n\n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.hard_deletes__augmented_snapshot_view"}, "model.secret.hard_deletes_source": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "demos", "hard_deletes", "hard_deletes_source"], "unique_id": "model.secret.hard_deletes_source", "raw_code": "{{ config(materialized='table') }}\n\nselect\n    1 as id,\n    'green' as color,\n    42 as the_answer,\n    current_timestamp() as insert_time\n\nunion all\n\nselect\n    3 as id,\n    'purple' as color,\n    42 as the_answer,\n    current_timestamp() as insert_time\n\nunion all\n\nselect\n    4 as id,\n    'green' as color,\n    42 as the_answer,\n    current_timestamp() as insert_time", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "demos/hard_deletes/hard_deletes_source.sql", "original_file_path": "models/demos/hard_deletes/hard_deletes_source.sql", "name": "hard_deletes_source", "alias": "hard_deletes_source", "checksum": {"name": "sha256", "checksum": "067129dc2d64a4de7ded9cd0765a7ee51e1b2f6664e897dfc7cff5b82bd77a6f"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/demos/hard_deletes/hard_deletes_source.sql", "build_path": "target/run/secret/models/demos/hard_deletes/hard_deletes_source.sql", "deferred": false, "unrendered_config": {"materialized": "table", "enabled": true}, "created_at": 1674177028.5186327, "compiled_code": "\n\nselect\n    1 as id,\n    'green' as color,\n    42 as the_answer,\n    current_timestamp() as insert_time\n\nunion all\n\nselect\n    3 as id,\n    'purple' as color,\n    42 as the_answer,\n    current_timestamp() as insert_time\n\nunion all\n\nselect\n    4 as id,\n    'green' as color,\n    42 as the_answer,\n    current_timestamp() as insert_time", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.hard_deletes_source"}, "model.secret.hard_deletes__snapshot_passthrough": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["snapshot.secret.hard_deletes__snapshot"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "demos", "hard_deletes", "hard_deletes__snapshot_passthrough"], "unique_id": "model.secret.hard_deletes__snapshot_passthrough", "raw_code": "select \n    *\n    \nfrom {{ ref('hard_deletes__snapshot')}}", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "demos/hard_deletes/hard_deletes__snapshot_passthrough.sql", "original_file_path": "models/demos/hard_deletes/hard_deletes__snapshot_passthrough.sql", "name": "hard_deletes__snapshot_passthrough", "alias": "hard_deletes__snapshot_passthrough", "checksum": {"name": "sha256", "checksum": "c6a8f76562b211dbde112155dc8c76c2daee5d84359ba518e7c8a664946630fa"}, "tags": [], "refs": [["hard_deletes__snapshot"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/demos/hard_deletes/hard_deletes__snapshot_passthrough.sql", "build_path": "target/run/secret/models/demos/hard_deletes/hard_deletes__snapshot_passthrough.sql", "deferred": false, "unrendered_config": {"materialized": "view", "enabled": true}, "created_at": 1674177028.5217073, "compiled_code": "select \n    *\n    \nfrom DEVELOPMENT.prod.hard_deletes__snapshot", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.hard_deletes__snapshot_passthrough"}, "model.secret.find_dupes": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["model.secret.dedupe_incremental", "model.secret.dedupe_incremental"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "demos", "dedupe_incremental", "find_dupes"], "unique_id": "model.secret.find_dupes", "raw_code": "-- find dupes\nselect {{ dbt_utils.star(ref('dedupe_incremental')) }}\nfrom \n    (\n    select *, row_number() over (partition by id order by insert_time desc) as _row_number\n    from {{ ref('dedupe_incremental') }}\n    )\nwhere _row_number != 1", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "demos/dedupe_incremental/find_dupes.sql", "original_file_path": "models/demos/dedupe_incremental/find_dupes.sql", "name": "find_dupes", "alias": "find_dupes", "checksum": {"name": "sha256", "checksum": "37511958f39cdf5119fcc03e85fd4613e042210bfa55c53619c8f02876825c29"}, "tags": [], "refs": [["dedupe_incremental"], ["dedupe_incremental"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/demos/dedupe_incremental/find_dupes.sql", "build_path": "target/run/secret/models/demos/dedupe_incremental/find_dupes.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1674177028.5479295, "compiled_code": "-- find dupes\nselect \n\n    \"ID\",\n  \"COLOR\",\n  \"THE_ANSWER\",\n  \"INSERT_TIME\"\nfrom \n    (\n    select *, row_number() over (partition by id order by insert_time desc) as _row_number\n    from DEVELOPMENT.prod.dedupe_incremental\n    )\nwhere _row_number != 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.find_dupes"}, "model.secret.dedupe_incremental": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "demos", "dedupe_incremental", "dedupe_incremental"], "unique_id": "model.secret.dedupe_incremental", "raw_code": "{{ config(materialized='table') }}\n\nselect\n    1 as id,\n    'green' as color,\n    42 as the_answer,\n    current_timestamp() as insert_time\n\nunion all\n\nselect\n    2 as id,\n    'purple' as color,\n    42 as the_answer,\n    current_timestamp() as insert_time\n\nunion all\n\nselect\n    1 as id,\n    'green' as color,\n    42 as the_answer,\n    current_timestamp() as insert_time", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "demos/dedupe_incremental/dedupe_incremental.sql", "original_file_path": "models/demos/dedupe_incremental/dedupe_incremental.sql", "name": "dedupe_incremental", "alias": "dedupe_incremental", "checksum": {"name": "sha256", "checksum": "4fae7fcf6f62f0d4444f9449c5cedf089dc8a8f2a2316b05e8a8f821667fee21"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/demos/dedupe_incremental/dedupe_incremental.sql", "build_path": "target/run/secret/models/demos/dedupe_incremental/dedupe_incremental.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1674177028.554532, "compiled_code": "\n\nselect\n    1 as id,\n    'green' as color,\n    42 as the_answer,\n    current_timestamp() as insert_time\n\nunion all\n\nselect\n    2 as id,\n    'purple' as color,\n    42 as the_answer,\n    current_timestamp() as insert_time\n\nunion all\n\nselect\n    1 as id,\n    'green' as color,\n    42 as the_answer,\n    current_timestamp() as insert_time", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.dedupe_incremental"}, "model.secret.warehouse_metering_history__incremental_snapshot": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.secret.stg_warehouse_metering_history"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["snowflake_meta", "daily"], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": true, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "demos", "snapshot_hack", "warehouse_metering_history__incremental_snapshot"], "unique_id": "model.secret.warehouse_metering_history__incremental_snapshot", "raw_code": "{{ config(tags=[\"snowflake_meta\", \"daily\"], materialized='incremental', transient=true) }}\n\nSELECT \n    *,\n    CURRENT_TIMESTAMP AS SNAPSHOTTED_AT_TIME \n    \nFROM {{ref('stg_warehouse_metering_history')}}", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "demos/snapshot_hack/warehouse_metering_history__incremental_snapshot.sql", "original_file_path": "models/demos/snapshot_hack/warehouse_metering_history__incremental_snapshot.sql", "name": "warehouse_metering_history__incremental_snapshot", "alias": "warehouse_metering_history__incremental_snapshot", "checksum": {"name": "sha256", "checksum": "d9a7816755cbd9925c5a396e96f4916c197227182d2285377f4617b179818c70"}, "tags": ["snowflake_meta", "daily"], "refs": [["stg_warehouse_metering_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/demos/snapshot_hack/warehouse_metering_history__incremental_snapshot.sql", "build_path": "target/run/secret/models/demos/snapshot_hack/warehouse_metering_history__incremental_snapshot.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["snowflake_meta", "daily"], "transient": true}, "created_at": 1674177028.5608325, "compiled_code": "\n\nSELECT \n    *,\n    CURRENT_TIMESTAMP AS SNAPSHOTTED_AT_TIME \n    \nFROM DEVELOPMENT.snowflake_meta.stg_warehouse_metering_history", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.warehouse_metering_history__incremental_snapshot"}, "model.secret.custom_schema": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "custom_schema", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "custom_schema", "fqn": ["secret", "demos", "custom_schema", "custom_schema"], "unique_id": "model.secret.custom_schema", "raw_code": "-- When you reference this in another model, notice how the schema location is changed from the project default.\n\nselect 'Hello, world!' as my_column", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "demos/custom_schema/custom_schema.sql", "original_file_path": "models/demos/custom_schema/custom_schema.sql", "name": "custom_schema", "alias": "custom_schema", "checksum": {"name": "sha256", "checksum": "30a2cf9a3ab272cb113d0cf4ecc4e7eba0c0be22641e17f0b5b411202bee191e"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/demos/custom_schema/custom_schema.sql", "build_path": "target/run/secret/models/demos/custom_schema/custom_schema.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "custom_schema"}, "created_at": 1674177028.5683005, "compiled_code": "-- When you reference this in another model, notice how the schema location is changed from the project default.\n\nselect 'Hello, world!' as my_column", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.custom_schema.custom_schema"}, "model.secret.get_dynamic_sql_value_usage": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.secret.get_dynamic_sql_value"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "demos", "dynamic_sql_value", "get_dynamic_sql_value_usage"], "unique_id": "model.secret.get_dynamic_sql_value_usage", "raw_code": "select \n    {{get_dynamic_sql_value()}} as dynamic_value", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "demos/dynamic_sql_value/get_dynamic_sql_value_usage.sql", "original_file_path": "models/demos/dynamic_sql_value/get_dynamic_sql_value_usage.sql", "name": "get_dynamic_sql_value_usage", "alias": "get_dynamic_sql_value_usage", "checksum": {"name": "sha256", "checksum": "8bd98226dda4f847e0388a208449e6988305dd516809294c99608d72f2047595"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/demos/dynamic_sql_value/get_dynamic_sql_value_usage.sql", "build_path": "target/run/secret/models/demos/dynamic_sql_value/get_dynamic_sql_value_usage.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1674177028.5713384, "compiled_code": "select \n    123 as dynamic_value", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.get_dynamic_sql_value_usage"}, "model.secret.autogenerate_join_conditions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.secret.customers", "model.secret.orders", "model.secret.stg_customers"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "demos", "autogenerate_join_conditions", "autogenerate_join_conditions"], "unique_id": "model.secret.autogenerate_join_conditions", "raw_code": "{%- set qualified_fields=['orders.order_id', 'orders.customer_id'] -%}\n{%- set joins=['orders', 'stg_customers'] -%}\n\nwith\ncustomers as (select * from {{ ref('customers') }}),\norders as (select * from {{ ref('orders') }}),\nstg_customers as (select * from {{ ref('stg_customers') }})\n\nselect\n    customers.lifetime_value,\n\n    {%- for qualified_field in qualified_fields %}\n        {%- set field=qualified_field.split('.')[1] %}\n        coalesce( {{qualified_field}} , -1) as {{ field }},\n    {%- endfor %}\n\n    customers.number_of_orders\nfrom customers\n    {%- for join in joins %}\n        left outer join {{ join }}\n        on customers.customer_id = {{ join }}.customer_id\n    {%- endfor %}", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "demos/autogenerate_join_conditions/autogenerate_join_conditions.sql", "original_file_path": "models/demos/autogenerate_join_conditions/autogenerate_join_conditions.sql", "name": "autogenerate_join_conditions", "alias": "autogenerate_join_conditions", "checksum": {"name": "sha256", "checksum": "83bd0973aed7948c8e3be6bd160bd22af25e3b0eaa46e88df7976d2defd8b912"}, "tags": [], "refs": [["customers"], ["orders"], ["stg_customers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/demos/autogenerate_join_conditions/autogenerate_join_conditions.sql", "build_path": "target/run/secret/models/demos/autogenerate_join_conditions/autogenerate_join_conditions.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1674177028.5873134, "compiled_code": "with\ncustomers as (select * from DEVELOPMENT.prod.customers),\norders as (select * from DEVELOPMENT.prod.orders),\nstg_customers as (select * from DEVELOPMENT.prod.stg_customers)\n\nselect\n    customers.lifetime_value,\n        coalesce( orders.order_id , -1) as order_id,\n        coalesce( orders.customer_id , -1) as customer_id,\n\n    customers.number_of_orders\nfrom customers\n        left outer join orders\n        on customers.customer_id = orders.customer_id\n        left outer join stg_customers\n        on customers.customer_id = stg_customers.customer_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.autogenerate_join_conditions"}, "model.secret.pack_json_demo": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.secret.pack_json"], "nodes": ["model.secret.stg_warehouse_metering_history", "model.secret.stg_warehouse_metering_history"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "demos", "pack_json", "pack_json_demo"], "unique_id": "model.secret.pack_json_demo", "raw_code": "select \n    warehouse_name, \n    warehouse_id,\n    {{pack_json(ref('stg_warehouse_metering_history'), except=['json'])}} as json\n    \nfrom {{ref('stg_warehouse_metering_history')}}\n\n-- {{this}}", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "demos/pack_json/pack_json_demo.sql", "original_file_path": "models/demos/pack_json/pack_json_demo.sql", "name": "pack_json_demo", "alias": "pack_json_demo", "checksum": {"name": "sha256", "checksum": "7b97ec98e5753ec10e052e6ed04caca25c9a6fda5c4735d9174bbf43970877d7"}, "tags": [], "refs": [["stg_warehouse_metering_history"], ["stg_warehouse_metering_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/demos/pack_json/pack_json_demo.sql", "build_path": "target/run/secret/models/demos/pack_json/pack_json_demo.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1674177028.5954854, "compiled_code": "select \n    warehouse_name, \n    warehouse_id,\n    \n\n    object_construct_keep_null('START_TIME_CENTRAL_TIME', START_TIME_CENTRAL_TIME,\n  'END_TIME_CENTRAL_TIME', END_TIME_CENTRAL_TIME,\n  'WAREHOUSE_ID', WAREHOUSE_ID,\n  'WAREHOUSE_NAME', WAREHOUSE_NAME,\n  'CREDITS_USED', CREDITS_USED,\n  'CREDITS_USED_COMPUTE', CREDITS_USED_COMPUTE,\n  'CREDITS_USED_CLOUD_SERVICES', CREDITS_USED_CLOUD_SERVICES,\n  'WATERMARK', WATERMARK) as json\n    \nfrom DEVELOPMENT.snowflake_meta.stg_warehouse_metering_history\n\n-- DEVELOPMENT.prod.pack_json_demo", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.pack_json_demo"}, "model.secret.change_roles": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [{"sql": "use role TRANSFORMER", "transaction": true, "index": null}], "pre-hook": [{"sql": "use role TRANSFORMER", "transaction": true, "index": null}]}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "demos", "change_roles", "change_roles"], "unique_id": "model.secret.change_roles", "raw_code": "{{ \n    config(\n        pre_hook='use role ' ~ target.role , \n        post_hook='use role ' ~ target.role \n    ) \n}}\n\nselect 1 as my_column", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "demos/change_roles/change_roles.sql", "original_file_path": "models/demos/change_roles/change_roles.sql", "name": "change_roles", "alias": "change_roles", "checksum": {"name": "sha256", "checksum": "e746de16ce31fa4834d876823a6aa65d37a6a8eba233d338da827029717402b9"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/demos/change_roles/change_roles.sql", "build_path": "target/run/secret/models/demos/change_roles/change_roles.sql", "deferred": false, "unrendered_config": {"materialized": "view", "pre-hook": ["use role TRANSFORMER"], "post-hook": ["use role TRANSFORMER"]}, "created_at": 1674177028.6058996, "compiled_code": "\n\nselect 1 as my_column", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.change_roles"}, "model.secret.model_with_schema_tests": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "demos", "skippable_schema_tests", "model_with_schema_tests"], "unique_id": "model.secret.model_with_schema_tests", "raw_code": "select 1 as id", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "demos/skippable_schema_tests/model_with_schema_tests.sql", "original_file_path": "models/demos/skippable_schema_tests/model_with_schema_tests.sql", "name": "model_with_schema_tests", "alias": "model_with_schema_tests", "checksum": {"name": "sha256", "checksum": "3ea0f972fa1b56aa2dc2f56ee784b6a5796312f9a813d59ae70fd8855f10d16d"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {"id": {"name": "id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": ["skippable_schema_test"]}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "secret://models/demos/skippable_schema_tests/schema.yml", "compiled_path": "target/compiled/secret/models/demos/skippable_schema_tests/model_with_schema_tests.sql", "build_path": "target/run/secret/models/demos/skippable_schema_tests/model_with_schema_tests.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1674177029.1236103, "compiled_code": "select 1 as id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.model_with_schema_tests"}, "model.secret.local_variables": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "demos", "variables", "local_variables", "local_variables"], "unique_id": "model.secret.local_variables", "raw_code": "{% set list_of_status = ['success', 'pass', 'fail', 'unknown'] %}\n{% set successful_statuses = ['success', 'pass', 'yes', 'successful'] %}\n\n\n{% for status in list_of_status %}\n\nselect\n   '{{ status }}' as status,\n    {%- if status in successful_statuses %}\n      -- is '{{ status }}' a successful status? yes :)\n      true\n    {%- else %}\n      -- is '{{ status }}' a successful status? no :(\n      false\n    {%- endif %}\n    as is_successful\n   \n   {% if not loop.last %} \n   union all\n   {% endif %}\n{% endfor %}", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "demos/variables/local_variables/local_variables.sql", "original_file_path": "models/demos/variables/local_variables/local_variables.sql", "name": "local_variables", "alias": "local_variables", "checksum": {"name": "sha256", "checksum": "d763b6653613391f8b872c2a92b42e4dfeda5fc02231f158f456a0319fa16ad2"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/demos/variables/local_variables/local_variables.sql", "build_path": "target/run/secret/models/demos/variables/local_variables/local_variables.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1674177028.624261, "compiled_code": "\n\n\n\n\n\nselect\n   'success' as status,\n      -- is 'success' a successful status? yes :)\n      true\n    as is_successful\n   \n    \n   union all\n   \n\n\nselect\n   'pass' as status,\n      -- is 'pass' a successful status? yes :)\n      true\n    as is_successful\n   \n    \n   union all\n   \n\n\nselect\n   'fail' as status,\n      -- is 'fail' a successful status? no :(\n      false\n    as is_successful\n   \n    \n   union all\n   \n\n\nselect\n   'unknown' as status,\n      -- is 'unknown' a successful status? no :(\n      false\n    as is_successful\n   \n   \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.local_variables"}, "model.secret.variable_usage": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.get_column_values", "macro.secret.variable_update"], "nodes": ["model.secret.disable_list_create"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": [{"sql": "{{ variable_update() }}", "transaction": true, "index": null}]}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "demos", "variables", "global_variables", "variable_usage"], "unique_id": "model.secret.variable_usage", "raw_code": "{{\n    config(\n        materialized='table',\n        pre_hook=\"{{ variable_update() }}\"\n    )\n}}\n\n{% set local_var=\"'my_quoted_var'\" %}\n\nselect \n    '{{ var('my_cool_var') }}'::date as col_a,\n    {{ local_var }} as col_b,\n    {{ var('disable_models') }} as var_disable_models,\n    '{{ disable_models }}' as disable_models,\n    \n    {%- if \"some_model_name\" in var('disable_models') %}\n        true \n        {%- else %}\n        false\n    {%- endif %} \n    as some_flag,\n    '{{ this.name }}' as this__name,\n    {%- if this.name in dbt_utils.get_column_values(ref('disable_list_create'), 'disable_models') %} \n        true \n        {%- else %}\n        false\n    {%- endif %} \n    as some_other_flag,\n\n{% set disable_models=\"['some_other_model_name']\" %}\n\n    {{ disable_models }} as disable_models_updated,\n\n    -- non existent variable (variable not defined)\n    '{{ var(\"non_existent_variable\", \"default_value\") }}' as non_existent_variable,\n    -- variable defined in dbt_project.yml as '2016-01-01'\n    '{{ var(\"my_cool_var\", \"default_value\") }}' as existent_variable,\n    -- define non existent variable (variable defined in sql)\n    {% set my_cool_var='2021-01-01' %} \n    '{{ my_cool_var }}' as now_existent_variable,\n    -- global var not the same as variable defined in sql\n    '{{ var(\"my_cool_var\") }}' as var_variable,\n    -- switch from var to set variable\n    {% set my_cool_var_mirror=var(\"my_cool_var\") %}\n    '{{ my_cool_var_mirror }}' as mirror_variable,\n    -- now you can alter the value\n    {% set my_cool_var_mirror=\"2022-01-01\" %}\n    '{{ my_cool_var_mirror }}' as changed_variable", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "demos/variables/global_variables/variable_usage.sql", "original_file_path": "models/demos/variables/global_variables/variable_usage.sql", "name": "variable_usage", "alias": "variable_usage", "checksum": {"name": "sha256", "checksum": "c50065359110f08bfc594027e46eb43265cf14e1d1f7d24117975a014eaf5599"}, "tags": [], "refs": [["disable_list_create"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/demos/variables/global_variables/variable_usage.sql", "build_path": "target/run/secret/models/demos/variables/global_variables/variable_usage.sql", "deferred": false, "unrendered_config": {"materialized": "table", "pre-hook": ["{{ variable_update() }}"]}, "created_at": 1674177028.6316164, "compiled_code": "\n\n\n\nselect \n    '2016-06-01'::date as col_a,\n    'my_quoted_var' as col_b,\n    ['some_model_name'] as var_disable_models,\n    '' as disable_models,\n        true \n    as some_flag,\n    'variable_usage' as this__name,\n        false \n    as some_other_flag,\n\n\n\n    ['some_other_model_name'] as disable_models_updated,\n\n    -- non existent variable (variable not defined)\n    'default_value' as non_existent_variable,\n    -- variable defined in dbt_project.yml as '2016-01-01'\n    '2016-06-01' as existent_variable,\n    -- define non existent variable (variable defined in sql)\n     \n    '2021-01-01' as now_existent_variable,\n    -- global var not the same as variable defined in sql\n    '2016-06-01' as var_variable,\n    -- switch from var to set variable\n    \n    '2016-06-01' as mirror_variable,\n    -- now you can alter the value\n    \n    '2022-01-01' as changed_variable", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.variable_usage"}, "model.secret.skip_this_incremental": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.get_column_values"], "nodes": ["model.secret.disable_list_create"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "demos", "variables", "global_variables", "skip_this_incremental"], "unique_id": "model.secret.skip_this_incremental", "raw_code": "-- # your incremental block\n{{\n    config(\n        materialized='incremental',\n        unique_key='id'\n    )\n}}\n\n-- # if block at the top to see if this model should be run, pulls from your query\n-- # this.name checks the name of this model and compares to the values returned for the the models that should be run\n{%- if this.name in dbt_utils.get_column_values(ref('disable_list_create'), 'disable_models') and is_incremental() %}\n\n    -- # skip this model\n    select * from {{ this }} limit 0\n    \n{%- else %}\n    \n    -- # run this model\n    -- TODO: replace this with your usual incremental SQL code here\n    select\n        1 as id,\n        'example data' as some_col\n\n{%- endif %}", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "demos/variables/global_variables/skip_this_incremental.sql", "original_file_path": "models/demos/variables/global_variables/skip_this_incremental.sql", "name": "skip_this_incremental", "alias": "skip_this_incremental", "checksum": {"name": "sha256", "checksum": "d5a964836a7bf22fe0d38e947a3019855fb240dbf0bef798eeb6f5a260922489"}, "tags": [], "refs": [["disable_list_create"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/demos/variables/global_variables/skip_this_incremental.sql", "build_path": "target/run/secret/models/demos/variables/global_variables/skip_this_incremental.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "id"}, "created_at": 1674177028.644803, "compiled_code": "-- # your incremental block\n\n\n-- # if block at the top to see if this model should be run, pulls from your query\n-- # this.name checks the name of this model and compares to the values returned for the the models that should be run\n    \n    -- # run this model\n    -- TODO: replace this with your usual incremental SQL code here\n    select\n        1 as id,\n        'example data' as some_col", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.skip_this_incremental"}, "model.secret.disable_list_create": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "demos", "variables", "global_variables", "disable_list_create"], "unique_id": "model.secret.disable_list_create", "raw_code": "{{\n    config(\n        materialized='table'\n    )\n}}\n\n-- # Example of what your query should output, materialized as a table\nselect\n'model1' as disable_models\n\nunion all\n\nselect\n'model2' as disable_models", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "demos/variables/global_variables/disable_list_create.sql", "original_file_path": "models/demos/variables/global_variables/disable_list_create.sql", "name": "disable_list_create", "alias": "disable_list_create", "checksum": {"name": "sha256", "checksum": "ab3dfd239327e8addfe0126e004d768440cbd65962db2afcc95d22360b4cce70"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/demos/variables/global_variables/disable_list_create.sql", "build_path": "target/run/secret/models/demos/variables/global_variables/disable_list_create.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1674177028.6519911, "compiled_code": "\n\n-- # Example of what your query should output, materialized as a table\nselect\n'model1' as disable_models\n\nunion all\n\nselect\n'model2' as disable_models", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.disable_list_create"}, "model.secret.landing": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "landing", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "demos", "landing_materialization_demo", "landing"], "unique_id": "model.secret.landing", "raw_code": "{{config(materialized='landing')}}\n\nCREATE OR REPLACE TABLE {{this.database}}.{{this.schema}}.{{this.identifier}}\n\n(\n\tRECORD_ID          INT     NOT NULL     COMMENT 'Unique ID of the record',\n\t\"DATE\"             DATE    NULL         COMMENT 'Date of record',\n    RECORD_DESCRIPTION VARCHAR NULL         COMMENT 'Description of the record'\n);", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "demos/landing_materialization_demo/landing.sql", "original_file_path": "models/demos/landing_materialization_demo/landing.sql", "name": "landing", "alias": "landing", "checksum": {"name": "sha256", "checksum": "1ebea40d4ef2e1bc93af1316eb5bb185d05d88e6f2bd2d7caf6e9d62e307fb53"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/demos/landing_materialization_demo/landing.sql", "build_path": "target/run/secret/models/demos/landing_materialization_demo/landing.sql", "deferred": false, "unrendered_config": {"materialized": "landing"}, "created_at": 1674177028.6548574, "compiled_code": "\n\nCREATE OR REPLACE TABLE DEVELOPMENT.prod.landing\n\n(\n\tRECORD_ID          INT     NOT NULL     COMMENT 'Unique ID of the record',\n\t\"DATE\"             DATE    NULL         COMMENT 'Date of record',\n    RECORD_DESCRIPTION VARCHAR NULL         COMMENT 'Description of the record'\n);", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.landing"}, "model.secret.show_this_variable": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.get_filtered_columns_in_relation"], "nodes": ["model.secret.my_first_model"]}, "config": {"enabled": true, "alias": "an_aliased_table", "schema": null, "database": null, "tags": ["some_tag"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "demos", "this", "show_this_variable"], "unique_id": "model.secret.show_this_variable", "raw_code": "{{\n    config(\n        alias='an_aliased_table',\n        materialized='table',\n        tags=[\"some_tag\"]\n    )\n}}\n\nselect \n\n    'hello, world!' as test_col,\n    -- get columns from another table\n    {{ dbt_utils.get_filtered_columns_in_relation(from=ref('my_first_model')) }} as utils_get_filtered_columns,\n    -- get name of this table\n    '{{ this }}' as this,\n    -- with alias it will provide alias\n    '{{ this.name }}' as this_name,\n    -- config info\n    '{{ model.config.alias }}' as model_alias,\n    {{ model.config.tags }} as model_tags,\n    '{{ model.config.materialized }}' as model_materialization,\n    -- model info\n    '{{ model.alias }}' as model_alias_v2,\n    '{{ model.name }}' as model_name,\n    '{{ model.database }}' as model_database,\n    '{{ model.schema }}' as model_schema,\n    {{ model.fqn }} as model_fully_qualified_name,\n    '{{ model.unique_id }}' as model_unique_id,\n    '{{ model.path }}' as model_path", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "demos/this/show_this_variable.sql", "original_file_path": "models/demos/this/show_this_variable.sql", "name": "show_this_variable", "alias": "an_aliased_table", "checksum": {"name": "sha256", "checksum": "f45cc273619ce5a99f86f982a033a3a25c8e9f9fe316778579068ebf4b23c5ba"}, "tags": ["some_tag"], "refs": [["my_first_model"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/demos/this/show_this_variable.sql", "build_path": "target/run/secret/models/demos/this/show_this_variable.sql", "deferred": false, "unrendered_config": {"materialized": "table", "alias": "an_aliased_table", "tags": ["some_tag"]}, "created_at": 1674177028.678427, "compiled_code": "\n\nselect \n\n    'hello, world!' as test_col,\n    -- get columns from another table\n    ['COL', 'THIS', 'THIS_NAME', 'COLS2'] as utils_get_filtered_columns,\n    -- get name of this table\n    'DEVELOPMENT.prod.an_aliased_table' as this,\n    -- with alias it will provide alias\n    'an_aliased_table' as this_name,\n    -- config info\n    'an_aliased_table' as model_alias,\n    ['some_tag'] as model_tags,\n    'table' as model_materialization,\n    -- model info\n    'an_aliased_table' as model_alias_v2,\n    'show_this_variable' as model_name,\n    'DEVELOPMENT' as model_database,\n    'prod' as model_schema,\n    ['secret', 'demos', 'this', 'show_this_variable'] as model_fully_qualified_name,\n    'model.secret.show_this_variable' as model_unique_id,\n    'demos/this/show_this_variable.sql' as model_path", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.an_aliased_table"}, "model.secret.raw_json": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "demos", "dynamic_variant_unpacking", "raw_json"], "unique_id": "model.secret.raw_json", "raw_code": "select parse_json('{a:1, b:2, c:\"randy is super cool\"}') as json", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "demos/dynamic_variant_unpacking/raw_json.sql", "original_file_path": "models/demos/dynamic_variant_unpacking/raw_json.sql", "name": "raw_json", "alias": "raw_json", "checksum": {"name": "sha256", "checksum": "90d1f9877d116d221af7d9a28728b38d152c9d3d08048c838c09b595fe4b14e1"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/demos/dynamic_variant_unpacking/raw_json.sql", "build_path": "target/run/secret/models/demos/dynamic_variant_unpacking/raw_json.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1674177028.687715, "compiled_code": "select parse_json('{a:1, b:2, c:\"randy is super cool\"}') as json", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.raw_json"}, "model.secret.dynamic_unpack": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.secret.unpack_json"], "nodes": ["model.secret.raw_json", "model.secret.raw_json"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "demos", "dynamic_variant_unpacking", "dynamic_unpack"], "unique_id": "model.secret.dynamic_unpack", "raw_code": "select \n    *, \n    {{unpack_json(ref('raw_json'), 'json')}} \n    \nfrom {{ref('raw_json')}}", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "demos/dynamic_variant_unpacking/dynamic_unpack.sql", "original_file_path": "models/demos/dynamic_variant_unpacking/dynamic_unpack.sql", "name": "dynamic_unpack", "alias": "dynamic_unpack", "checksum": {"name": "sha256", "checksum": "058b5eff1deb2c673c2a561035e7428c10a18995f8a4cee1d11359e29cd4491f"}, "tags": [], "refs": [["raw_json"], ["raw_json"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/demos/dynamic_variant_unpacking/dynamic_unpack.sql", "build_path": "target/run/secret/models/demos/dynamic_variant_unpacking/dynamic_unpack.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1674177028.6906908, "compiled_code": "select \n    *, \n    \n\n  \n\n  \n    \n\n    \n        GET(json, 'a') AS a, \n    \n        GET(json, 'b') AS b, \n    \n        GET(json, 'c') AS c\n    \n\n  \n\n\n \n    \nfrom DEVELOPMENT.prod.raw_json", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.dynamic_unpack"}, "model.secret.add_udf_function__payment_glitch": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.py_script_postfix"], "nodes": ["model.secret.define_function__payment_glitch"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": ["numpy"], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "python", "add_udf_function__payment_glitch"], "unique_id": "model.secret.add_udf_function__payment_glitch", "raw_code": "\"\"\"\nUDFs\n    You can use the @udf decorator or udf function to define an \"anonymous\" function\n    and call it within your model function's DataFrame transformation. \n\"\"\"\n\nimport snowflake.snowpark.types as T\nimport snowflake.snowpark.functions as F\nimport numpy\n\ndef register_udf_add_random():\n    add_random = F.udf(\n        # use 'lambda' syntax, for simple functional behavior\n        lambda x: x + numpy.random.randint(1,99),\n        return_type=T.FloatType(),\n        input_types=[T.FloatType()]\n    )\n    return add_random\n\ndef model(dbt, session):\n\n    dbt.config(\n        materialized = \"table\",\n        packages = [\"numpy\"]\n    )\n\n    payments_glitch = dbt.ref(\"define_function__payment_glitch\")\n\n    add_random = register_udf_add_random()\n\n    # add money, who knows by how much\n    df = payments_glitch.withColumn(\"amount_plus_random\", add_random(\"amount\"))\n\n    return df", "language": "python", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "python/add_udf_function__payment_glitch.py", "original_file_path": "models/python/add_udf_function__payment_glitch.py", "name": "add_udf_function__payment_glitch", "alias": "add_udf_function__payment_glitch", "checksum": {"name": "sha256", "checksum": "db569da11fff913e2823e87d1421e8ef3ca3e3032f235a2edf844e815a7cd1ba"}, "tags": [], "refs": [["define_function__payment_glitch"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/python/add_udf_function__payment_glitch.py", "build_path": "target/run/secret/models/python/add_udf_function__payment_glitch.py", "deferred": false, "unrendered_config": {"materialized": "table", "packages": ["numpy"]}, "created_at": 1674177028.7011344, "compiled_code": "\"\"\"\nUDFs\n    You can use the @udf decorator or udf function to define an \"anonymous\" function\n    and call it within your model function's DataFrame transformation. \n\"\"\"\n\nimport snowflake.snowpark.types as T\nimport snowflake.snowpark.functions as F\nimport numpy\n\ndef register_udf_add_random():\n    add_random = F.udf(\n        # use 'lambda' syntax, for simple functional behavior\n        lambda x: x + numpy.random.randint(1,99),\n        return_type=T.FloatType(),\n        input_types=[T.FloatType()]\n    )\n    return add_random\n\ndef model(dbt, session):\n\n    dbt.config(\n        materialized = \"table\",\n        packages = [\"numpy\"]\n    )\n\n    payments_glitch = dbt.ref(\"define_function__payment_glitch\")\n\n    add_random = register_udf_add_random()\n\n    # add money, who knows by how much\n    df = payments_glitch.withColumn(\"amount_plus_random\", add_random(\"amount\"))\n\n    return df\n\n\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\ndef ref(*args,dbt_load_df_function):\n    refs = {\"define_function__payment_glitch\": \"DEVELOPMENT.prod.define_function__payment_glitch\"}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n\ndef source(*args, dbt_load_df_function):\n    sources = {}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n\nconfig_dict = {}\n\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = 'DEVELOPMENT'\n    schema = 'prod'\n    identifier = 'add_udf_function__payment_glitch'\n    def __repr__(self):\n        return 'DEVELOPMENT.prod.add_udf_function__payment_glitch'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = False\n\n# COMMAND ----------\n\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.add_udf_function__payment_glitch"}, "model.secret.import_pypi_package__holiday": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.py_script_postfix"], "nodes": ["model.secret.orders"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": ["holidays"], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "python", "import_pypi_package__holiday"], "unique_id": "model.secret.import_pypi_package__holiday", "raw_code": "import holidays\n\ndef is_holiday(date_col):\n    usa_holidays = holidays.US()\n    is_holiday = (date_col in usa_holidays)\n    return is_holiday\n\ndef model(dbt, session):\n    dbt.config(\n        materialized = \"table\",\n        packages = [\"holidays\"]\n    )\n\n    orders_df = dbt.ref(\"orders\")\n\n    df = orders_df.to_pandas()\n\n    # apply our function\n    # (columns need to be in uppercase on Snowpark)\n    df[\"IS_HOLIDAY\"] = df[\"ORDER_DATE\"].apply(is_holiday)\n\n    # return final dataset (Pandas DataFrame)\n    return df", "language": "python", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "python/import_pypi_package__holiday.py", "original_file_path": "models/python/import_pypi_package__holiday.py", "name": "import_pypi_package__holiday", "alias": "import_pypi_package__holiday", "checksum": {"name": "sha256", "checksum": "62d68a87388e64d0280627cf0440e9c64a3d25ba1379732db05b39425d998986"}, "tags": [], "refs": [["orders"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/python/import_pypi_package__holiday.py", "build_path": "target/run/secret/models/python/import_pypi_package__holiday.py", "deferred": false, "unrendered_config": {"materialized": "table", "packages": ["holidays"]}, "created_at": 1674177028.7067451, "compiled_code": "import holidays\n\ndef is_holiday(date_col):\n    usa_holidays = holidays.US()\n    is_holiday = (date_col in usa_holidays)\n    return is_holiday\n\ndef model(dbt, session):\n    dbt.config(\n        materialized = \"table\",\n        packages = [\"holidays\"]\n    )\n\n    orders_df = dbt.ref(\"orders\")\n\n    df = orders_df.to_pandas()\n\n    # apply our function\n    # (columns need to be in uppercase on Snowpark)\n    df[\"IS_HOLIDAY\"] = df[\"ORDER_DATE\"].apply(is_holiday)\n\n    # return final dataset (Pandas DataFrame)\n    return df\n\n\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\ndef ref(*args,dbt_load_df_function):\n    refs = {\"orders\": \"DEVELOPMENT.prod.orders\"}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n\ndef source(*args, dbt_load_df_function):\n    sources = {}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n\nconfig_dict = {}\n\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = 'DEVELOPMENT'\n    schema = 'prod'\n    identifier = 'import_pypi_package__holiday'\n    def __repr__(self):\n        return 'DEVELOPMENT.prod.import_pypi_package__holiday'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = False\n\n# COMMAND ----------\n\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.import_pypi_package__holiday"}, "model.secret.define_function__payment_glitch": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.py_script_postfix"], "nodes": ["model.secret.stg_payments"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "python", "define_function__payment_glitch"], "unique_id": "model.secret.define_function__payment_glitch", "raw_code": "def times_two(x):\n    return x * 2\n\ndef model(dbt, session):\n    dbt.config(materialized=\"table\")\n\n    # bring in reference model as dataframe\n    payments_glitch = dbt.ref(\"stg_payments\")\n\n    # apply infinite money glitch\n    df = payments_glitch.withColumn(\"amount__glitch\", times_two(payments_glitch[\"amount\"]))\n    return df", "language": "python", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "python/define_function__payment_glitch.py", "original_file_path": "models/python/define_function__payment_glitch.py", "name": "define_function__payment_glitch", "alias": "define_function__payment_glitch", "checksum": {"name": "sha256", "checksum": "0436e221b036304e2a490e6ab7e678b71a9ec3377e29a3a32a9f3071a75edb9e"}, "tags": [], "refs": [["stg_payments"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/python/define_function__payment_glitch.py", "build_path": "target/run/secret/models/python/define_function__payment_glitch.py", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1674177028.711209, "compiled_code": "def times_two(x):\n    return x * 2\n\ndef model(dbt, session):\n    dbt.config(materialized=\"table\")\n\n    # bring in reference model as dataframe\n    payments_glitch = dbt.ref(\"stg_payments\")\n\n    # apply infinite money glitch\n    df = payments_glitch.withColumn(\"amount__glitch\", times_two(payments_glitch[\"amount\"]))\n    return df\n\n\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\ndef ref(*args,dbt_load_df_function):\n    refs = {\"stg_payments\": \"DEVELOPMENT.prod.stg_payments\"}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n\ndef source(*args, dbt_load_df_function):\n    sources = {}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n\nconfig_dict = {}\n\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = 'DEVELOPMENT'\n    schema = 'prod'\n    identifier = 'define_function__payment_glitch'\n    def __repr__(self):\n        return 'DEVELOPMENT.prod.define_function__payment_glitch'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = False\n\n# COMMAND ----------\n\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.define_function__payment_glitch"}, "model.secret.python_builtins__describe": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.py_script_postfix"], "nodes": ["model.secret.customers"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["python"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "python", "python_builtins__describe"], "unique_id": "model.secret.python_builtins__describe", "raw_code": "def model(dbt, session):\n\n    # bring in reference model as dataframe\n    customers_df = dbt.ref(\"customers\")\n\n    # do transformation - apply \"describe\" function\n    described_df = customers_df.describe()\n\n    # return dataframe\n    return described_df", "language": "python", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "python/python_builtins__describe.py", "original_file_path": "models/python/python_builtins__describe.py", "name": "python_builtins__describe", "alias": "python_builtins__describe", "checksum": {"name": "sha256", "checksum": "832b8f256d5f6e11ce422554e33d3e37713f5c04ab9639a3c3afd7691ac4fc5d"}, "tags": ["python"], "refs": [["customers"]], "sources": [], "metrics": [], "description": "My transformation written in Python", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "secret://models/python/_config.yml", "compiled_path": "target/compiled/secret/models/python/python_builtins__describe.py", "build_path": "target/run/secret/models/python/python_builtins__describe.py", "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["python"]}, "created_at": 1674177029.0753353, "compiled_code": "def model(dbt, session):\n\n    # bring in reference model as dataframe\n    customers_df = dbt.ref(\"customers\")\n\n    # do transformation - apply \"describe\" function\n    described_df = customers_df.describe()\n\n    # return dataframe\n    return described_df\n\n\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\ndef ref(*args,dbt_load_df_function):\n    refs = {\"customers\": \"DEVELOPMENT.prod.customers\"}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n\ndef source(*args, dbt_load_df_function):\n    sources = {}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n\nconfig_dict = {}\n\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = 'DEVELOPMENT'\n    schema = 'prod'\n    identifier = 'python_builtins__describe'\n    def __repr__(self):\n        return 'DEVELOPMENT.prod.python_builtins__describe'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = False\n\n# COMMAND ----------\n\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.python_builtins__describe"}, "model.secret.use_variables__customers_limit_10": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.py_script_postfix"], "nodes": ["model.secret.customers"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "config_keys_used": ["target_name"], "target_name": "prod", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "python", "use_variables__customers_limit_10"], "unique_id": "model.secret.use_variables__customers_limit_10", "raw_code": "def model(dbt, session):\n    target_name = dbt.config.get(\"target_name\")\n\n    # bring in reference model as dataframe\n    customers_df = dbt.ref(\"customers\")\n\n    # limit data in dev\n    if target_name == \"dev\":\n        customers_df = customers_df.limit(10)\n\n    # return dataframe\n    return customers_df", "language": "python", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "python/use_variables__customers_limit_10.py", "original_file_path": "models/python/use_variables__customers_limit_10.py", "name": "use_variables__customers_limit_10", "alias": "use_variables__customers_limit_10", "checksum": {"name": "sha256", "checksum": "073c49a45bf8c45550fed4c45042a9b883767e800e3beb45f617d5e6b626786a"}, "tags": [], "refs": [["customers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "secret://models/python/_config.yml", "compiled_path": "target/compiled/secret/models/python/use_variables__customers_limit_10.py", "build_path": "target/run/secret/models/python/use_variables__customers_limit_10.py", "deferred": false, "unrendered_config": {"materialized": "table", "target_name": "prod", "config_keys_used": ["target_name"]}, "created_at": 1674177029.0788367, "compiled_code": "def model(dbt, session):\n    target_name = dbt.config.get(\"target_name\")\n\n    # bring in reference model as dataframe\n    customers_df = dbt.ref(\"customers\")\n\n    # limit data in dev\n    if target_name == \"dev\":\n        customers_df = customers_df.limit(10)\n\n    # return dataframe\n    return customers_df\n\n\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\ndef ref(*args,dbt_load_df_function):\n    refs = {\"customers\": \"DEVELOPMENT.prod.customers\"}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n\ndef source(*args, dbt_load_df_function):\n    sources = {}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n\nconfig_dict = {'target_name': 'prod'}\n\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = 'DEVELOPMENT'\n    schema = 'prod'\n    identifier = 'use_variables__customers_limit_10'\n    def __repr__(self):\n        return 'DEVELOPMENT.prod.use_variables__customers_limit_10'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = False\n\n# COMMAND ----------\n\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.use_variables__customers_limit_10"}, "snapshot.secret.hard_deletes__snapshot": {"compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["model.secret.hard_deletes_source"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "strategy": "check", "target_schema": "prod", "target_database": "DEVELOPMENT", "check_cols": ["color"], "invalidate_hard_deletes": true, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "hard_deletes", "hard_deletes__snapshot", "hard_deletes__snapshot"], "unique_id": "snapshot.secret.hard_deletes__snapshot", "raw_code": "\n\n{{\n    config(\n      target_database=target.database,\n      target_schema=target.schema,\n      unique_key='id',\n      check_cols=['color'],\n      strategy='check',\n      invalidate_hard_deletes=True,\n    )\n}}\n\nselect * from {{ ref('hard_deletes_source') }}\n\n", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "hard_deletes/hard_deletes__snapshot.sql", "original_file_path": "snapshots/hard_deletes/hard_deletes__snapshot.sql", "name": "hard_deletes__snapshot", "alias": "hard_deletes__snapshot", "checksum": {"name": "sha256", "checksum": "53574ca371dbe30d1e97f8604494772bc8e067d0e500745f9d5af77098633c59"}, "tags": [], "refs": [["hard_deletes_source"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": "target/run/secret/snapshots/hard_deletes/hard_deletes__snapshot.sql", "deferred": false, "unrendered_config": {"enabled": true, "target_database": "DEVELOPMENT", "target_schema": "prod", "unique_key": "id", "check_cols": ["color"], "strategy": "check", "invalidate_hard_deletes": true}, "created_at": 1674177028.7383447, "compiled_code": "\n\n\n\nselect * from DEVELOPMENT.prod.hard_deletes_source\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.prod.hard_deletes__snapshot"}, "test.secret.assert_my_second_model_has_one_record": {"compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.secret.my_second_model"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPMENT", "schema": "dbt_test__audit", "fqn": ["secret", "assert_my_second_model_has_one_record"], "unique_id": "test.secret.assert_my_second_model_has_one_record", "raw_code": "select 'error!' as error\nwhere (select count(*) from {{ref('my_second_model')}}) != 1", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "assert_my_second_model_has_one_record.sql", "original_file_path": "tests/assert_my_second_model_has_one_record.sql", "name": "assert_my_second_model_has_one_record", "alias": "assert_my_second_model_has_one_record", "checksum": {"name": "sha256", "checksum": "ded2bf6fa5eabaa1665d886d4972ac607ddc0e8ea09596b0a44ab25e9890b7a1"}, "tags": [], "refs": [["my_second_model"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/tests/assert_my_second_model_has_one_record.sql", "build_path": "target/run/secret/tests/assert_my_second_model_has_one_record.sql", "deferred": false, "unrendered_config": {}, "created_at": 1674177028.7676399, "compiled_code": "select 'error!' as error\nwhere (select count(*) from DEVELOPMENT.prod.my_second_model) != 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "seed.secret.sample_json_and_array_fields": {"resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "sample_json_and_array_fields"], "unique_id": "seed.secret.sample_json_and_array_fields", "raw_code": "", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "sample_json_and_array_fields.csv", "original_file_path": "seeds/sample_json_and_array_fields.csv", "name": "sample_json_and_array_fields", "alias": "sample_json_and_array_fields", "checksum": {"name": "sha256", "checksum": "b76c71b136a8dfeee8c76f288cde5a074e75ba8d4d02ada2454511f30eab0172"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": "target/run/secret/seeds/sample_json_and_array_fields.csv", "deferred": false, "unrendered_config": {}, "created_at": 1674177028.7865796}, "seed.secret.seed__edw_process_info": {"resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "onsemi", "seed__edw_process_info"], "unique_id": "seed.secret.seed__edw_process_info", "raw_code": "", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "onsemi/seed__edw_process_info.csv", "original_file_path": "seeds/onsemi/seed__edw_process_info.csv", "name": "seed__edw_process_info", "alias": "seed__edw_process_info", "checksum": {"name": "sha256", "checksum": "dcfe78ef658393bcb7e54a71c241013c63ce7c0aa250ceeeec0979ce3d6e2210"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": "target/run/secret/seeds/onsemi/seed__edw_process_info.csv", "deferred": false, "unrendered_config": {}, "created_at": 1674177028.7894628}, "seed.secret.seed__corporation__stg_data": {"resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "onsemi", "seed__corporation__stg_data"], "unique_id": "seed.secret.seed__corporation__stg_data", "raw_code": "", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "onsemi/seed__corporation__stg_data.csv", "original_file_path": "seeds/onsemi/seed__corporation__stg_data.csv", "name": "seed__corporation__stg_data", "alias": "seed__corporation__stg_data", "checksum": {"name": "sha256", "checksum": "9d0340fd1774393bfe17c08b87e5b1b3fef12a44139ddb24ec95a8436b26a8f4"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": "target/run/secret/seeds/onsemi/seed__corporation__stg_data.csv", "deferred": false, "unrendered_config": {}, "created_at": 1674177028.791864}, "seed.secret.seed__corporation__one_time_load": {"resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "onsemi", "seed__corporation__one_time_load"], "unique_id": "seed.secret.seed__corporation__one_time_load", "raw_code": "", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "onsemi/seed__corporation__one_time_load.csv", "original_file_path": "seeds/onsemi/seed__corporation__one_time_load.csv", "name": "seed__corporation__one_time_load", "alias": "seed__corporation__one_time_load", "checksum": {"name": "sha256", "checksum": "fd7527ae56db96a8e38bbd40acdeb7914da3a4ecd829aaf449e3df9c31c5692c"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": "target/run/secret/seeds/onsemi/seed__corporation__one_time_load.csv", "deferred": false, "unrendered_config": {}, "created_at": 1674177028.7943203}, "seed.secret.seed__product__stg_data": {"resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "onsemi", "seed__product__stg_data"], "unique_id": "seed.secret.seed__product__stg_data", "raw_code": "", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "onsemi/seed__product__stg_data.csv", "original_file_path": "seeds/onsemi/seed__product__stg_data.csv", "name": "seed__product__stg_data", "alias": "seed__product__stg_data", "checksum": {"name": "sha256", "checksum": "f6ed759c2dd8098f59f457f067cebc53279e733a9efde1714e59b34398dc29e9"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": "target/run/secret/seeds/onsemi/seed__product__stg_data.csv", "deferred": false, "unrendered_config": {}, "created_at": 1674177028.7968519}, "seed.secret.seed__negative_key": {"resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "onsemi", "seed__negative_key"], "unique_id": "seed.secret.seed__negative_key", "raw_code": "", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "onsemi/seed__negative_key.csv", "original_file_path": "seeds/onsemi/seed__negative_key.csv", "name": "seed__negative_key", "alias": "seed__negative_key", "checksum": {"name": "sha256", "checksum": "e255eeb6a682e602a7eccb7b2f989790458d0923d7a7aae33b3e92b4e5b80a3b"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": "target/run/secret/seeds/onsemi/seed__negative_key.csv", "deferred": false, "unrendered_config": {}, "created_at": 1674177028.7992039}, "seed.secret.seed__sample_data_status": {"resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "onsemi", "seed__sample_data_status"], "unique_id": "seed.secret.seed__sample_data_status", "raw_code": "", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "onsemi/seed__sample_data_status.csv", "original_file_path": "seeds/onsemi/seed__sample_data_status.csv", "name": "seed__sample_data_status", "alias": "seed__sample_data_status", "checksum": {"name": "sha256", "checksum": "9dffbefe43422fea9676874a814eb84a3205c70b33f612e7ad4bec6e7c8936f1"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": "target/run/secret/seeds/onsemi/seed__sample_data_status.csv", "deferred": false, "unrendered_config": {}, "created_at": 1674177028.8015482}, "seed.secret.seed__product__one_time_load": {"resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "onsemi", "seed__product__one_time_load"], "unique_id": "seed.secret.seed__product__one_time_load", "raw_code": "", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "onsemi/seed__product__one_time_load.csv", "original_file_path": "seeds/onsemi/seed__product__one_time_load.csv", "name": "seed__product__one_time_load", "alias": "seed__product__one_time_load", "checksum": {"name": "sha256", "checksum": "5c1e3e501ad2da4c11d2b67258f54ba4efa5441109b5206e86334ee87bb684d2"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": "target/run/secret/seeds/onsemi/seed__product__one_time_load.csv", "deferred": false, "unrendered_config": {}, "created_at": 1674177028.80394}, "seed.secret.seed__edw_process_batch_ctl": {"resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "onsemi", "seed__edw_process_batch_ctl"], "unique_id": "seed.secret.seed__edw_process_batch_ctl", "raw_code": "", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "onsemi/seed__edw_process_batch_ctl.csv", "original_file_path": "seeds/onsemi/seed__edw_process_batch_ctl.csv", "name": "seed__edw_process_batch_ctl", "alias": "seed__edw_process_batch_ctl", "checksum": {"name": "sha256", "checksum": "e498010dd9c93abfc9e6f2068f4869eb683e2ca0a440c3670d182bb8d03892df"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": "target/run/secret/seeds/onsemi/seed__edw_process_batch_ctl.csv", "deferred": false, "unrendered_config": {}, "created_at": 1674177028.8063364}, "seed.secret.seed__sample_data": {"resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "onsemi", "seed__sample_data"], "unique_id": "seed.secret.seed__sample_data", "raw_code": "", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "onsemi/seed__sample_data.csv", "original_file_path": "seeds/onsemi/seed__sample_data.csv", "name": "seed__sample_data", "alias": "seed__sample_data", "checksum": {"name": "sha256", "checksum": "63fd6d38ae2896051cdb3bc99280207dd78cf9a7fadb2fc116bae60438a299b3"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": "target/run/secret/seeds/onsemi/seed__sample_data.csv", "deferred": false, "unrendered_config": {}, "created_at": 1674177028.8089223}, "model.dbt_artifacts.dim_dbt__exposures": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__exposures"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_artifacts_kearns_added", "fqn": ["dbt_artifacts", "dim_dbt__exposures"], "unique_id": "model.dbt_artifacts.dim_dbt__exposures", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__exposures') }}\n\n),\n\nexposures as (\n\n    select\n        exposure_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        name,\n        type,\n        owner,\n        maturity,\n        path,\n        description,\n        url,\n        package_name,\n        depends_on_nodes\n    from base\n\n)\n\nselect * from exposures", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "dim_dbt__exposures.sql", "original_file_path": "models/dim_dbt__exposures.sql", "name": "dim_dbt__exposures", "alias": "dim_dbt__exposures", "checksum": {"name": "sha256", "checksum": "3632b529bf1dd2a1dfa86444a95ba41745c4c224121c19d3ddcfbc20a4016c7e"}, "tags": [], "refs": [["stg_dbt__exposures"]], "sources": [], "metrics": [], "description": "Dimension model that contains data about exposures.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Node description.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exposure_execution_id": {"name": "exposure_execution_id", "description": "Execution ID of the exposure node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "maturity": {"name": "maturity", "description": "Exposure maturity; one of high, medium, low.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner": {"name": "owner", "description": "Owner of the exposure, usually an email address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Exposure type; one of dashboard, notebook, analysis, ml, application (used to organize on docs site)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url": {"name": "url", "description": "The URL of the BI tool where the data defined by the exposure can be viewed.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/dim_dbt__exposures.yml", "compiled_path": "target/compiled/dbt_artifacts/models/dim_dbt__exposures.sql", "build_path": "target/run/dbt_artifacts/models/dim_dbt__exposures.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added"}, "created_at": 1674177029.2307887, "compiled_code": "with base as (\n\n    select *\n    from DEVELOPMENT.dbt_artifacts_kearns_added__staging.stg_dbt__exposures\n\n),\n\nexposures as (\n\n    select\n        exposure_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        name,\n        type,\n        owner,\n        maturity,\n        path,\n        description,\n        url,\n        package_name,\n        depends_on_nodes\n    from base\n\n)\n\nselect * from exposures", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_artifacts_kearns_added.dim_dbt__exposures"}, "model.dbt_artifacts.dim_dbt__snapshots": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__snapshots"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_artifacts_kearns_added", "fqn": ["dbt_artifacts", "dim_dbt__snapshots"], "unique_id": "model.dbt_artifacts.dim_dbt__snapshots", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__snapshots') }}\n\n),\n\nsnapshots as (\n\n    select\n        snapshot_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        path,\n        checksum,\n        strategy\n    from base\n\n)\n\nselect * from snapshots", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "dim_dbt__snapshots.sql", "original_file_path": "models/dim_dbt__snapshots.sql", "name": "dim_dbt__snapshots", "alias": "dim_dbt__snapshots", "checksum": {"name": "sha256", "checksum": "66ac6ac957813423edb91dd672c10b9dc7cd9f0da69065822a1b9cf0b533cd33"}, "tags": [], "refs": [["stg_dbt__snapshots"]], "sources": [], "metrics": [], "description": "Dimension model that contains data about snapshots.", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "snapshot_execution_id": {"name": "snapshot_execution_id", "description": "Execution ID of the snapshot node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "strategy": {"name": "strategy", "description": "Snapshot \"strategies\" define how dbt knows if a row has changed. There are two strategies built-in to dbt \u2014 timestamp\nand check.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/dim_dbt__snapshots.yml", "compiled_path": "target/compiled/dbt_artifacts/models/dim_dbt__snapshots.sql", "build_path": "target/run/dbt_artifacts/models/dim_dbt__snapshots.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added"}, "created_at": 1674177029.1765108, "compiled_code": "with base as (\n\n    select *\n    from DEVELOPMENT.dbt_artifacts_kearns_added__staging.stg_dbt__snapshots\n\n),\n\nsnapshots as (\n\n    select\n        snapshot_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        path,\n        checksum,\n        strategy\n    from base\n\n)\n\nselect * from snapshots", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_artifacts_kearns_added.dim_dbt__snapshots"}, "model.dbt_artifacts.dim_dbt__seeds": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__seeds"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_artifacts_kearns_added", "fqn": ["dbt_artifacts", "dim_dbt__seeds"], "unique_id": "model.dbt_artifacts.dim_dbt__seeds", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__seeds') }}\n\n),\n\nseeds as (\n\n    select\n        seed_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        package_name,\n        path,\n        checksum\n    from base\n\n)\n\nselect * from seeds", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "dim_dbt__seeds.sql", "original_file_path": "models/dim_dbt__seeds.sql", "name": "dim_dbt__seeds", "alias": "dim_dbt__seeds", "checksum": {"name": "sha256", "checksum": "8c42b28b798ddd07bc878721f26a8a48e403d8a616e7627d5b9d64215a95de7d"}, "tags": [], "refs": [["stg_dbt__seeds"]], "sources": [], "metrics": [], "description": "Dimension model that contains data about seeds.", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "seed_execution_id": {"name": "seed_execution_id", "description": "Execution ID of the seed node.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/dim_dbt__seeds.yml", "compiled_path": "target/compiled/dbt_artifacts/models/dim_dbt__seeds.sql", "build_path": "target/run/dbt_artifacts/models/dim_dbt__seeds.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added"}, "created_at": 1674177029.1693597, "compiled_code": "with base as (\n\n    select *\n    from DEVELOPMENT.dbt_artifacts_kearns_added__staging.stg_dbt__seeds\n\n),\n\nseeds as (\n\n    select\n        seed_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        package_name,\n        path,\n        checksum\n    from base\n\n)\n\nselect * from seeds", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_artifacts_kearns_added.dim_dbt__seeds"}, "model.dbt_artifacts.fct_dbt__model_executions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__model_executions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_artifacts_kearns_added", "fqn": ["dbt_artifacts", "fct_dbt__model_executions"], "unique_id": "model.dbt_artifacts.fct_dbt__model_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__model_executions') }}\n\n),\n\nmodel_executions as (\n\n    select\n        model_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema,\n        name\n    from base\n\n)\n\nselect * from model_executions", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "fct_dbt__model_executions.sql", "original_file_path": "models/fct_dbt__model_executions.sql", "name": "fct_dbt__model_executions", "alias": "fct_dbt__model_executions", "checksum": {"name": "sha256", "checksum": "bb399d412a0be0f63c6df89e5812edf50a515a616106e2916726187040ae8956"}, "tags": [], "refs": [["stg_dbt__model_executions"]], "sources": [], "metrics": [], "description": "Fact model that contains data about model executions.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "model_execution_id": {"name": "model_execution_id", "description": "Execution ID of the model node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/fct_dbt__model_executions.yml", "compiled_path": "target/compiled/dbt_artifacts/models/fct_dbt__model_executions.sql", "build_path": "target/run/dbt_artifacts/models/fct_dbt__model_executions.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added"}, "created_at": 1674177029.1494312, "compiled_code": "with base as (\n\n    select *\n    from DEVELOPMENT.dbt_artifacts_kearns_added__staging.stg_dbt__model_executions\n\n),\n\nmodel_executions as (\n\n    select\n        model_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema,\n        name\n    from base\n\n)\n\nselect * from model_executions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_artifacts_kearns_added.fct_dbt__model_executions"}, "model.dbt_artifacts.fct_dbt__test_executions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__test_executions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_artifacts_kearns_added", "fqn": ["dbt_artifacts", "fct_dbt__test_executions"], "unique_id": "model.dbt_artifacts.fct_dbt__test_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__test_executions') }}\n\n),\n\ntest_executions as (\n\n    select\n        test_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        failures\n    from base\n\n)\n\nselect * from test_executions", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "fct_dbt__test_executions.sql", "original_file_path": "models/fct_dbt__test_executions.sql", "name": "fct_dbt__test_executions", "alias": "fct_dbt__test_executions", "checksum": {"name": "sha256", "checksum": "e3f063c873571c579a15322193d5eb934d877c2b9ef4cfe56f0267af345a6142"}, "tags": [], "refs": [["stg_dbt__test_executions"]], "sources": [], "metrics": [], "description": "Fact model that contains data about test executions.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "failures": {"name": "failures", "description": "Test failures. Value is 1 if the test failed, 0 if successful.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_execution_id": {"name": "test_execution_id", "description": "Execution ID of the test node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/fct_dbt__test_executions.yml", "compiled_path": "target/compiled/dbt_artifacts/models/fct_dbt__test_executions.sql", "build_path": "target/run/dbt_artifacts/models/fct_dbt__test_executions.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added"}, "created_at": 1674177029.2140741, "compiled_code": "with base as (\n\n    select *\n    from DEVELOPMENT.dbt_artifacts_kearns_added__staging.stg_dbt__test_executions\n\n),\n\ntest_executions as (\n\n    select\n        test_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        failures\n    from base\n\n)\n\nselect * from test_executions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_artifacts_kearns_added.fct_dbt__test_executions"}, "model.dbt_artifacts.dim_dbt__models": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__models"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_artifacts_kearns_added", "fqn": ["dbt_artifacts", "dim_dbt__models"], "unique_id": "model.dbt_artifacts.dim_dbt__models", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__models') }}\n\n),\n\nmodels as (\n\n    select\n        model_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        path,\n        checksum,\n        materialization\n    from base\n\n)\n\nselect * from models", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "dim_dbt__models.sql", "original_file_path": "models/dim_dbt__models.sql", "name": "dim_dbt__models", "alias": "dim_dbt__models", "checksum": {"name": "sha256", "checksum": "244fad537fd4be765dd42c17da1c66b739b37d95b4ef9a5588d0ba21187f47d6"}, "tags": [], "refs": [["stg_dbt__models"]], "sources": [], "metrics": [], "description": "Dimension model that contains data about models.", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "model_execution_id": {"name": "model_execution_id", "description": "Execution ID of the model node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/dim_dbt__models.yml", "compiled_path": "target/compiled/dbt_artifacts/models/dim_dbt__models.sql", "build_path": "target/run/dbt_artifacts/models/dim_dbt__models.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added"}, "created_at": 1674177029.1562886, "compiled_code": "with base as (\n\n    select *\n    from DEVELOPMENT.dbt_artifacts_kearns_added__staging.stg_dbt__models\n\n),\n\nmodels as (\n\n    select\n        model_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        path,\n        checksum,\n        materialization\n    from base\n\n)\n\nselect * from models", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_artifacts_kearns_added.dim_dbt__models"}, "model.dbt_artifacts.fct_dbt__snapshot_executions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__snapshot_executions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_artifacts_kearns_added", "fqn": ["dbt_artifacts", "fct_dbt__snapshot_executions"], "unique_id": "model.dbt_artifacts.fct_dbt__snapshot_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__snapshot_executions') }}\n\n),\n\nsnapshot_executions as (\n\n    select\n        snapshot_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema,\n        name\n    from base\n\n)\n\nselect * from snapshot_executions", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "fct_dbt__snapshot_executions.sql", "original_file_path": "models/fct_dbt__snapshot_executions.sql", "name": "fct_dbt__snapshot_executions", "alias": "fct_dbt__snapshot_executions", "checksum": {"name": "sha256", "checksum": "c0a5b04814d60f8acbea9e209e43bd636dd15f944b9d1e2cb8281b675fcb75a5"}, "tags": [], "refs": [["stg_dbt__snapshot_executions"]], "sources": [], "metrics": [], "description": "Fact model that contains data about snapshot executions.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "snapshot_execution_id": {"name": "snapshot_execution_id", "description": "Execution ID of the snapshot node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/fct_dbt__snapshot_executions.yml", "compiled_path": "target/compiled/dbt_artifacts/models/fct_dbt__snapshot_executions.sql", "build_path": "target/run/dbt_artifacts/models/fct_dbt__snapshot_executions.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added"}, "created_at": 1674177029.207826, "compiled_code": "with base as (\n\n    select *\n    from DEVELOPMENT.dbt_artifacts_kearns_added__staging.stg_dbt__snapshot_executions\n\n),\n\nsnapshot_executions as (\n\n    select\n        snapshot_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema,\n        name\n    from base\n\n)\n\nselect * from snapshot_executions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_artifacts_kearns_added.fct_dbt__snapshot_executions"}, "model.dbt_artifacts.fct_dbt__seed_executions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__seed_executions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_artifacts_kearns_added", "fqn": ["dbt_artifacts", "fct_dbt__seed_executions"], "unique_id": "model.dbt_artifacts.fct_dbt__seed_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__seed_executions') }}\n\n),\n\nseed_executions as (\n\n    select\n        seed_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema,\n        name\n    from base\n\n)\n\nselect * from seed_executions", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "fct_dbt__seed_executions.sql", "original_file_path": "models/fct_dbt__seed_executions.sql", "name": "fct_dbt__seed_executions", "alias": "fct_dbt__seed_executions", "checksum": {"name": "sha256", "checksum": "5ed1f7f8d56cf058136895637dafab0e1601dc7904e31a36610768e65a63f766"}, "tags": [], "refs": [["stg_dbt__seed_executions"]], "sources": [], "metrics": [], "description": "Fact model that contains data about seed executions.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "seed_execution_id": {"name": "seed_execution_id", "description": "Execution ID of the seed node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/fct_dbt__seed_executions.yml", "compiled_path": "target/compiled/dbt_artifacts/models/fct_dbt__seed_executions.sql", "build_path": "target/run/dbt_artifacts/models/fct_dbt__seed_executions.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added"}, "created_at": 1674177029.1634362, "compiled_code": "with base as (\n\n    select *\n    from DEVELOPMENT.dbt_artifacts_kearns_added__staging.stg_dbt__seed_executions\n\n),\n\nseed_executions as (\n\n    select\n        seed_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema,\n        name\n    from base\n\n)\n\nselect * from seed_executions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_artifacts_kearns_added.fct_dbt__seed_executions"}, "model.dbt_artifacts.fct_dbt__invocations": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__invocations"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_artifacts_kearns_added", "fqn": ["dbt_artifacts", "fct_dbt__invocations"], "unique_id": "model.dbt_artifacts.fct_dbt__invocations", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__invocations') }}\n\n),\n\ninvocations as (\n\n    select\n        command_invocation_id,\n        dbt_version,\n        project_name,\n        run_started_at,\n        dbt_command,\n        full_refresh_flag,\n        target_profile_name,\n        target_name,\n        target_schema,\n        target_threads,\n        dbt_cloud_project_id,\n        dbt_cloud_job_id,\n        dbt_cloud_run_id,\n        dbt_cloud_run_reason_category,\n        dbt_cloud_run_reason,\n        env_vars,\n        dbt_vars\n    from base\n\n)\n\nselect * from invocations", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "fct_dbt__invocations.sql", "original_file_path": "models/fct_dbt__invocations.sql", "name": "fct_dbt__invocations", "alias": "fct_dbt__invocations", "checksum": {"name": "sha256", "checksum": "776a6e5c450e4eb3ce817329e683b740992180b9a10c2df301445e13051c6a44"}, "tags": [], "refs": [["stg_dbt__invocations"]], "sources": [], "metrics": [], "description": "Fact model that contains data about invocations.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_version": {"name": "dbt_version", "description": "Installed version of dbt that is currently running.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_name": {"name": "project_name", "description": "Name for the root-level project which is being run by dbt.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_command": {"name": "dbt_command", "description": "dbt command of this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_refresh_flag": {"name": "full_refresh_flag", "description": "Boolean flag indicating whether the dbt run was in full refresh mode or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_profile_name": {"name": "target_profile_name", "description": "The name of the active profile.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_name": {"name": "target_name", "description": "The name of the active target.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_schema": {"name": "target_schema", "description": "The name of the target dbt schema.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_threads": {"name": "target_threads", "description": "The number of threads in use by dbt.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_project_id": {"name": "dbt_cloud_project_id", "description": "The ID of the dbt Cloud Project for this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_job_id": {"name": "dbt_cloud_job_id", "description": "The ID of the dbt Cloud Job for this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_run_id": {"name": "dbt_cloud_run_id", "description": "The ID of this particular run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_run_reason_category": {"name": "dbt_cloud_run_reason_category", "description": "The \"category\" of the trigger for this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_run_reason": {"name": "dbt_cloud_run_reason", "description": "The specific trigger for this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "env_vars": {"name": "env_vars", "description": "Key-value pairs of environment variables to be capture.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_vars": {"name": "dbt_vars", "description": "Key-value pairs of project variables to be capture.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/fct_dbt__invocations.yml", "compiled_path": "target/compiled/dbt_artifacts/models/fct_dbt__invocations.sql", "build_path": "target/run/dbt_artifacts/models/fct_dbt__invocations.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added"}, "created_at": 1674177029.223586, "compiled_code": "with base as (\n\n    select *\n    from DEVELOPMENT.dbt_artifacts_kearns_added__staging.stg_dbt__invocations\n\n),\n\ninvocations as (\n\n    select\n        command_invocation_id,\n        dbt_version,\n        project_name,\n        run_started_at,\n        dbt_command,\n        full_refresh_flag,\n        target_profile_name,\n        target_name,\n        target_schema,\n        target_threads,\n        dbt_cloud_project_id,\n        dbt_cloud_job_id,\n        dbt_cloud_run_id,\n        dbt_cloud_run_reason_category,\n        dbt_cloud_run_reason,\n        env_vars,\n        dbt_vars\n    from base\n\n)\n\nselect * from invocations", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_artifacts_kearns_added.fct_dbt__invocations"}, "model.dbt_artifacts.dim_dbt__tests": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__tests"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_artifacts_kearns_added", "fqn": ["dbt_artifacts", "dim_dbt__tests"], "unique_id": "model.dbt_artifacts.dim_dbt__tests", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__tests') }}\n\n),\n\ntests as (\n\n    select\n        test_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        name,\n        depends_on_nodes,\n        package_name,\n        test_path,\n        tags\n    from base\n\n)\n\nselect * from tests", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "dim_dbt__tests.sql", "original_file_path": "models/dim_dbt__tests.sql", "name": "dim_dbt__tests", "alias": "dim_dbt__tests", "checksum": {"name": "sha256", "checksum": "157bb696979983cf36a9779e9a56f6f833de060191a4b867f3648afafa32fb71"}, "tags": [], "refs": [["stg_dbt__tests"]], "sources": [], "metrics": [], "description": "Dimension model that contains data about tests.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_execution_id": {"name": "test_execution_id", "description": "Execution ID of the test node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_path": {"name": "test_path", "description": "Path to the yaml (SQL in case of a singular test) file describing the test.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/dim_dbt__tests.yml", "compiled_path": "target/compiled/dbt_artifacts/models/dim_dbt__tests.sql", "build_path": "target/run/dbt_artifacts/models/dim_dbt__tests.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added"}, "created_at": 1674177029.193378, "compiled_code": "with base as (\n\n    select *\n    from DEVELOPMENT.dbt_artifacts_kearns_added__staging.stg_dbt__tests\n\n),\n\ntests as (\n\n    select\n        test_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        name,\n        depends_on_nodes,\n        package_name,\n        test_path,\n        tags\n    from base\n\n)\n\nselect * from tests", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_artifacts_kearns_added.dim_dbt__tests"}, "model.dbt_artifacts.dim_dbt__current_models": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__models", "model.dbt_artifacts.stg_dbt__model_executions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_artifacts_kearns_added", "fqn": ["dbt_artifacts", "dim_dbt__current_models"], "unique_id": "model.dbt_artifacts.dim_dbt__current_models", "raw_code": "with base as (\n    select *\n    from {{ ref('stg_dbt__models') }}\n),\n\nmodel_executions as (\n    select *\n    from {{ ref('stg_dbt__model_executions') }}\n),\n\nlatest_models as (\n    /* Retrieves the models present in the most recent run */\n    select *\n    from base\n    where run_started_at = (select max(run_started_at) from base)\n),\n\nlatest_models_runs as (\n    /* Retreives all successful run information for the models present in the most\n    recent run and ranks them based on query completion time */\n    select\n        model_executions.node_id\n        , model_executions.was_full_refresh\n        , model_executions.query_completed_at\n        , model_executions.total_node_runtime\n        , model_executions.rows_affected\n        , row_number() over (\n            partition by latest_models.node_id, model_executions.was_full_refresh\n            order by model_executions.query_completed_at desc /* most recent ranked first */\n        ) as run_idx\n    from model_executions\n    inner join latest_models on model_executions.node_id = latest_models.node_id\n    where model_executions.status = 'success'\n),\n\nlatest_model_stats as (\n    select\n        node_id\n        , max(case when was_full_refresh then query_completed_at end) as last_full_refresh_run_completed_at\n        , max(case when was_full_refresh then total_node_runtime end) as last_full_refresh_run_total_runtime\n        , max(case when was_full_refresh then rows_affected end) as last_full_refresh_run_rows_affected\n        , max(query_completed_at) as last_run_completed_at\n        , max(total_node_runtime) as last_run_total_runtime\n        , max(rows_affected) as last_run_rows_affected\n    from latest_models_runs\n    where run_idx = 1\n    group by 1\n),\n\nfinal as (\n    select\n        latest_models.*\n        , latest_model_stats.last_full_refresh_run_completed_at\n        , latest_model_stats.last_full_refresh_run_total_runtime\n        , latest_model_stats.last_full_refresh_run_rows_affected\n        , latest_model_stats.last_run_completed_at\n        , latest_model_stats.last_run_total_runtime\n        , latest_model_stats.last_run_rows_affected\n    from latest_models\n    left join latest_model_stats\n        on latest_models.node_id = latest_model_stats.node_id\n)\n\nselect * from final", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "dim_dbt__current_models.sql", "original_file_path": "models/dim_dbt__current_models.sql", "name": "dim_dbt__current_models", "alias": "dim_dbt__current_models", "checksum": {"name": "sha256", "checksum": "7518b5a48273d7b172b237034921036378a7bbf7c46dd819e3e67c8a4892fbb3"}, "tags": [], "refs": [["stg_dbt__models"], ["stg_dbt__model_executions"]], "sources": [], "metrics": [], "description": "Dimension model that contains data about models' most recent successful runs", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_full_refresh_run_completed_at": {"name": "last_full_refresh_run_completed_at", "description": "Timestamp when the node's SQL query completed on the last full (non-incremental) run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_full_refresh_run_rows_affected": {"name": "last_full_refresh_run_rows_affected", "description": "Number of rows affected by the node's last full (non-incremental) run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_full_refresh_run_total_runtime": {"name": "last_full_refresh_run_total_runtime", "description": "Total time spent executing the node's last full (non-incremental) run (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_run_completed_at": {"name": "last_run_completed_at", "description": "Timestamp when the node's SQL query completed on the last run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_run_rows_affected": {"name": "last_run_rows_affected", "description": "Number of rows affected by the node's last run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_run_total_runtime": {"name": "last_run_total_runtime", "description": "Total time spent executing the node's last run (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "model_execution_id": {"name": "model_execution_id", "description": "Execution ID of the model node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/dim_dbt__current_models.yml", "compiled_path": "target/compiled/dbt_artifacts/models/dim_dbt__current_models.sql", "build_path": "target/run/dbt_artifacts/models/dim_dbt__current_models.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added"}, "created_at": 1674177029.187894, "compiled_code": "with base as (\n    select *\n    from DEVELOPMENT.dbt_artifacts_kearns_added__staging.stg_dbt__models\n),\n\nmodel_executions as (\n    select *\n    from DEVELOPMENT.dbt_artifacts_kearns_added__staging.stg_dbt__model_executions\n),\n\nlatest_models as (\n    /* Retrieves the models present in the most recent run */\n    select *\n    from base\n    where run_started_at = (select max(run_started_at) from base)\n),\n\nlatest_models_runs as (\n    /* Retreives all successful run information for the models present in the most\n    recent run and ranks them based on query completion time */\n    select\n        model_executions.node_id\n        , model_executions.was_full_refresh\n        , model_executions.query_completed_at\n        , model_executions.total_node_runtime\n        , model_executions.rows_affected\n        , row_number() over (\n            partition by latest_models.node_id, model_executions.was_full_refresh\n            order by model_executions.query_completed_at desc /* most recent ranked first */\n        ) as run_idx\n    from model_executions\n    inner join latest_models on model_executions.node_id = latest_models.node_id\n    where model_executions.status = 'success'\n),\n\nlatest_model_stats as (\n    select\n        node_id\n        , max(case when was_full_refresh then query_completed_at end) as last_full_refresh_run_completed_at\n        , max(case when was_full_refresh then total_node_runtime end) as last_full_refresh_run_total_runtime\n        , max(case when was_full_refresh then rows_affected end) as last_full_refresh_run_rows_affected\n        , max(query_completed_at) as last_run_completed_at\n        , max(total_node_runtime) as last_run_total_runtime\n        , max(rows_affected) as last_run_rows_affected\n    from latest_models_runs\n    where run_idx = 1\n    group by 1\n),\n\nfinal as (\n    select\n        latest_models.*\n        , latest_model_stats.last_full_refresh_run_completed_at\n        , latest_model_stats.last_full_refresh_run_total_runtime\n        , latest_model_stats.last_full_refresh_run_rows_affected\n        , latest_model_stats.last_run_completed_at\n        , latest_model_stats.last_run_total_runtime\n        , latest_model_stats.last_run_rows_affected\n    from latest_models\n    left join latest_model_stats\n        on latest_models.node_id = latest_model_stats.node_id\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_artifacts_kearns_added.dim_dbt__current_models"}, "model.dbt_artifacts.dim_dbt__sources": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__sources"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_artifacts_kearns_added", "fqn": ["dbt_artifacts", "dim_dbt__sources"], "unique_id": "model.dbt_artifacts.dim_dbt__sources", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__sources') }}\n\n),\n\nsources as (\n\n    select\n        source_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        source_name,\n        loader,\n        name,\n        identifier,\n        loaded_at_field,\n        freshness\n    from base\n\n)\n\nselect * from sources", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "dim_dbt__sources.sql", "original_file_path": "models/dim_dbt__sources.sql", "name": "dim_dbt__sources", "alias": "dim_dbt__sources", "checksum": {"name": "sha256", "checksum": "319fceac4dee8ee048a99d857d27e5e70d499ef12718abed922ae0eee0f69313"}, "tags": [], "refs": [["stg_dbt__sources"]], "sources": [], "metrics": [], "description": "Dimension model that contains data about sources.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "freshness": {"name": "freshness", "description": "The specified freshness of the source model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "identifier": {"name": "identifier", "description": "Source identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "loaded_at_field": {"name": "loaded_at_field", "description": "A column name (or expression) that returns a timestamp indicating freshness.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "loader": {"name": "loader", "description": "Describes the tool that loads this source into your warehouse.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_execution_id": {"name": "source_execution_id", "description": "Execution ID of the source node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_name": {"name": "source_name", "description": "Source name.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/dim_dbt__sources.yml", "compiled_path": "target/compiled/dbt_artifacts/models/dim_dbt__sources.sql", "build_path": "target/run/dbt_artifacts/models/dim_dbt__sources.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added"}, "created_at": 1674177029.2002997, "compiled_code": "with base as (\n\n    select *\n    from DEVELOPMENT.dbt_artifacts_kearns_added__staging.stg_dbt__sources\n\n),\n\nsources as (\n\n    select\n        source_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        source_name,\n        loader,\n        name,\n        identifier,\n        loaded_at_field,\n        freshness\n    from base\n\n)\n\nselect * from sources", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_artifacts_kearns_added.dim_dbt__sources"}, "model.dbt_artifacts.stg_dbt__sources": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.dbt_artifacts.dbt_artifacts.sources"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added__staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_artifacts_kearns_added__staging", "fqn": ["dbt_artifacts", "staging", "stg_dbt__sources"], "unique_id": "model.dbt_artifacts.stg_dbt__sources", "raw_code": "with base as (\n\n    select *\n    from {{ source('dbt_artifacts', 'sources') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_utils.surrogate_key(['command_invocation_id', 'node_id']) }} as source_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        source_name,\n        loader,\n        name,\n        identifier,\n        loaded_at_field,\n        freshness\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__sources.sql", "original_file_path": "models/staging/stg_dbt__sources.sql", "name": "stg_dbt__sources", "alias": "stg_dbt__sources", "checksum": {"name": "sha256", "checksum": "e7ddfd3a678ea82ce3d3e10bddb461c005e92ed66bd5af43f752633fa4ac0af1"}, "tags": [], "refs": [], "sources": [["dbt_artifacts", "sources"]], "metrics": [], "description": "Staging model that contains data about sources. One row per node per execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "freshness": {"name": "freshness", "description": "The specified freshness of the source model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "identifier": {"name": "identifier", "description": "Source identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "loaded_at_field": {"name": "loaded_at_field", "description": "A column name (or expression) that returns a timestamp indicating freshness.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "loader": {"name": "loader", "description": "Describes the tool that loads this source into your warehouse.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_execution_id": {"name": "source_execution_id", "description": "Execution ID of the source node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_name": {"name": "source_name", "description": "Source name.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__sources.yml", "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__sources.sql", "build_path": "target/run/dbt_artifacts/models/staging/stg_dbt__sources.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added__staging"}, "created_at": 1674177029.2376761, "compiled_code": "with base as (\n\n    select *\n    from development.dbt_artifacts_kearns_added.sources\n\n),\n\nenhanced as (\n\n    select\n        md5(cast(coalesce(cast(command_invocation_id as \n    varchar\n), '') || '-' || coalesce(cast(node_id as \n    varchar\n), '') as \n    varchar\n)) as source_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        source_name,\n        loader,\n        name,\n        identifier,\n        loaded_at_field,\n        freshness\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_artifacts_kearns_added__staging.stg_dbt__sources"}, "model.dbt_artifacts.stg_dbt__tests": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.dbt_artifacts.dbt_artifacts.tests"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added__staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_artifacts_kearns_added__staging", "fqn": ["dbt_artifacts", "staging", "stg_dbt__tests"], "unique_id": "model.dbt_artifacts.stg_dbt__tests", "raw_code": "with base as (\n\n    select *\n    from {{ source('dbt_artifacts', 'tests') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_utils.surrogate_key(['command_invocation_id', 'node_id']) }} as test_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        name,\n        depends_on_nodes,\n        package_name,\n        test_path,\n        tags\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__tests.sql", "original_file_path": "models/staging/stg_dbt__tests.sql", "name": "stg_dbt__tests", "alias": "stg_dbt__tests", "checksum": {"name": "sha256", "checksum": "36166f3bb66203b285a43b88d5f6698b42d00e3dfba54677cd476d3ba4c56950"}, "tags": [], "refs": [], "sources": [["dbt_artifacts", "tests"]], "metrics": [], "description": "Staging model that contains metadata about test executions. One row per node per run.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_execution_id": {"name": "test_execution_id", "description": "Execution ID of the test node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_path": {"name": "test_path", "description": "Path to the yaml (SQL in case of a singular test) file describing the test.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__tests.yml", "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__tests.sql", "build_path": "target/run/dbt_artifacts/models/staging/stg_dbt__tests.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added__staging"}, "created_at": 1674177029.3718164, "compiled_code": "with base as (\n\n    select *\n    from development.dbt_artifacts_kearns_added.tests\n\n),\n\nenhanced as (\n\n    select\n        md5(cast(coalesce(cast(command_invocation_id as \n    varchar\n), '') || '-' || coalesce(cast(node_id as \n    varchar\n), '') as \n    varchar\n)) as test_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        name,\n        depends_on_nodes,\n        package_name,\n        test_path,\n        tags\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_artifacts_kearns_added__staging.stg_dbt__tests"}, "model.dbt_artifacts.stg_dbt__test_executions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.dbt_artifacts.dbt_artifacts.test_executions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added__staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_artifacts_kearns_added__staging", "fqn": ["dbt_artifacts", "staging", "stg_dbt__test_executions"], "unique_id": "model.dbt_artifacts.stg_dbt__test_executions", "raw_code": "with base as (\n\n    select *\n    from {{ source('dbt_artifacts', 'test_executions') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_utils.surrogate_key(['command_invocation_id', 'node_id']) }} as test_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        split(thread_id, '-')[1]::int as thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        failures\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__test_executions.sql", "original_file_path": "models/staging/stg_dbt__test_executions.sql", "name": "stg_dbt__test_executions", "alias": "stg_dbt__test_executions", "checksum": {"name": "sha256", "checksum": "7bdfbfc96dd3528f9be8bd4a5f471ed037bd0574c2ebcbb48b0cc70c0cf88c64"}, "tags": [], "refs": [], "sources": [["dbt_artifacts", "test_executions"]], "metrics": [], "description": "Staging model that contains metadata about test executions. One row per test execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "failures": {"name": "failures", "description": "Test failures. Value is 1 if the test failed, 0 if successful.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_execution_id": {"name": "test_execution_id", "description": "Execution ID of the test node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__test_executions.yml", "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__test_executions.sql", "build_path": "target/run/dbt_artifacts/models/staging/stg_dbt__test_executions.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added__staging"}, "created_at": 1674177029.351374, "compiled_code": "with base as (\n\n    select *\n    from development.dbt_artifacts_kearns_added.test_executions\n\n),\n\nenhanced as (\n\n    select\n        md5(cast(coalesce(cast(command_invocation_id as \n    varchar\n), '') || '-' || coalesce(cast(node_id as \n    varchar\n), '') as \n    varchar\n)) as test_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        split(thread_id, '-')[1]::int as thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        failures\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_artifacts_kearns_added__staging.stg_dbt__test_executions"}, "model.dbt_artifacts.stg_dbt__snapshot_executions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.dbt_artifacts.dbt_artifacts.snapshot_executions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added__staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_artifacts_kearns_added__staging", "fqn": ["dbt_artifacts", "staging", "stg_dbt__snapshot_executions"], "unique_id": "model.dbt_artifacts.stg_dbt__snapshot_executions", "raw_code": "with base as (\n\n    select *\n    from {{ source('dbt_artifacts', 'snapshot_executions') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_utils.surrogate_key(['command_invocation_id', 'node_id']) }} as snapshot_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        split(thread_id, '-')[1]::int as thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema,\n        name\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__snapshot_executions.sql", "original_file_path": "models/staging/stg_dbt__snapshot_executions.sql", "name": "stg_dbt__snapshot_executions", "alias": "stg_dbt__snapshot_executions", "checksum": {"name": "sha256", "checksum": "d512cb5d253987ba3ec1ac3c59061076ac3b8ab81e4e319cc6b924bc1075af36"}, "tags": [], "refs": [], "sources": [["dbt_artifacts", "snapshot_executions"]], "metrics": [], "description": "Staging model that contains data about snapshot executions. One row per snapshot execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "snapshot_execution_id": {"name": "snapshot_execution_id", "description": "Execution ID of the snapshot node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__snapshot_executions.yml", "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__snapshot_executions.sql", "build_path": "target/run/dbt_artifacts/models/staging/stg_dbt__snapshot_executions.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added__staging"}, "created_at": 1674177029.2450733, "compiled_code": "with base as (\n\n    select *\n    from development.dbt_artifacts_kearns_added.snapshot_executions\n\n),\n\nenhanced as (\n\n    select\n        md5(cast(coalesce(cast(command_invocation_id as \n    varchar\n), '') || '-' || coalesce(cast(node_id as \n    varchar\n), '') as \n    varchar\n)) as snapshot_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        split(thread_id, '-')[1]::int as thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema,\n        name\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_artifacts_kearns_added__staging.stg_dbt__snapshot_executions"}, "model.dbt_artifacts.stg_dbt__seed_executions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.dbt_artifacts.dbt_artifacts.seed_executions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added__staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_artifacts_kearns_added__staging", "fqn": ["dbt_artifacts", "staging", "stg_dbt__seed_executions"], "unique_id": "model.dbt_artifacts.stg_dbt__seed_executions", "raw_code": "with base as (\n\n    select *\n    from {{ source('dbt_artifacts', 'seed_executions') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_utils.surrogate_key(['command_invocation_id', 'node_id']) }} as seed_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        split(thread_id, '-')[1]::int as thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema,\n        name\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__seed_executions.sql", "original_file_path": "models/staging/stg_dbt__seed_executions.sql", "name": "stg_dbt__seed_executions", "alias": "stg_dbt__seed_executions", "checksum": {"name": "sha256", "checksum": "253828223961a68157e81252a5a4e12aeeeb161c561e2d0ede3623a27dad1002"}, "tags": [], "refs": [], "sources": [["dbt_artifacts", "seed_executions"]], "metrics": [], "description": "Staging model that contains data about seed executions. One row per seed execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "seed_execution_id": {"name": "seed_execution_id", "description": "Execution ID of the seed node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__seed_executions.yml", "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__seed_executions.sql", "build_path": "target/run/dbt_artifacts/models/staging/stg_dbt__seed_executions.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added__staging"}, "created_at": 1674177029.3443372, "compiled_code": "with base as (\n\n    select *\n    from development.dbt_artifacts_kearns_added.seed_executions\n\n),\n\nenhanced as (\n\n    select\n        md5(cast(coalesce(cast(command_invocation_id as \n    varchar\n), '') || '-' || coalesce(cast(node_id as \n    varchar\n), '') as \n    varchar\n)) as seed_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        split(thread_id, '-')[1]::int as thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema,\n        name\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_artifacts_kearns_added__staging.stg_dbt__seed_executions"}, "model.dbt_artifacts.stg_dbt__models": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.dbt_artifacts.dbt_artifacts.models"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added__staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_artifacts_kearns_added__staging", "fqn": ["dbt_artifacts", "staging", "stg_dbt__models"], "unique_id": "model.dbt_artifacts.stg_dbt__models", "raw_code": "with base as (\n\n    select *\n    from {{ source('dbt_artifacts', 'models') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_utils.surrogate_key(['command_invocation_id', 'node_id']) }} as model_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        path,\n        checksum,\n        materialization\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__models.sql", "original_file_path": "models/staging/stg_dbt__models.sql", "name": "stg_dbt__models", "alias": "stg_dbt__models", "checksum": {"name": "sha256", "checksum": "527c2cdeb1db57092bf35886fde4dcc87c60b3051451e00240a1b97bea744ab5"}, "tags": [], "refs": [], "sources": [["dbt_artifacts", "models"]], "metrics": [], "description": "Staging model that contains metadata about model executions. One row per node per run.", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "model_execution_id": {"name": "model_execution_id", "description": "Execution ID of the model node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__models.yml", "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__models.sql", "build_path": "target/run/dbt_artifacts/models/staging/stg_dbt__models.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added__staging"}, "created_at": 1674177029.3666203, "compiled_code": "with base as (\n\n    select *\n    from development.dbt_artifacts_kearns_added.models\n\n),\n\nenhanced as (\n\n    select\n        md5(cast(coalesce(cast(command_invocation_id as \n    varchar\n), '') || '-' || coalesce(cast(node_id as \n    varchar\n), '') as \n    varchar\n)) as model_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        path,\n        checksum,\n        materialization\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_artifacts_kearns_added__staging.stg_dbt__models"}, "model.dbt_artifacts.stg_dbt__snapshots": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.dbt_artifacts.dbt_artifacts.snapshots"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added__staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_artifacts_kearns_added__staging", "fqn": ["dbt_artifacts", "staging", "stg_dbt__snapshots"], "unique_id": "model.dbt_artifacts.stg_dbt__snapshots", "raw_code": "with base as (\n\n    select *\n    from {{ source('dbt_artifacts', 'snapshots') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_utils.surrogate_key(['command_invocation_id', 'node_id']) }} as snapshot_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        path,\n        checksum,\n        strategy\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__snapshots.sql", "original_file_path": "models/staging/stg_dbt__snapshots.sql", "name": "stg_dbt__snapshots", "alias": "stg_dbt__snapshots", "checksum": {"name": "sha256", "checksum": "7647cf7a7057925a5dc7f58a1ffca48facb17c73ca542e643a038768abc17337"}, "tags": [], "refs": [], "sources": [["dbt_artifacts", "snapshots"]], "metrics": [], "description": "Staging model that contains metadata about seed executions. One row per node per run.", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "snapshot_execution_id": {"name": "snapshot_execution_id", "description": "Execution ID of the snapshot node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "strategy": {"name": "strategy", "description": "Snapshot \"strategies\" define how dbt knows if a row has changed. There are two strategies built-in to dbt \u2014 timestamp\nand check.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__snapshots.yml", "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__snapshots.sql", "build_path": "target/run/dbt_artifacts/models/staging/stg_dbt__snapshots.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added__staging"}, "created_at": 1674177029.3938625, "compiled_code": "with base as (\n\n    select *\n    from development.dbt_artifacts_kearns_added.snapshots\n\n),\n\nenhanced as (\n\n    select\n        md5(cast(coalesce(cast(command_invocation_id as \n    varchar\n), '') || '-' || coalesce(cast(node_id as \n    varchar\n), '') as \n    varchar\n)) as snapshot_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        path,\n        checksum,\n        strategy\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_artifacts_kearns_added__staging.stg_dbt__snapshots"}, "model.dbt_artifacts.stg_dbt__exposures": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.dbt_artifacts.dbt_artifacts.exposures"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added__staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_artifacts_kearns_added__staging", "fqn": ["dbt_artifacts", "staging", "stg_dbt__exposures"], "unique_id": "model.dbt_artifacts.stg_dbt__exposures", "raw_code": "with base as (\n\n    select *\n    from {{ source('dbt_artifacts', 'exposures') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_utils.surrogate_key(['command_invocation_id', 'node_id']) }} as exposure_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        name,\n        type,\n        owner,\n        maturity,\n        path,\n        description,\n        url,\n        package_name,\n        depends_on_nodes\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__exposures.sql", "original_file_path": "models/staging/stg_dbt__exposures.sql", "name": "stg_dbt__exposures", "alias": "stg_dbt__exposures", "checksum": {"name": "sha256", "checksum": "5b44b53a0542916f0c050be4d348e9fd05b1be47d2ecf0218caac40e03046d69"}, "tags": [], "refs": [], "sources": [["dbt_artifacts", "exposures"]], "metrics": [], "description": "Staging model that contains data about exposure exections. One row per node per run.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Node description.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exposure_execution_id": {"name": "exposure_execution_id", "description": "Execution ID of the exposure node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "maturity": {"name": "maturity", "description": "Exposure maturity; one of high, medium, low.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner": {"name": "owner", "description": "Owner of the exposure, usually an email address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Exposure type; one of dashboard, notebook, analysis, ml, application (used to organize on docs site)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url": {"name": "url", "description": "The URL of the BI tool where the data defined by the exposure can be viewed.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__exposures.yml", "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__exposures.sql", "build_path": "target/run/dbt_artifacts/models/staging/stg_dbt__exposures.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added__staging"}, "created_at": 1674177029.401238, "compiled_code": "with base as (\n\n    select *\n    from development.dbt_artifacts_kearns_added.exposures\n\n),\n\nenhanced as (\n\n    select\n        md5(cast(coalesce(cast(command_invocation_id as \n    varchar\n), '') || '-' || coalesce(cast(node_id as \n    varchar\n), '') as \n    varchar\n)) as exposure_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        name,\n        type,\n        owner,\n        maturity,\n        path,\n        description,\n        url,\n        package_name,\n        depends_on_nodes\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_artifacts_kearns_added__staging.stg_dbt__exposures"}, "model.dbt_artifacts.stg_dbt__seeds": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.dbt_artifacts.dbt_artifacts.seeds"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added__staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_artifacts_kearns_added__staging", "fqn": ["dbt_artifacts", "staging", "stg_dbt__seeds"], "unique_id": "model.dbt_artifacts.stg_dbt__seeds", "raw_code": "with base as (\n\n    select *\n    from {{ source('dbt_artifacts', 'seeds') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_utils.surrogate_key(['command_invocation_id', 'node_id']) }} as seed_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        package_name,\n        path,\n        checksum\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__seeds.sql", "original_file_path": "models/staging/stg_dbt__seeds.sql", "name": "stg_dbt__seeds", "alias": "stg_dbt__seeds", "checksum": {"name": "sha256", "checksum": "128eaa6446fc0c6254c80621a291cbb9fa1827ec9e771d29f1a9c5f760a940af"}, "tags": [], "refs": [], "sources": [["dbt_artifacts", "seeds"]], "metrics": [], "description": "Stageing model that contains metadata about seed executions. One row per node per run.", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "seed_execution_id": {"name": "seed_execution_id", "description": "Execution ID of the seed node.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__seeds.yml", "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__seeds.sql", "build_path": "target/run/dbt_artifacts/models/staging/stg_dbt__seeds.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added__staging"}, "created_at": 1674177029.387034, "compiled_code": "with base as (\n\n    select *\n    from development.dbt_artifacts_kearns_added.seeds\n\n),\n\nenhanced as (\n\n    select\n        md5(cast(coalesce(cast(command_invocation_id as \n    varchar\n), '') || '-' || coalesce(cast(node_id as \n    varchar\n), '') as \n    varchar\n)) as seed_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        package_name,\n        path,\n        checksum\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_artifacts_kearns_added__staging.stg_dbt__seeds"}, "model.dbt_artifacts.stg_dbt__invocations": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dbt_artifacts.dbt_artifacts.invocations"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added__staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_artifacts_kearns_added__staging", "fqn": ["dbt_artifacts", "staging", "stg_dbt__invocations"], "unique_id": "model.dbt_artifacts.stg_dbt__invocations", "raw_code": "with base as (\n\n    select *\n    from {{ source('dbt_artifacts', 'invocations') }}\n\n),\n\nenhanced as (\n\n    select\n        command_invocation_id,\n        dbt_version,\n        project_name,\n        run_started_at,\n        dbt_command,\n        full_refresh_flag,\n        target_profile_name,\n        target_name,\n        target_schema,\n        target_threads,\n        dbt_cloud_project_id,\n        dbt_cloud_job_id,\n        dbt_cloud_run_id,\n        dbt_cloud_run_reason_category,\n        dbt_cloud_run_reason,\n        env_vars,\n        dbt_vars\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__invocations.sql", "original_file_path": "models/staging/stg_dbt__invocations.sql", "name": "stg_dbt__invocations", "alias": "stg_dbt__invocations", "checksum": {"name": "sha256", "checksum": "53e113d583a790260268b8616bba766fd5b99ea4bc3ec9ec7de2436818aa1dc8"}, "tags": [], "refs": [], "sources": [["dbt_artifacts", "invocations"]], "metrics": [], "description": "Staging model that contains data about the invocations of dbt. One row per run.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_version": {"name": "dbt_version", "description": "Installed version of dbt that is currently running.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_name": {"name": "project_name", "description": "Name for the root-level project which is being run by dbt.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_command": {"name": "dbt_command", "description": "dbt command of this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_refresh_flag": {"name": "full_refresh_flag", "description": "Boolean flag indicating whether the dbt run was in full refresh mode or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_profile_name": {"name": "target_profile_name", "description": "The name of the active profile.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_name": {"name": "target_name", "description": "The name of the active target.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_schema": {"name": "target_schema", "description": "The name of the target dbt schema.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_threads": {"name": "target_threads", "description": "The number of threads in use by dbt.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_project_id": {"name": "dbt_cloud_project_id", "description": "The ID of the dbt Cloud Project for this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_job_id": {"name": "dbt_cloud_job_id", "description": "The ID of the dbt Cloud Job for this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_run_id": {"name": "dbt_cloud_run_id", "description": "The ID of this particular run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_run_reason_category": {"name": "dbt_cloud_run_reason_category", "description": "The \"category\" of the trigger for this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_run_reason": {"name": "dbt_cloud_run_reason", "description": "The specific trigger for this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "env_vars": {"name": "env_vars", "description": "Key-value pairs of environment variables to be capture.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_vars": {"name": "dbt_vars", "description": "Key-value pairs of project variables to be capture.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__invocations.yml", "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__invocations.sql", "build_path": "target/run/dbt_artifacts/models/staging/stg_dbt__invocations.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added__staging"}, "created_at": 1674177029.3811603, "compiled_code": "with base as (\n\n    select *\n    from development.dbt_artifacts_kearns_added.invocations\n\n),\n\nenhanced as (\n\n    select\n        command_invocation_id,\n        dbt_version,\n        project_name,\n        run_started_at,\n        dbt_command,\n        full_refresh_flag,\n        target_profile_name,\n        target_name,\n        target_schema,\n        target_threads,\n        dbt_cloud_project_id,\n        dbt_cloud_job_id,\n        dbt_cloud_run_id,\n        dbt_cloud_run_reason_category,\n        dbt_cloud_run_reason,\n        env_vars,\n        dbt_vars\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_artifacts_kearns_added__staging.stg_dbt__invocations"}, "model.dbt_artifacts.stg_dbt__model_executions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.dbt_artifacts.dbt_artifacts.model_executions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added__staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "dbt_artifacts_kearns_added__staging", "fqn": ["dbt_artifacts", "staging", "stg_dbt__model_executions"], "unique_id": "model.dbt_artifacts.stg_dbt__model_executions", "raw_code": "with base as (\n\n    select *\n    from {{ source('dbt_artifacts', 'model_executions') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_utils.surrogate_key(['command_invocation_id', 'node_id']) }} as model_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        split(thread_id, '-')[1]::int as thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema,\n        name\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__model_executions.sql", "original_file_path": "models/staging/stg_dbt__model_executions.sql", "name": "stg_dbt__model_executions", "alias": "stg_dbt__model_executions", "checksum": {"name": "sha256", "checksum": "94c11f458e6ffe97f330af345d2cf7ede8c9b32aefee5427ff332813194f6655"}, "tags": [], "refs": [], "sources": [["dbt_artifacts", "model_executions"]], "metrics": [], "description": "Staging model that contains data about model executions. One row per model execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "model_execution_id": {"name": "model_execution_id", "description": "Execution ID of the model node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__model_executions.yml", "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__model_executions.sql", "build_path": "target/run/dbt_artifacts/models/staging/stg_dbt__model_executions.sql", "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added__staging"}, "created_at": 1674177029.3595257, "compiled_code": "with base as (\n\n    select *\n    from development.dbt_artifacts_kearns_added.model_executions\n\n),\n\nenhanced as (\n\n    select\n        md5(cast(coalesce(cast(command_invocation_id as \n    varchar\n), '') || '-' || coalesce(cast(node_id as \n    varchar\n), '') as \n    varchar\n)) as model_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        split(thread_id, '-')[1]::int as thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema,\n        name\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPMENT.dbt_artifacts_kearns_added__staging.stg_dbt__model_executions"}, "test.secret.unique_my_first_model_col.344040e6f9": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "col", "model": "{{ get_where_subquery(ref('my_first_model')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.secret.my_first_model"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPMENT", "schema": "dbt_test__audit", "fqn": ["secret", "unique_my_first_model_col"], "unique_id": "test.secret.unique_my_first_model_col.344040e6f9", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "unique_my_first_model_col.sql", "original_file_path": "models/_core.yml", "name": "unique_my_first_model_col", "alias": "unique_my_first_model_col", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["my_first_model"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/_core.yml/unique_my_first_model_col.sql", "build_path": "target/run/secret/models/_core.yml/unique_my_first_model_col.sql", "deferred": false, "unrendered_config": {}, "created_at": 1674177029.0243685, "compiled_code": "\n    \n    \n\nselect\n    col as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPMENT.prod.my_first_model\nwhere col is not null\ngroup by col\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "col", "file_key_name": "models.my_first_model"}, "test.secret.not_null_my_first_model_col.9dde753ebf": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "col", "model": "{{ get_where_subquery(ref('my_first_model')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.secret.my_first_model"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPMENT", "schema": "dbt_test__audit", "fqn": ["secret", "not_null_my_first_model_col"], "unique_id": "test.secret.not_null_my_first_model_col.9dde753ebf", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "not_null_my_first_model_col.sql", "original_file_path": "models/_core.yml", "name": "not_null_my_first_model_col", "alias": "not_null_my_first_model_col", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["my_first_model"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/_core.yml/not_null_my_first_model_col.sql", "build_path": "target/run/secret/models/_core.yml/not_null_my_first_model_col.sql", "deferred": false, "unrendered_config": {}, "created_at": 1674177029.0267122, "compiled_code": "\n    \n    \n\n\n\nselect col\nfrom DEVELOPMENT.prod.my_first_model\nwhere col is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "col", "file_key_name": "models.my_first_model"}, "test.secret.unique_stg_customers_customer_id.c7614daada": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.secret.stg_customers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPMENT", "schema": "dbt_test__audit", "fqn": ["secret", "staging", "jaffle_shop", "unique_stg_customers_customer_id"], "unique_id": "test.secret.unique_stg_customers_customer_id.c7614daada", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "unique_stg_customers_customer_id.sql", "original_file_path": "models/staging/jaffle_shop/stg_jaffle_shop.yml", "name": "unique_stg_customers_customer_id", "alias": "unique_stg_customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_customers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/staging/jaffle_shop/stg_jaffle_shop.yml/unique_stg_customers_customer_id.sql", "build_path": "target/run/secret/models/staging/jaffle_shop/stg_jaffle_shop.yml/unique_stg_customers_customer_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1674177029.0454736, "compiled_code": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPMENT.prod.stg_customers\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "customer_id", "file_key_name": "models.stg_customers"}, "test.secret.not_null_stg_customers_customer_id.e2cfb1f9aa": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.secret.stg_customers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPMENT", "schema": "dbt_test__audit", "fqn": ["secret", "staging", "jaffle_shop", "not_null_stg_customers_customer_id"], "unique_id": "test.secret.not_null_stg_customers_customer_id.e2cfb1f9aa", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "not_null_stg_customers_customer_id.sql", "original_file_path": "models/staging/jaffle_shop/stg_jaffle_shop.yml", "name": "not_null_stg_customers_customer_id", "alias": "not_null_stg_customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_customers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/staging/jaffle_shop/stg_jaffle_shop.yml/not_null_stg_customers_customer_id.sql", "build_path": "target/run/secret/models/staging/jaffle_shop/stg_jaffle_shop.yml/not_null_stg_customers_customer_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1674177029.0475755, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom DEVELOPMENT.prod.stg_customers\nwhere customer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "customer_id", "file_key_name": "models.stg_customers"}, "test.secret.unique_stg_orders_order_id.e3b841c71a": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.secret.stg_orders"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPMENT", "schema": "dbt_test__audit", "fqn": ["secret", "staging", "jaffle_shop", "unique_stg_orders_order_id"], "unique_id": "test.secret.unique_stg_orders_order_id.e3b841c71a", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "unique_stg_orders_order_id.sql", "original_file_path": "models/staging/jaffle_shop/stg_jaffle_shop.yml", "name": "unique_stg_orders_order_id", "alias": "unique_stg_orders_order_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_orders"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/staging/jaffle_shop/stg_jaffle_shop.yml/unique_stg_orders_order_id.sql", "build_path": "target/run/secret/models/staging/jaffle_shop/stg_jaffle_shop.yml/unique_stg_orders_order_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1674177029.0497136, "compiled_code": "\n    \n    \n\nselect\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPMENT.prod.stg_orders\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "order_id", "file_key_name": "models.stg_orders"}, "test.secret.not_null_stg_orders_order_id.81cfe2fe64": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.secret.stg_orders"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPMENT", "schema": "dbt_test__audit", "fqn": ["secret", "staging", "jaffle_shop", "not_null_stg_orders_order_id"], "unique_id": "test.secret.not_null_stg_orders_order_id.81cfe2fe64", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "not_null_stg_orders_order_id.sql", "original_file_path": "models/staging/jaffle_shop/stg_jaffle_shop.yml", "name": "not_null_stg_orders_order_id", "alias": "not_null_stg_orders_order_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_orders"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/staging/jaffle_shop/stg_jaffle_shop.yml/not_null_stg_orders_order_id.sql", "build_path": "target/run/secret/models/staging/jaffle_shop/stg_jaffle_shop.yml/not_null_stg_orders_order_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1674177029.0518506, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom DEVELOPMENT.prod.stg_orders\nwhere order_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "order_id", "file_key_name": "models.stg_orders"}, "test.secret.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["placed", "shipped", "completed", "return_pending", "returned"], "column_name": "status", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.secret.stg_orders"]}, "config": {"enabled": true, "alias": "accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPMENT", "schema": "dbt_test__audit", "fqn": ["secret", "staging", "jaffle_shop", "accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned"], "unique_id": "test.secret.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58\") }}", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58.sql", "original_file_path": "models/staging/jaffle_shop/stg_jaffle_shop.yml", "name": "accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned", "alias": "accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_orders"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/staging/jaffle_shop/stg_jaffle_shop.yml/accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58.sql", "build_path": "target/run/secret/models/staging/jaffle_shop/stg_jaffle_shop.yml/accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58.sql", "deferred": false, "unrendered_config": {"alias": "accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58"}, "created_at": 1674177029.054059, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from DEVELOPMENT.prod.stg_orders\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'placed','shipped','completed','return_pending','returned'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "status", "file_key_name": "models.stg_orders"}, "test.secret.unique_customers_customer_id.c5af1ff4b1": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('customers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.secret.customers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPMENT", "schema": "dbt_test__audit", "fqn": ["secret", "marts", "core", "unique_customers_customer_id"], "unique_id": "test.secret.unique_customers_customer_id.c5af1ff4b1", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "unique_customers_customer_id.sql", "original_file_path": "models/marts/core/core.yml", "name": "unique_customers_customer_id", "alias": "unique_customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["customers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/marts/core/core.yml/unique_customers_customer_id.sql", "build_path": "target/run/secret/models/marts/core/core.yml/unique_customers_customer_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1674177029.104662, "compiled_code": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPMENT.prod.customers\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "customer_id", "file_key_name": "models.customers"}, "test.secret.not_null_customers_customer_id.5c9bf9911d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('customers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.secret.customers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPMENT", "schema": "dbt_test__audit", "fqn": ["secret", "marts", "core", "not_null_customers_customer_id"], "unique_id": "test.secret.not_null_customers_customer_id.5c9bf9911d", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "not_null_customers_customer_id.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_customers_customer_id", "alias": "not_null_customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["customers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/marts/core/core.yml/not_null_customers_customer_id.sql", "build_path": "target/run/secret/models/marts/core/core.yml/not_null_customers_customer_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1674177029.1067636, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom DEVELOPMENT.prod.customers\nwhere customer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "customer_id", "file_key_name": "models.customers"}, "test.secret.unique_orders_order_id.fed79b3a6e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('orders')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.secret.orders"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPMENT", "schema": "dbt_test__audit", "fqn": ["secret", "marts", "core", "unique_orders_order_id"], "unique_id": "test.secret.unique_orders_order_id.fed79b3a6e", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "unique_orders_order_id.sql", "original_file_path": "models/marts/core/core.yml", "name": "unique_orders_order_id", "alias": "unique_orders_order_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["orders"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/marts/core/core.yml/unique_orders_order_id.sql", "build_path": "target/run/secret/models/marts/core/core.yml/unique_orders_order_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1674177029.10887, "compiled_code": "\n    \n    \n\nselect\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPMENT.prod.orders\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "order_id", "file_key_name": "models.orders"}, "test.secret.not_null_orders_order_id.cf6c17daed": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('orders')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.secret.orders"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPMENT", "schema": "dbt_test__audit", "fqn": ["secret", "marts", "core", "not_null_orders_order_id"], "unique_id": "test.secret.not_null_orders_order_id.cf6c17daed", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "not_null_orders_order_id.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_orders_order_id", "alias": "not_null_orders_order_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["orders"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/marts/core/core.yml/not_null_orders_order_id.sql", "build_path": "target/run/secret/models/marts/core/core.yml/not_null_orders_order_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1674177029.1109834, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom DEVELOPMENT.prod.orders\nwhere order_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "order_id", "file_key_name": "models.orders"}, "test.secret.dbt_utils_expression_is_true_orders_amount_0.23e56bc9d2": {"test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "amount >= 0", "model": "{{ get_where_subquery(ref('orders')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.secret.orders"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPMENT", "schema": "dbt_test__audit", "fqn": ["secret", "marts", "core", "dbt_utils_expression_is_true_orders_amount_0"], "unique_id": "test.secret.dbt_utils_expression_is_true_orders_amount_0.23e56bc9d2", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "dbt_utils_expression_is_true_orders_amount_0.sql", "original_file_path": "models/marts/core/core.yml", "name": "dbt_utils_expression_is_true_orders_amount_0", "alias": "dbt_utils_expression_is_true_orders_amount_0", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["orders"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/marts/core/core.yml/dbt_utils_expression_is_true_orders_amount_0.sql", "build_path": "target/run/secret/models/marts/core/core.yml/dbt_utils_expression_is_true_orders_amount_0.sql", "deferred": false, "unrendered_config": {}, "created_at": 1674177029.1131341, "compiled_code": "\n\nwith meet_condition as (\n    select * from DEVELOPMENT.prod.orders where 1=1\n)\n\nselect\n    *\nfrom meet_condition\n\nwhere not(amount >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.orders"}, "test.secret.unique_model_with_schema_tests_id.c8cceb01b0": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('model_with_schema_tests')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.secret.model_with_schema_tests"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPMENT", "schema": "dbt_test__audit", "fqn": ["secret", "demos", "skippable_schema_tests", "unique_model_with_schema_tests_id"], "unique_id": "test.secret.unique_model_with_schema_tests_id.c8cceb01b0", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "unique_model_with_schema_tests_id.sql", "original_file_path": "models/demos/skippable_schema_tests/schema.yml", "name": "unique_model_with_schema_tests_id", "alias": "unique_model_with_schema_tests_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["skippable_schema_test"], "refs": [["model_with_schema_tests"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/demos/skippable_schema_tests/schema.yml/unique_model_with_schema_tests_id.sql", "build_path": "target/run/secret/models/demos/skippable_schema_tests/schema.yml/unique_model_with_schema_tests_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1674177029.124589, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPMENT.prod.model_with_schema_tests\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.model_with_schema_tests"}, "test.secret.not_null_model_with_schema_tests_id.2aa929087e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('model_with_schema_tests')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.secret.model_with_schema_tests"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPMENT", "schema": "dbt_test__audit", "fqn": ["secret", "demos", "skippable_schema_tests", "not_null_model_with_schema_tests_id"], "unique_id": "test.secret.not_null_model_with_schema_tests_id.2aa929087e", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "not_null_model_with_schema_tests_id.sql", "original_file_path": "models/demos/skippable_schema_tests/schema.yml", "name": "not_null_model_with_schema_tests_id", "alias": "not_null_model_with_schema_tests_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["skippable_schema_test"], "refs": [["model_with_schema_tests"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/demos/skippable_schema_tests/schema.yml/not_null_model_with_schema_tests_id.sql", "build_path": "target/run/secret/models/demos/skippable_schema_tests/schema.yml/not_null_model_with_schema_tests_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1674177029.1269417, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom DEVELOPMENT.prod.model_with_schema_tests\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.model_with_schema_tests"}, "test.secret.source_not_null_jaffle_shop_customers_id.50aa22178f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('jaffle_shop', 'customers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["source.secret.jaffle_shop.customers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPMENT", "schema": "dbt_test__audit", "fqn": ["secret", "staging", "jaffle_shop", "source_not_null_jaffle_shop_customers_id"], "unique_id": "test.secret.source_not_null_jaffle_shop_customers_id.50aa22178f", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "source_not_null_jaffle_shop_customers_id.sql", "original_file_path": "models/staging/jaffle_shop/src_jaffle_shop.yml", "name": "source_not_null_jaffle_shop_customers_id", "alias": "source_not_null_jaffle_shop_customers_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [], "sources": [["jaffle_shop", "customers"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/staging/jaffle_shop/src_jaffle_shop.yml/source_not_null_jaffle_shop_customers_id.sql", "build_path": "target/run/secret/models/staging/jaffle_shop/src_jaffle_shop.yml/source_not_null_jaffle_shop_customers_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1674177029.4098334, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom raw.jaffle_shop.customers\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "sources.jaffle_shop"}, "test.secret.source_unique_jaffle_shop_customers_id.2777a7933e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('jaffle_shop', 'customers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["source.secret.jaffle_shop.customers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPMENT", "schema": "dbt_test__audit", "fqn": ["secret", "staging", "jaffle_shop", "source_unique_jaffle_shop_customers_id"], "unique_id": "test.secret.source_unique_jaffle_shop_customers_id.2777a7933e", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "source_unique_jaffle_shop_customers_id.sql", "original_file_path": "models/staging/jaffle_shop/src_jaffle_shop.yml", "name": "source_unique_jaffle_shop_customers_id", "alias": "source_unique_jaffle_shop_customers_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [], "sources": [["jaffle_shop", "customers"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/staging/jaffle_shop/src_jaffle_shop.yml/source_unique_jaffle_shop_customers_id.sql", "build_path": "target/run/secret/models/staging/jaffle_shop/src_jaffle_shop.yml/source_unique_jaffle_shop_customers_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1674177029.4122245, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom raw.jaffle_shop.customers\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "sources.jaffle_shop"}, "test.secret.source_unique_jaffle_shop_orders_id.8a425b2fba": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('jaffle_shop', 'orders')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["source.secret.jaffle_shop.orders"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPMENT", "schema": "dbt_test__audit", "fqn": ["secret", "staging", "jaffle_shop", "source_unique_jaffle_shop_orders_id"], "unique_id": "test.secret.source_unique_jaffle_shop_orders_id.8a425b2fba", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "source_unique_jaffle_shop_orders_id.sql", "original_file_path": "models/staging/jaffle_shop/src_jaffle_shop.yml", "name": "source_unique_jaffle_shop_orders_id", "alias": "source_unique_jaffle_shop_orders_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [], "sources": [["jaffle_shop", "orders"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/staging/jaffle_shop/src_jaffle_shop.yml/source_unique_jaffle_shop_orders_id.sql", "build_path": "target/run/secret/models/staging/jaffle_shop/src_jaffle_shop.yml/source_unique_jaffle_shop_orders_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1674177029.4152675, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom raw.jaffle_shop.orders\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "sources.jaffle_shop"}, "test.secret.source_not_null_jaffle_shop_orders_id.f924998b13": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('jaffle_shop', 'orders')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["source.secret.jaffle_shop.orders"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPMENT", "schema": "dbt_test__audit", "fqn": ["secret", "staging", "jaffle_shop", "source_not_null_jaffle_shop_orders_id"], "unique_id": "test.secret.source_not_null_jaffle_shop_orders_id.f924998b13", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "source_not_null_jaffle_shop_orders_id.sql", "original_file_path": "models/staging/jaffle_shop/src_jaffle_shop.yml", "name": "source_not_null_jaffle_shop_orders_id", "alias": "source_not_null_jaffle_shop_orders_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [], "sources": [["jaffle_shop", "orders"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/staging/jaffle_shop/src_jaffle_shop.yml/source_not_null_jaffle_shop_orders_id.sql", "build_path": "target/run/secret/models/staging/jaffle_shop/src_jaffle_shop.yml/source_not_null_jaffle_shop_orders_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1674177029.4173617, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom raw.jaffle_shop.orders\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "sources.jaffle_shop"}, "test.secret.source_accepted_values_jaffle_shop_orders_status__placed__shipped__completed__return_pending__returned.67e1753cce": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["placed", "shipped", "completed", "return_pending", "returned"], "column_name": "status", "model": "{{ get_where_subquery(source('jaffle_shop', 'orders')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["source.secret.jaffle_shop.orders"]}, "config": {"enabled": true, "alias": "source_accepted_values_jaffle__1cebfa84ea3e5f498396b6dee5cf6984", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPMENT", "schema": "dbt_test__audit", "fqn": ["secret", "staging", "jaffle_shop", "source_accepted_values_jaffle_shop_orders_status__placed__shipped__completed__return_pending__returned"], "unique_id": "test.secret.source_accepted_values_jaffle_shop_orders_status__placed__shipped__completed__return_pending__returned.67e1753cce", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_jaffle__1cebfa84ea3e5f498396b6dee5cf6984\") }}", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "source_accepted_values_jaffle__1cebfa84ea3e5f498396b6dee5cf6984.sql", "original_file_path": "models/staging/jaffle_shop/src_jaffle_shop.yml", "name": "source_accepted_values_jaffle_shop_orders_status__placed__shipped__completed__return_pending__returned", "alias": "source_accepted_values_jaffle__1cebfa84ea3e5f498396b6dee5cf6984", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [], "sources": [["jaffle_shop", "orders"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/staging/jaffle_shop/src_jaffle_shop.yml/source_accepted_values_jaffle__1cebfa84ea3e5f498396b6dee5cf6984.sql", "build_path": "target/run/secret/models/staging/jaffle_shop/src_jaffle_shop.yml/source_accepted_values_jaffle__1cebfa84ea3e5f498396b6dee5cf6984.sql", "deferred": false, "unrendered_config": {"alias": "source_accepted_values_jaffle__1cebfa84ea3e5f498396b6dee5cf6984"}, "created_at": 1674177029.4194503, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from raw.jaffle_shop.orders\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'placed','shipped','completed','return_pending','returned'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "status", "file_key_name": "sources.jaffle_shop"}, "test.secret.source_not_null_stripe_payment_id.f33f317f6c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('stripe', 'payment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["source.secret.stripe.payment"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPMENT", "schema": "dbt_test__audit", "fqn": ["secret", "staging", "stripe", "source_not_null_stripe_payment_id"], "unique_id": "test.secret.source_not_null_stripe_payment_id.f33f317f6c", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "source_not_null_stripe_payment_id.sql", "original_file_path": "models/staging/stripe/src_stripe.yml", "name": "source_not_null_stripe_payment_id", "alias": "source_not_null_stripe_payment_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [], "sources": [["stripe", "payment"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/staging/stripe/src_stripe.yml/source_not_null_stripe_payment_id.sql", "build_path": "target/run/secret/models/staging/stripe/src_stripe.yml/source_not_null_stripe_payment_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1674177029.4273276, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom raw.stripe.payment\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "sources.stripe"}, "test.secret.source_unique_stripe_payment_id.3b7989ce64": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('stripe', 'payment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["source.secret.stripe.payment"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPMENT", "schema": "dbt_test__audit", "fqn": ["secret", "staging", "stripe", "source_unique_stripe_payment_id"], "unique_id": "test.secret.source_unique_stripe_payment_id.3b7989ce64", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "source_unique_stripe_payment_id.sql", "original_file_path": "models/staging/stripe/src_stripe.yml", "name": "source_unique_stripe_payment_id", "alias": "source_unique_stripe_payment_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [], "sources": [["stripe", "payment"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/staging/stripe/src_stripe.yml/source_unique_stripe_payment_id.sql", "build_path": "target/run/secret/models/staging/stripe/src_stripe.yml/source_unique_stripe_payment_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1674177029.4294565, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom raw.stripe.payment\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "sources.stripe"}, "test.secret.source_accepted_values_stripe_payment_paymentmethod__credit_card__bank_transfer__gift_card__coupon.f91677821a": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["credit_card", "bank_transfer", "gift_card", "coupon"], "column_name": "paymentmethod", "model": "{{ get_where_subquery(source('stripe', 'payment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["source.secret.stripe.payment"]}, "config": {"enabled": true, "alias": "source_accepted_values_stripe__9e89253b125bfb08b95319d66e5edadc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPMENT", "schema": "dbt_test__audit", "fqn": ["secret", "staging", "stripe", "source_accepted_values_stripe_payment_paymentmethod__credit_card__bank_transfer__gift_card__coupon"], "unique_id": "test.secret.source_accepted_values_stripe_payment_paymentmethod__credit_card__bank_transfer__gift_card__coupon.f91677821a", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_stripe__9e89253b125bfb08b95319d66e5edadc\") }}", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "source_accepted_values_stripe__9e89253b125bfb08b95319d66e5edadc.sql", "original_file_path": "models/staging/stripe/src_stripe.yml", "name": "source_accepted_values_stripe_payment_paymentmethod__credit_card__bank_transfer__gift_card__coupon", "alias": "source_accepted_values_stripe__9e89253b125bfb08b95319d66e5edadc", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [], "sources": [["stripe", "payment"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/staging/stripe/src_stripe.yml/source_accepted_values_stripe__9e89253b125bfb08b95319d66e5edadc.sql", "build_path": "target/run/secret/models/staging/stripe/src_stripe.yml/source_accepted_values_stripe__9e89253b125bfb08b95319d66e5edadc.sql", "deferred": false, "unrendered_config": {"alias": "source_accepted_values_stripe__9e89253b125bfb08b95319d66e5edadc"}, "created_at": 1674177029.4316268, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        paymentmethod as value_field,\n        count(*) as n_records\n\n    from raw.stripe.payment\n    group by paymentmethod\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'credit_card','bank_transfer','gift_card','coupon'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "paymentmethod", "file_key_name": "sources.stripe"}, "test.secret.source_accepted_values_stripe_payment_status__success__fail.911ca0ff27": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["success", "fail"], "column_name": "status", "model": "{{ get_where_subquery(source('stripe', 'payment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["source.secret.stripe.payment"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPMENT", "schema": "dbt_test__audit", "fqn": ["secret", "staging", "stripe", "source_accepted_values_stripe_payment_status__success__fail"], "unique_id": "test.secret.source_accepted_values_stripe_payment_status__success__fail.911ca0ff27", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "source_accepted_values_stripe_payment_status__success__fail.sql", "original_file_path": "models/staging/stripe/src_stripe.yml", "name": "source_accepted_values_stripe_payment_status__success__fail", "alias": "source_accepted_values_stripe_payment_status__success__fail", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [], "sources": [["stripe", "payment"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/secret/models/staging/stripe/src_stripe.yml/source_accepted_values_stripe_payment_status__success__fail.sql", "build_path": "target/run/secret/models/staging/stripe/src_stripe.yml/source_accepted_values_stripe_payment_status__success__fail.sql", "deferred": false, "unrendered_config": {}, "created_at": 1674177029.438802, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from raw.stripe.payment\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'success','fail'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "status", "file_key_name": "sources.stripe"}}, "sources": {"source.secret.jaffle_shop.customers": {"fqn": ["secret", "staging", "jaffle_shop", "jaffle_shop", "customers"], "database": "raw", "schema": "jaffle_shop", "unique_id": "source.secret.jaffle_shop.customers", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "models/staging/jaffle_shop/src_jaffle_shop.yml", "original_file_path": "models/staging/jaffle_shop/src_jaffle_shop.yml", "name": "customers", "source_name": "jaffle_shop", "source_description": "A replica of the postgres database", "loader": "", "identifier": "customers", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.jaffle_shop.customers", "created_at": 1674177029.4136631}, "source.secret.jaffle_shop.orders": {"fqn": ["secret", "staging", "jaffle_shop", "jaffle_shop", "orders"], "database": "raw", "schema": "jaffle_shop", "unique_id": "source.secret.jaffle_shop.orders", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "models/staging/jaffle_shop/src_jaffle_shop.yml", "original_file_path": "models/staging/jaffle_shop/src_jaffle_shop.yml", "name": "orders", "source_name": "jaffle_shop", "source_description": "A replica of the postgres database", "loader": "", "identifier": "orders", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_etl_loaded_at", "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "One record per order", "columns": {"id": {"name": "id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "One of the following values:\n\n| status         | definition                                                 |\n|----------------|------------------------------------------------------------|\n| placed         | Order placed but not yet shipped                           |\n| shipped        | Order has been shipped but hasn't yet been delivered       |\n| completed      | Order has been received by customers                       |\n| return_pending | Customer has indicated they would like to return this item |\n| returned       | Item has been returned                                     |", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.jaffle_shop.orders", "created_at": 1674177029.4263132}, "source.secret.stripe.payment": {"fqn": ["secret", "staging", "stripe", "stripe", "payment"], "database": "raw", "schema": "stripe", "unique_id": "source.secret.stripe.payment", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "models/staging/stripe/src_stripe.yml", "original_file_path": "models/staging/stripe/src_stripe.yml", "name": "payment", "source_name": "stripe", "source_description": "Incoming stripe payment data.", "loader": "", "identifier": "payment", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "paymentmethod": {"name": "paymentmethod", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.stripe.payment", "created_at": 1674177029.4440172}, "source.secret.snowflake_meta.query_history": {"fqn": ["secret", "snowflake_meta", "staging", "snowflake_meta", "query_history"], "database": "snowflake", "schema": "account_usage", "unique_id": "source.secret.snowflake_meta.query_history", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "models/snowflake_meta/staging/snowflake_meta_src.yml", "original_file_path": "models/snowflake_meta/staging/snowflake_meta_src.yml", "name": "query_history", "source_name": "snowflake_meta", "source_description": "", "loader": "snowflake", "identifier": "query_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["snowflake_meta"], "config": {"enabled": true, "tags": ["snowflake_meta"]}, "patch_path": null, "unrendered_config": {"tags": ["snowflake_meta"]}, "relation_name": "snowflake.account_usage.query_history", "created_at": 1674177029.4442077}, "source.secret.snowflake_meta.warehouse_load_history": {"fqn": ["secret", "snowflake_meta", "staging", "snowflake_meta", "warehouse_load_history"], "database": "snowflake", "schema": "account_usage", "unique_id": "source.secret.snowflake_meta.warehouse_load_history", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "models/snowflake_meta/staging/snowflake_meta_src.yml", "original_file_path": "models/snowflake_meta/staging/snowflake_meta_src.yml", "name": "warehouse_load_history", "source_name": "snowflake_meta", "source_description": "", "loader": "snowflake", "identifier": "warehouse_load_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["snowflake_meta"], "config": {"enabled": true, "tags": ["snowflake_meta"]}, "patch_path": null, "unrendered_config": {"tags": ["snowflake_meta"]}, "relation_name": "snowflake.account_usage.warehouse_load_history", "created_at": 1674177029.4443598}, "source.secret.snowflake_meta.warehouse_metering_history": {"fqn": ["secret", "snowflake_meta", "staging", "snowflake_meta", "warehouse_metering_history"], "database": "snowflake", "schema": "account_usage", "unique_id": "source.secret.snowflake_meta.warehouse_metering_history", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "models/snowflake_meta/staging/snowflake_meta_src.yml", "original_file_path": "models/snowflake_meta/staging/snowflake_meta_src.yml", "name": "warehouse_metering_history", "source_name": "snowflake_meta", "source_description": "", "loader": "snowflake", "identifier": "warehouse_metering_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["snowflake_meta"], "config": {"enabled": true, "tags": ["snowflake_meta"]}, "patch_path": null, "unrendered_config": {"tags": ["snowflake_meta"]}, "relation_name": "snowflake.account_usage.warehouse_metering_history", "created_at": 1674177029.4445064}, "source.secret.snowflake_meta.metering_history": {"fqn": ["secret", "snowflake_meta", "staging", "snowflake_meta", "metering_history"], "database": "snowflake", "schema": "account_usage", "unique_id": "source.secret.snowflake_meta.metering_history", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "models/snowflake_meta/staging/snowflake_meta_src.yml", "original_file_path": "models/snowflake_meta/staging/snowflake_meta_src.yml", "name": "metering_history", "source_name": "snowflake_meta", "source_description": "", "loader": "snowflake", "identifier": "metering_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["snowflake_meta"], "config": {"enabled": true, "tags": ["snowflake_meta"]}, "patch_path": null, "unrendered_config": {"tags": ["snowflake_meta"]}, "relation_name": "snowflake.account_usage.metering_history", "created_at": 1674177029.4446523}, "source.secret.snowflake_meta.users": {"fqn": ["secret", "snowflake_meta", "staging", "snowflake_meta", "users"], "database": "snowflake", "schema": "account_usage", "unique_id": "source.secret.snowflake_meta.users", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "models/snowflake_meta/staging/snowflake_meta_src.yml", "original_file_path": "models/snowflake_meta/staging/snowflake_meta_src.yml", "name": "users", "source_name": "snowflake_meta", "source_description": "", "loader": "snowflake", "identifier": "users", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["snowflake_meta"], "config": {"enabled": true, "tags": ["snowflake_meta"]}, "patch_path": null, "unrendered_config": {"tags": ["snowflake_meta"]}, "relation_name": "snowflake.account_usage.users", "created_at": 1674177029.4447954}, "source.secret.snowflake_meta_qa.query_history": {"fqn": ["secret", "snowflake_meta", "staging", "snowflake_meta_qa", "query_history"], "database": "snowflake", "schema": "account_usage", "unique_id": "source.secret.snowflake_meta_qa.query_history", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "models/snowflake_meta/staging/snowflake_meta_src.yml", "original_file_path": "models/snowflake_meta/staging/snowflake_meta_src.yml", "name": "query_history", "source_name": "snowflake_meta_qa", "source_description": "", "loader": "snowflake", "identifier": "query_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["qa", "snowflake_meta"], "config": {"enabled": true, "tags": ["snowflake_meta"]}, "patch_path": null, "unrendered_config": {"tags": ["snowflake_meta"]}, "relation_name": "snowflake.account_usage.query_history", "created_at": 1674177029.44494}, "source.secret.snowflake_meta_dev.query_history": {"fqn": ["secret", "snowflake_meta", "staging", "snowflake_meta_dev", "query_history"], "database": "snowflake", "schema": "account_usage", "unique_id": "source.secret.snowflake_meta_dev.query_history", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "models/snowflake_meta/staging/snowflake_meta_src.yml", "original_file_path": "models/snowflake_meta/staging/snowflake_meta_src.yml", "name": "query_history", "source_name": "snowflake_meta_dev", "source_description": "", "loader": "snowflake", "identifier": "query_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["dev", "snowflake_meta"], "config": {"enabled": true, "tags": ["snowflake_meta"]}, "patch_path": null, "unrendered_config": {"tags": ["snowflake_meta"]}, "relation_name": "snowflake.account_usage.query_history", "created_at": 1674177029.445083}, "source.secret.snowflake_meta_dynamic.query_history": {"fqn": ["secret", "snowflake_meta", "staging", "snowflake_meta_dynamic", "query_history"], "database": "snowflake", "schema": "account_usage", "unique_id": "source.secret.snowflake_meta_dynamic.query_history", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "models/snowflake_meta/staging/snowflake_meta_src.yml", "original_file_path": "models/snowflake_meta/staging/snowflake_meta_src.yml", "name": "query_history", "source_name": "snowflake_meta_dynamic", "source_description": "", "loader": "snowflake", "identifier": "query_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["dynamic", "snowflake_meta"], "config": {"enabled": true, "tags": ["snowflake_meta"]}, "patch_path": null, "unrendered_config": {"tags": ["snowflake_meta"]}, "relation_name": "snowflake.account_usage.query_history", "created_at": 1674177029.445223}, "source.secret.snowflake_meta_global_variable.query_history": {"fqn": ["secret", "snowflake_meta", "staging", "snowflake_meta_global_variable", "query_history"], "database": "snowflake", "schema": "account_usage", "unique_id": "source.secret.snowflake_meta_global_variable.query_history", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "models/snowflake_meta/staging/snowflake_meta_src.yml", "original_file_path": "models/snowflake_meta/staging/snowflake_meta_src.yml", "name": "query_history", "source_name": "snowflake_meta_global_variable", "source_description": "", "loader": "snowflake", "identifier": "query_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["snowflake_meta"], "config": {"enabled": true, "tags": ["snowflake_meta"]}, "patch_path": null, "unrendered_config": {"tags": ["snowflake_meta"]}, "relation_name": "snowflake.account_usage.query_history", "created_at": 1674177029.4453623}, "source.secret.netflix.netflix_blob_stage": {"fqn": ["secret", "demos", "netflix", "netflix_data_loading", "netflix", "netflix_blob_stage"], "database": "randy_pitcher_workspace_raw", "schema": "netflix_loading", "unique_id": "source.secret.netflix.netflix_blob_stage", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "models/demos/netflix/netflix_data_loading/netflix_src.yml", "original_file_path": "models/demos/netflix/netflix_data_loading/netflix_src.yml", "name": "netflix_blob_stage", "source_name": "netflix", "source_description": "", "loader": "snowflake_external_stage", "identifier": "netflix_blob_stage", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["netflix"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "randy_pitcher_workspace_raw.netflix_loading.netflix_blob_stage", "created_at": 1674177029.4454803}, "source.dbt_artifacts.dbt_artifacts.model_executions": {"fqn": ["dbt_artifacts", "staging", "dbt_artifacts", "model_executions"], "database": "development", "schema": "dbt_artifacts_kearns_added", "unique_id": "source.dbt_artifacts.dbt_artifacts.model_executions", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "model_executions", "source_name": "dbt_artifacts", "source_description": "", "loader": "", "identifier": "model_executions", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "development.dbt_artifacts_kearns_added.model_executions", "created_at": 1674177029.4456344}, "source.dbt_artifacts.dbt_artifacts.tests": {"fqn": ["dbt_artifacts", "staging", "dbt_artifacts", "tests"], "database": "development", "schema": "dbt_artifacts_kearns_added", "unique_id": "source.dbt_artifacts.dbt_artifacts.tests", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "tests", "source_name": "dbt_artifacts", "source_description": "", "loader": "", "identifier": "tests", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_path": {"name": "test_path", "description": "Path to the yaml (SQL in case of a singular test) file describing the test.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "development.dbt_artifacts_kearns_added.tests", "created_at": 1674177029.445786}, "source.dbt_artifacts.dbt_artifacts.test_executions": {"fqn": ["dbt_artifacts", "staging", "dbt_artifacts", "test_executions"], "database": "development", "schema": "dbt_artifacts_kearns_added", "unique_id": "source.dbt_artifacts.dbt_artifacts.test_executions", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "test_executions", "source_name": "dbt_artifacts", "source_description": "", "loader": "", "identifier": "test_executions", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "failures": {"name": "failures", "description": "Test failures. Value is 1 if the test failed, 0 if successful.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "development.dbt_artifacts_kearns_added.test_executions", "created_at": 1674177029.4459336}, "source.dbt_artifacts.dbt_artifacts.models": {"fqn": ["dbt_artifacts", "staging", "dbt_artifacts", "models"], "database": "development", "schema": "dbt_artifacts_kearns_added", "unique_id": "source.dbt_artifacts.dbt_artifacts.models", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "models", "source_name": "dbt_artifacts", "source_description": "", "loader": "", "identifier": "models", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "development.dbt_artifacts_kearns_added.models", "created_at": 1674177029.446098}, "source.dbt_artifacts.dbt_artifacts.seeds": {"fqn": ["dbt_artifacts", "staging", "dbt_artifacts", "seeds"], "database": "development", "schema": "dbt_artifacts_kearns_added", "unique_id": "source.dbt_artifacts.dbt_artifacts.seeds", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "seeds", "source_name": "dbt_artifacts", "source_description": "", "loader": "", "identifier": "seeds", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "development.dbt_artifacts_kearns_added.seeds", "created_at": 1674177029.4462404}, "source.dbt_artifacts.dbt_artifacts.seed_executions": {"fqn": ["dbt_artifacts", "staging", "dbt_artifacts", "seed_executions"], "database": "development", "schema": "dbt_artifacts_kearns_added", "unique_id": "source.dbt_artifacts.dbt_artifacts.seed_executions", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "seed_executions", "source_name": "dbt_artifacts", "source_description": "", "loader": "", "identifier": "seed_executions", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "development.dbt_artifacts_kearns_added.seed_executions", "created_at": 1674177029.446386}, "source.dbt_artifacts.dbt_artifacts.exposures": {"fqn": ["dbt_artifacts", "staging", "dbt_artifacts", "exposures"], "database": "development", "schema": "dbt_artifacts_kearns_added", "unique_id": "source.dbt_artifacts.dbt_artifacts.exposures", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "exposures", "source_name": "dbt_artifacts", "source_description": "", "loader": "", "identifier": "exposures", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Node description.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "maturity": {"name": "maturity", "description": "Exposure maturity; one of high, medium, low.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner": {"name": "owner", "description": "Owner of the exposure, usually an email address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Exposure type; one of dashboard, notebook, analysis, ml, application (used to organize on docs site)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url": {"name": "url", "description": "The URL of the BI tool where the data defined by the exposure can be viewed.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "development.dbt_artifacts_kearns_added.exposures", "created_at": 1674177029.446533}, "source.dbt_artifacts.dbt_artifacts.snapshots": {"fqn": ["dbt_artifacts", "staging", "dbt_artifacts", "snapshots"], "database": "development", "schema": "dbt_artifacts_kearns_added", "unique_id": "source.dbt_artifacts.dbt_artifacts.snapshots", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "snapshots", "source_name": "dbt_artifacts", "source_description": "", "loader": "", "identifier": "snapshots", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "strategy": {"name": "strategy", "description": "Snapshot \"strategies\" define how dbt knows if a row has changed. There are two strategies built-in to dbt \u2014 timestamp\nand check.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "development.dbt_artifacts_kearns_added.snapshots", "created_at": 1674177029.4466798}, "source.dbt_artifacts.dbt_artifacts.snapshot_executions": {"fqn": ["dbt_artifacts", "staging", "dbt_artifacts", "snapshot_executions"], "database": "development", "schema": "dbt_artifacts_kearns_added", "unique_id": "source.dbt_artifacts.dbt_artifacts.snapshot_executions", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "snapshot_executions", "source_name": "dbt_artifacts", "source_description": "", "loader": "", "identifier": "snapshot_executions", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "development.dbt_artifacts_kearns_added.snapshot_executions", "created_at": 1674177029.446825}, "source.dbt_artifacts.dbt_artifacts.sources": {"fqn": ["dbt_artifacts", "staging", "dbt_artifacts", "sources"], "database": "development", "schema": "dbt_artifacts_kearns_added", "unique_id": "source.dbt_artifacts.dbt_artifacts.sources", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "sources", "source_name": "dbt_artifacts", "source_description": "", "loader": "", "identifier": "sources", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "freshness": {"name": "freshness", "description": "The specified freshness of the source model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "identifier": {"name": "identifier", "description": "Source identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "loaded_at_field": {"name": "loaded_at_field", "description": "A column name (or expression) that returns a timestamp indicating freshness.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "loader": {"name": "loader", "description": "Describes the tool that loads this source into your warehouse.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_name": {"name": "source_name", "description": "Source name.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "development.dbt_artifacts_kearns_added.sources", "created_at": 1674177029.4471166}, "source.dbt_artifacts.dbt_artifacts.invocations": {"fqn": ["dbt_artifacts", "staging", "dbt_artifacts", "invocations"], "database": "development", "schema": "dbt_artifacts_kearns_added", "unique_id": "source.dbt_artifacts.dbt_artifacts.invocations", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "invocations", "source_name": "dbt_artifacts", "source_description": "", "loader": "", "identifier": "invocations", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_version": {"name": "dbt_version", "description": "Installed version of dbt that is currently running.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_name": {"name": "project_name", "description": "Name for the root-level project which is being run by dbt.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_command": {"name": "dbt_command", "description": "dbt command of this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_refresh_flag": {"name": "full_refresh_flag", "description": "Boolean flag indicating whether the dbt run was in full refresh mode or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_profile_name": {"name": "target_profile_name", "description": "The name of the active profile.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_name": {"name": "target_name", "description": "The name of the active target.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_schema": {"name": "target_schema", "description": "The name of the target dbt schema.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_threads": {"name": "target_threads", "description": "The number of threads in use by dbt.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_project_id": {"name": "dbt_cloud_project_id", "description": "The ID of the dbt Cloud Project for this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_job_id": {"name": "dbt_cloud_job_id", "description": "The ID of the dbt Cloud Job for this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_run_id": {"name": "dbt_cloud_run_id", "description": "The ID of this particular run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_run_reason_category": {"name": "dbt_cloud_run_reason_category", "description": "The \"category\" of the trigger for this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_run_reason": {"name": "dbt_cloud_run_reason", "description": "The specific trigger for this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "env_vars": {"name": "env_vars", "description": "Key-value pairs of environment variables to be capture.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_vars": {"name": "dbt_vars", "description": "Key-value pairs of project variables to be capture.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "development.dbt_artifacts_kearns_added.invocations", "created_at": 1674177029.447289}}, "macros": {"macro.secret.store_test_results": {"unique_id": "macro.secret.store_test_results", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/store_test_results.sql", "original_file_path": "macros/store_test_results.sql", "name": "store_test_results", "macro_sql": "{% macro store_test_results(results) %}\n  {%- set test_results = [] -%}\n\n  {%- for result in results if result.node.resource_type == 'test' -%}\n    {%- set test_results = test_results.append(result) -%}\n  {%- endfor -%}\n\n  {% if test_results|length == 0 -%}\n    {{ log(\"store_test_results found no test results to process.\") if execute }}\n    {{ return('') }}\n  {% endif -%}\n\n  {%- set central_tbl -%} {{ target.schema }}.test_results_central {%- endset -%}\n  {%- set history_tbl -%} {{ target.schema }}.test_results_history {%- endset -%}\n  \n  {{ log(\"Centralizing \" ~ test_results|length ~ \" test results in \" + central_tbl, info = true) if execute }}\n\n  create or replace table {{ central_tbl }} as (\n    \n    \n  {%- for result in test_results %}\n\n    {%- set test_name = '' -%}\n    {%- set test_type = '' -%}\n    {%- set column_name = '' -%}\n\n    {%- if result.node.test_metadata is defined -%}\n      {%- set test_name = result.node.test_metadata.name -%}\n      {%- set test_type = 'generic' -%}\n      \n      {%- if test_name == 'relationships' -%}\n        {%- set column_name = result.node.test_metadata.kwargs.field ~ ',' ~ result.node.test_metadata.kwargs.column_name -%}\n      {%- else -%}\n        {%- set column_name = result.node.test_metadata.kwargs.column_name -%}\n      {%- endif -%}\n    {%- elif result.node.name is defined -%}\n      {%- set test_name = result.node.name -%}\n      {%- set test_type = 'singular' -%}\n    {%- endif %}\n    \n    select\n      '{{ test_name }}'::text as test_name,\n      '{{ result.node.config.severity }}'::text as test_severity_config,\n      '{{ result.status }}'::text as test_result,\n      '{{ process_refs(result.node.refs) }}'::text as model_refs,\n      '{{ process_refs(result.node.sources, is_src=true) }}'::text as source_refs,\n      '{{ column_name|escape }}'::text as column_names,\n      '{{ result.node.name }}'::text as test_name_long,\n      '{{ test_type }}'::text as test_type,\n      '{{ result.execution_time }}'::text as execution_time_seconds,\n      '{{ result.node.original_file_path }}'::text as file_test_defined,\n      '{{ var(\"pipeline_name\", \"variable_not_set\") }}'::text as pipeline_name,\n      '{{ var(\"pipeline_type\", \"variable_not_set\") }}'::text as pipeline_type,\n      '{{ target.name }}'::text as dbt_cloud_target_name,\n      '{{ env_var(\"DBT_CLOUD_PROJECT_ID\", \"manual\") }}'::text as _audit_project_id,\n      '{{ env_var(\"DBT_CLOUD_JOB_ID\", \"manual\") }}'::text as _audit_job_id,\n      '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}'::text as _audit_run_id,\n      '{{ env_var(\"DBT_CLOUD_URL\", \"https://cloud.getdbt.com/#/accounts/account_id/projects/\") }}'||_audit_project_id||'/runs/'||_audit_run_id::text as _audit_run_url,\n      current_timestamp as _timestamp\n    {{ \"union all\" if not loop.last }}\n  \n  {%- endfor %}\n  \n  );\n\n  {% if target.name != 'default' %}\n    {{ log(\"Centralizing \" ~ test_results|length ~ \" test results in \" + history_tbl, info = true) if execute }}\n      create table if not exists {{ history_tbl }} as (\n        select \n          {{ dbt_utils.surrogate_key([\"test_name\", \"test_result\", \"_timestamp\"]) }} as sk_id, \n          * \n        from {{ central_tbl }}\n        where false\n      );\n\n    insert into {{ history_tbl }} \n      select \n       {{ dbt_utils.surrogate_key([\"test_name\", \"test_result\", \"_timestamp\"]) }} as sk_id, \n       * \n      from {{ central_tbl }}\n    ;\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.secret.process_refs", "macro.dbt_utils.surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.433272, "supported_languages": null}, "macro.secret.process_refs": {"unique_id": "macro.secret.process_refs", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/store_test_results.sql", "original_file_path": "macros/store_test_results.sql", "name": "process_refs", "macro_sql": "{% macro process_refs( ref_list, is_src=false ) %}\n  {% set refs = [] %}\n\n  {% if ref_list is defined and ref_list|length > 0 %}\n      {% for ref in ref_list %}\n        {% if is_src %}\n          {{ refs.append(ref|join('.')) }}\n        {% else %}\n          {{ refs.append(ref[0]) }}\n        {% endif %} \n      {% endfor %}\n\n      {{ return(refs|join(',')) }}\n  {% else %}\n      {{ return('') }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.434788, "supported_languages": null}, "macro.secret.get_dynamic_sql_value": {"unique_id": "macro.secret.get_dynamic_sql_value", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/get_dynamic_sql_value.sql", "original_file_path": "macros/get_dynamic_sql_value.sql", "name": "get_dynamic_sql_value", "macro_sql": "{% macro get_dynamic_sql_value() %}\n\n  {% set query = 'select 123' %}\n\n  {% if execute %}\n    {% set result = run_query(query).columns[0].values()[0] %}\n    {{ return(result) }}\n  {% else %}\n    {{ return('NULL')}}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.4363184, "supported_languages": null}, "macro.secret.dev_limit": {"unique_id": "macro.secret.dev_limit", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/dev_limit.sql", "original_file_path": "macros/dev_limit.sql", "name": "dev_limit", "macro_sql": "{% macro dev_limit(limit=1000) %}\n\n{#-\n    This macro is used to add a row limit in CI checks so that they run much faster\n    In Cloud we set the env_var DBT_ENVIRONMENT_NAME equal to 'prod' for all job runs and development, \n        except for the Slim CI job, which overrides it to 'ci'. which will trigger this `if` block\n    In code, we default the env_var to 'dev', (which does not trigger the `if` block), but will be useful\n        to avoid compilation errors when the environment variable is not available, for example, in CLI\n    We default limit the amount of rows returned to 1000, but you can override this with an argument\n\n    usage: \n        ```sql\n            select * from dim_orders\n            {{ dev_limit() }}\n        ```\n    usage:  \n        ```sql\n            select * from dim_orders\n            {{ dev_limit(99) }}\n        ```\n-#}\n\n  {% if env_var('DBT_ENVIRONMENT_NAME', 'dev') == 'ci' -%}\n\n    limit {{ limit }}\n  \n  {%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.437292, "supported_languages": null}, "macro.secret.standardize_timestamp": {"unique_id": "macro.secret.standardize_timestamp", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/standardize_timestamp.sql", "original_file_path": "macros/standardize_timestamp.sql", "name": "standardize_timestamp", "macro_sql": "{% macro standardize_timestamp(timestamp_column) %}\n  CONVERT_TIMEZONE('America/Chicago', {{ timestamp_column }})::TIMESTAMP_NTZ\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "This macro converts all timestamps into Snowflake `TIMESTAMP_NTZ` column types and converts them to `America/Chicago` time.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "secret://macros/macros.yml", "arguments": [], "created_at": 1674177029.1353717, "supported_languages": null}, "macro.secret.variable_update": {"unique_id": "macro.secret.variable_update", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/variable_update.sql", "original_file_path": "macros/variable_update.sql", "name": "variable_update", "macro_sql": "{% macro variable_update() %}\n    {% set disable_models=\"['some_macro_name']\" %}\n    {% do log(\"Updating disable_models: \" ~ disable_models, info=true) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.4386852, "supported_languages": null}, "macro.secret.cents_to_dollars": {"unique_id": "macro.secret.cents_to_dollars", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/cents_to_dollars.sql", "original_file_path": "macros/cents_to_dollars.sql", "name": "cents_to_dollars", "macro_sql": "{%- macro cents_to_dollars(column_name, scale=2) -%}\n\n    ({{ column_name }} / 100)::numeric(16, {{ scale }})\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.4393313, "supported_languages": null}, "macro.secret.parent_macro": {"unique_id": "macro.secret.parent_macro", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/nested_macros.sql", "original_file_path": "macros/nested_macros.sql", "name": "parent_macro", "macro_sql": "{% macro parent_macro() %}\n  {{ child_macro() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.secret.child_macro"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.4400308, "supported_languages": null}, "macro.secret.child_macro": {"unique_id": "macro.secret.child_macro", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/nested_macros.sql", "original_file_path": "macros/nested_macros.sql", "name": "child_macro", "macro_sql": "{% macro child_macro(should_fail=true) %}\n    {% if should_fail == true %}\n        {{ exceptions.raise_compiler_error(\"Error! Beep beep boop!\") }}\n    {% else %}\n        select 'test' as some_column\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.44053, "supported_languages": null}, "macro.secret.create_snapshot_manually": {"unique_id": "macro.secret.create_snapshot_manually", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/create_snapshot_manually.sql", "original_file_path": "macros/create_snapshot_manually.sql", "name": "create_snapshot_manually", "macro_sql": "{% macro create_snapshot_manually(relation_to_snapshot) %}\n\n    {% set snapshot_target = target.database ~ '.' ~ target.schema ~ '.' ~ relation_to_snapshot.split('.')[-1] ~ '__SNAPSHOT' %}\n\n    {% set create_snapshot_query %}\n        CREATE TABLE IF NOT EXISTS {{snapshot_target}} AS (\n            SELECT \n                *,\n                CURRENT_TIMESTAMP AS SNAPSHOTTED_AT_TIME\n            FROM {{relation_to_snapshot}}\n            LIMIT 0\n        )\n    {% endset %}\n\n\n    {% set insert_snapshot_query %}\n        INSERT INTO {{snapshot_target}} (\n            SELECT \n                *,\n                CURRENT_TIMESTAMP AS SNAPSHOTTED_AT_TIME\n            FROM {{relation_to_snapshot}}\n        )\n    {% endset %}\n\n    {% do log('Creating snapshot target table --> ' ~ snapshot_target, True) %}\n    {% do run_query(create_snapshot_query) %}\n\n    {% do log('Inserting full snapshot into target table from relation to snapshot --> ' ~ relation_to_snapshot, True) %}\n    {% do run_query(insert_snapshot_query) %}\n\n    {% do run_query('COMMIT') %}\n  \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "This macro manually creates a snapshot table if one does not exist and inserts a full table snapshot into the new snapshot table (whew!). This is a **bad idea**, but it's a good demo of how to use run-operations with macros.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "secret://macros/macros.yml", "arguments": [{"name": "relation_to_snapshot", "type": null, "description": "String containing the fully-qualified name of the view or table to snapshot. For example, `MY_DB.MY_SCHEMA.TABLE_TO_SNAPSHOT`."}], "created_at": 1674177029.1347046, "supported_languages": null}, "macro.secret.get_column_names": {"unique_id": "macro.secret.get_column_names", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/audit/get_column_names.sql", "original_file_path": "macros/audit/get_column_names.sql", "name": "get_column_names", "macro_sql": "{% macro get_column_names(model) %}\n  {% set query = 'describe view ' ~ model %}\n\n  {% if execute %}\n    {% set cols = run_query(query).columns[0].values() %}\n    {{ return(cols) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.4439623, "supported_languages": null}, "macro.secret.validate_model_name": {"unique_id": "macro.secret.validate_model_name", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/audit/validate_model_name.sql", "original_file_path": "macros/audit/validate_model_name.sql", "name": "validate_model_name", "macro_sql": "{% macro validate_model_name(model, ruleset=None) %}\n\n  {% if ruleset == None %}\n      {{ return() }}\n  {% elif ruleset == 'stage' %}  \n    {% if not model.identifier.startswith('stg_') %}\n      {{ exceptions.raise_compiler_error(\"Invalid model name validation. Staging models must start with 'stg_'. Got: \" ~ model.identifier) }}\n    {% endif %}\n  {% else %}  \n    {{ exceptions.raise_compiler_error(\"Invalid model name validation ruleset. Got: \" ~ ruleset) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.4454684, "supported_languages": null}, "macro.secret.validate_column_names": {"unique_id": "macro.secret.validate_column_names", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/audit/validate_column_names.sql", "original_file_path": "macros/audit/validate_column_names.sql", "name": "validate_column_names", "macro_sql": "{% macro validate_column_names(model) %}\n  {% if not execute %}\n      {{ return(None) }}\n  {% endif %}\n\n  {% set cols = get_column_names(model) %}\n  \n  {% set has_id_col = [] %}\n  {% for col in cols %}\n    {% if col.lower().endswith('_id') %}\n      {% do has_id_col.append(True) %}\n    {% endif %}\n  {% endfor %}\n  \n  {% if not has_id_col %}\n    {%- set err -%}\n      Model {{model.identifier}} has no id column. 1 column name must end in '_id'. Columns:\n      {%- for col in cols -%}\n        {{'\\n\\t'}}{{col}}\n      {%- endfor -%}\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(err) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.secret.get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.4477704, "supported_languages": null}, "macro.secret.materialization_partitioned_incremental_default": {"unique_id": "macro.secret.materialization_partitioned_incremental_default", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/materializations/partitioned_incremental/partitioned_incremental.sql", "original_file_path": "macros/materializations/partitioned_incremental/partitioned_incremental.sql", "name": "materialization_partitioned_incremental_default", "macro_sql": "{% materialization partitioned_incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n  {% set partition_by  = config.get('partition_by') %}\n  {% set partitions_to_process  = config.get('partitions_to_process') %}\n\n  {% do log('\\nunique_key=' ~unique_key~ '\\npartition_by=' ~partition_by~ '\\npartitions_to_process=' ~partitions_to_process, False)%}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view or should_full_refresh() %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set backup_identifier = existing_relation.identifier ~ \"__dbt_backup\" %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n      {% do adapter.drop_relation(backup_relation) %}\n\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n      {% set tmp_relation = make_temp_relation(target_relation) %}\n\n      {% set partitioned_incremental_sql %}\n        {{sql}} \n\n        {% if partition_by and partitions_to_process %}\n            -- this filter will only be applied on an incremental run\n            WHERE {{ partition_by }} IN ( \n                {% for partition_to_process in partitions_to_process %}\n                    {{partition_to_process}}{% if not loop.last %},{% endif %}\n                {% endfor %}\n            )\n        {% endif %}\n      {% endset %}\n\n      {% do log('\\n\\n'~partitioned_incremental_sql~'\\n\\n', False)%}\n\n\n      {% do run_query(create_table_as(True, tmp_relation, partitioned_incremental_sql)) %}\n      {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n      {% set build_sql = incremental_upsert(tmp_relation, target_relation, unique_key=unique_key) %}\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.should_full_refresh", "macro.dbt.run_query", "macro.dbt.statement", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.4555418, "supported_languages": ["sql"]}, "macro.secret.materialization_landing_default": {"unique_id": "macro.secret.materialization_landing_default", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/materializations/landing/landing.sql", "original_file_path": "macros/materializations/landing/landing.sql", "name": "materialization_landing_default", "macro_sql": "{% materialization landing, default -%}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% call statement(\"main\") %}\n      {{ sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n  \n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.4578779, "supported_languages": ["sql"]}, "macro.secret.materialization_easy_incremental_default": {"unique_id": "macro.secret.materialization_easy_incremental_default", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/materializations/easy_incremental/easy_incremental.sql", "original_file_path": "macros/materializations/easy_incremental/easy_incremental.sql", "name": "materialization_easy_incremental_default", "macro_sql": "{% materialization easy_incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n  {% set watermark  = config.get('watermark') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view or should_full_refresh() %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set backup_identifier = existing_relation.identifier ~ \"__dbt_backup\" %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n      {% do adapter.drop_relation(backup_relation) %}\n\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n      {% set tmp_relation = make_temp_relation(target_relation) %}\n\n      {% set easy_incremental_sql %}\n        {{sql}} \n\n        {% if watermark is not none %}\n            -- this filter will only be applied on an incremental run\n            WHERE {{ watermark }} > (SELECT MAX(THIS.{{ watermark }}) FROM {{ this }} THIS)\n        {% endif %}\n      {% endset %}\n\n      {% do run_query(create_table_as(True, tmp_relation, easy_incremental_sql)) %}\n      {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n      {% set build_sql = incremental_upsert(tmp_relation, target_relation, unique_key=unique_key) %}\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.should_full_refresh", "macro.dbt.run_query", "macro.dbt.statement", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.4642146, "supported_languages": ["sql"]}, "macro.secret.get_stage_columns_from_loading_config": {"unique_id": "macro.secret.get_stage_columns_from_loading_config", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/snowflake_utils/get_stage_columns_from_loading_config.sql", "original_file_path": "macros/snowflake_utils/get_stage_columns_from_loading_config.sql", "name": "get_stage_columns_from_loading_config", "macro_sql": "{% macro get_stage_columns_from_loading_config(stage_name, config_table) %}\n    {#- get column info from config table -#}\n    {% set get_ddl_portions_query %}\n        with \n        \n        stage_cols as (\n            select *\n            from {{config_table}}\n            where stage_name = '{{stage_name}}'\n        ),\n\n        latest_stage_columns as (\n            select * \n            from stage_cols\n            where updated_at = (select max(updated_at) from stage_cols)\n        ),\n\n        ddl_portions as (\n            select\n                '$' || column_position || '::' || column_type || ' as ' || column_name as ddl_portions\n            from latest_stage_columns\n        )\n\n        select * from ddl_portions\n    {% endset %}\n\n    {% if execute %}\n        {% set ddl_portions = run_query(get_ddl_portions_query).columns[0].values() %}\n        {% for ddl_portion in ddl_portions %}\n          {{ddl_portion}} {% if not loop.last %}, {% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.465946, "supported_languages": null}, "macro.secret.pack_json": {"unique_id": "macro.secret.pack_json", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/snowflake_utils/pack_json.sql", "original_file_path": "macros/snowflake_utils/pack_json.sql", "name": "pack_json", "macro_sql": "{% macro pack_json(from, relation_alias=False, except=[]) -%}\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n\n    {%- for col in cols -%}\n        {%- if col.column not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    object_construct_keep_null(\n        {%- for col in include_cols %}        \n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{\"'\" + col + \"'\" + ', ' + col }}\n            {%- if not loop.last %},{{'\\n  ' }}{% endif %}\n        {%- endfor -%}\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.468078, "supported_languages": null}, "macro.secret.get_workspace_setup_script": {"unique_id": "macro.secret.get_workspace_setup_script", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/snowflake_utils/get_workspace_setup_script.sql", "original_file_path": "macros/snowflake_utils/get_workspace_setup_script.sql", "name": "get_workspace_setup_script", "macro_sql": "{% macro get_workspace_setup_script(project_name, test_svc_accnt_password, prod_svc_accnt_password) %}\n\n{% set setup_script %}\n\n//=============================================================================\n// create data resources\n//=============================================================================\nUSE ROLE SYSADMIN;\n\n// Databases\nCREATE DATABASE {{ project_name }}_DEV;\nCREATE DATABASE {{ project_name }}_PROD;\n\n// Clean public schemas\nDROP SCHEMA {{ project_name }}_DEV.PUBLIC;\nDROP SCHEMA {{ project_name }}_PROD.PUBLIC;\n//=============================================================================\n\n\n//=============================================================================\n// create warehouses\n//=============================================================================\nUSE ROLE SYSADMIN;\n\n// dev warehouse\nCREATE WAREHOUSE {{ project_name }}_DEV_WH\n  COMMENT='Warehouse for powering data engineering activities for the {{ project_name }} project'\n  WAREHOUSE_SIZE=XSMALL\n  AUTO_SUSPEND=60\n  INITIALLY_SUSPENDED=TRUE;\n\n// test warehouse\nCREATE WAREHOUSE {{ project_name }}_TEST_WH\n    COMMENT='Warehouse for powering CI test activities for the {{ project_name }} project'\n    WAREHOUSE_SIZE=XSMALL\n    AUTO_SUSPEND=60\n    INITIALLY_SUSPENDED=TRUE;\n\n// prod warehouse\nCREATE WAREHOUSE {{ project_name }}_PROD_WH\n    COMMENT='Warehouse for powering CI production activities for the {{ project_name }} project'\n    WAREHOUSE_SIZE=XSMALL\n    AUTO_SUSPEND=60\n    INITIALLY_SUSPENDED=TRUE;\n//=============================================================================\n\n\n//=============================================================================\n// create object access (OA) roles\n//=============================================================================\nUSE ROLE SECURITYADMIN;\n\n// data access\nCREATE ROLE {{ project_name }}_DEV_READ;\nCREATE ROLE {{ project_name }}_DEV_WRITE;\nCREATE ROLE {{ project_name }}_PROD_READ;\nCREATE ROLE {{ project_name }}_PROD_WRITE;\nCREATE ROLE {{ project_name }}_RAW_DATA_READ; -- Grant full source read access to this role. Think Fivetran read role for example.\n\n// warehouse access\nCREATE ROLE {{ project_name }}_DEV_WH_ALL_PRIVILEGES;\nCREATE ROLE {{ project_name }}_TEST_WH_USAGE;\nCREATE ROLE {{ project_name }}_PROD_WH_USAGE;\n\n// grant all roles to sysadmin (always do this)\nGRANT ROLE {{ project_name }}_DEV_WRITE             TO ROLE SYSADMIN;\nGRANT ROLE {{ project_name }}_DEV_READ              TO ROLE SYSADMIN;\nGRANT ROLE {{ project_name }}_PROD_WRITE            TO ROLE SYSADMIN;\nGRANT ROLE {{ project_name }}_PROD_READ             TO ROLE SYSADMIN;\nGRANT ROLE {{ project_name }}_RAW_DATA_READ         TO ROLE SYSADMIN;\nGRANT ROLE {{ project_name }}_DEV_WH_ALL_PRIVILEGES TO ROLE SYSADMIN;\nGRANT ROLE {{ project_name }}_TEST_WH_USAGE         TO ROLE SYSADMIN;\nGRANT ROLE {{ project_name }}_PROD_WH_USAGE         TO ROLE SYSADMIN;\n//=============================================================================\n\n\n//=============================================================================\n// grant privileges to object access roles\n//=============================================================================\nUSE ROLE SECURITYADMIN;\n\n// dev data access\nGRANT USAGE ON DATABASE {{ project_name }}_DEV                               TO ROLE {{ project_name }}_DEV_READ;\nGRANT USAGE ON ALL SCHEMAS IN DATABASE {{ project_name }}_DEV                TO ROLE {{ project_name }}_DEV_READ;\nGRANT USAGE ON FUTURE SCHEMAS IN DATABASE {{ project_name }}_DEV             TO ROLE {{ project_name }}_DEV_READ;\nGRANT SELECT ON ALL TABLES IN DATABASE {{ project_name }}_DEV                TO ROLE {{ project_name }}_DEV_READ;\nGRANT SELECT ON ALL VIEWS IN DATABASE {{ project_name }}_DEV                 TO ROLE {{ project_name }}_DEV_READ;\nGRANT SELECT ON ALL MATERIALIZED VIEWS IN DATABASE {{ project_name }}_DEV    TO ROLE {{ project_name }}_DEV_READ;\nGRANT SELECT ON FUTURE TABLES IN DATABASE {{ project_name }}_DEV             TO ROLE {{ project_name }}_DEV_READ;\nGRANT SELECT ON FUTURE VIEWS IN DATABASE {{ project_name }}_DEV              TO ROLE {{ project_name }}_DEV_READ;\nGRANT SELECT ON FUTURE MATERIALIZED VIEWS IN DATABASE {{ project_name }}_DEV TO ROLE {{ project_name }}_DEV_READ;\nGRANT ROLE {{ project_name }}_DEV_READ                                       TO ROLE {{ project_name }}_DEV_WRITE;\nGRANT CREATE SCHEMA ON DATABASE {{ project_name }}_DEV                       TO ROLE {{ project_name }}_DEV_WRITE;\n\n// prod data access\nGRANT USAGE ON DATABASE {{ project_name }}_PROD                               TO ROLE {{ project_name }}_PROD_READ;\nGRANT USAGE ON ALL SCHEMAS IN DATABASE {{ project_name }}_PROD                TO ROLE {{ project_name }}_PROD_READ;\nGRANT USAGE ON FUTURE SCHEMAS IN DATABASE {{ project_name }}_PROD             TO ROLE {{ project_name }}_PROD_READ;\nGRANT SELECT ON ALL TABLES IN DATABASE {{ project_name }}_PROD                TO ROLE {{ project_name }}_PROD_READ;\nGRANT SELECT ON ALL VIEWS IN DATABASE {{ project_name }}_PROD                 TO ROLE {{ project_name }}_PROD_READ;\nGRANT SELECT ON ALL MATERIALIZED VIEWS IN DATABASE {{ project_name }}_PROD    TO ROLE {{ project_name }}_PROD_READ;\nGRANT SELECT ON FUTURE TABLES IN DATABASE {{ project_name }}_PROD             TO ROLE {{ project_name }}_PROD_READ;\nGRANT SELECT ON FUTURE VIEWS IN DATABASE {{ project_name }}_PROD              TO ROLE {{ project_name }}_PROD_READ;\nGRANT SELECT ON FUTURE MATERIALIZED VIEWS IN DATABASE {{ project_name }}_PROD TO ROLE {{ project_name }}_PROD_READ;\nGRANT ROLE {{ project_name }}_PROD_READ                                       TO ROLE {{ project_name }}_PROD_WRITE;\nGRANT CREATE SCHEMA ON DATABASE {{ project_name }}_PROD                       TO ROLE {{ project_name }}_PROD_WRITE;\n\n// warehouse access\nGRANT ALL PRIVILEGES ON WAREHOUSE {{ project_name }}_DEV_WH TO ROLE {{ project_name }}_DEV_WH_ALL_PRIVILEGES;\nGRANT USAGE ON WAREHOUSE {{ project_name }}_TEST_WH         TO ROLE {{ project_name }}_TEST_WH_USAGE;\nGRANT USAGE ON WAREHOUSE {{ project_name }}_PROD_WH         TO ROLE {{ project_name }}_PROD_WH_USAGE;\n//=============================================================================\n\n\n//=============================================================================\n// create business function roles and grant access to object access roles\n//=============================================================================\nUSE ROLE SECURITYADMIN;\n\n// BF roles\nCREATE ROLE {{ project_name }}_ADMIN;\nCREATE ROLE {{ project_name }}_DEVELOPER;\nCREATE ROLE {{ project_name }}_DBT_TEST_SERVICE_ACCOUNT_ROLE;\nCREATE ROLE {{ project_name }}_DBT_PROD_SERVICE_ACCOUNT_ROLE;\n\n// grant all roles to sysadmin (always do this)\nGRANT ROLE {{ project_name }}_ADMIN                         TO ROLE SYSADMIN;\nGRANT ROLE {{ project_name }}_DEVELOPER                     TO ROLE SYSADMIN;\nGRANT ROLE {{ project_name }}_DBT_TEST_SERVICE_ACCOUNT_ROLE TO ROLE SYSADMIN;\nGRANT ROLE {{ project_name }}_DBT_PROD_SERVICE_ACCOUNT_ROLE TO ROLE SYSADMIN;\n\n// grant bf roles to admin\nGRANT ROLE {{ project_name }}_DEVELOPER                     TO ROLE {{ project_name }}_ADMIN;\nGRANT ROLE {{ project_name }}_DBT_TEST_SERVICE_ACCOUNT_ROLE TO ROLE {{ project_name }}_ADMIN;\nGRANT ROLE {{ project_name }}_DBT_PROD_SERVICE_ACCOUNT_ROLE TO ROLE {{ project_name }}_ADMIN;\n\n// grant OA roles to the developer\nGRANT ROLE {{ project_name }}_DEV_WRITE                     TO ROLE {{ project_name }}_DEVELOPER;\nGRANT ROLE {{ project_name }}_PROD_READ                     TO ROLE {{ project_name }}_DEVELOPER;\nGRANT ROLE {{ project_name }}_RAW_DATA_READ                 TO ROLE {{ project_name }}_DEVELOPER;\nGRANT ROLE {{ project_name }}_DEV_WH_ALL_PRIVILEGES         TO ROLE {{ project_name }}_DEVELOPER;\nGRANT ROLE {{ project_name }}_DBT_TEST_SERVICE_ACCOUNT_ROLE TO ROLE {{ project_name }}_DEVELOPER;\n\n// grant OA roles to the test service account role\nGRANT ROLE {{ project_name }}_DEV_WRITE     TO ROLE {{ project_name }}_DBT_TEST_SERVICE_ACCOUNT_ROLE;\nGRANT ROLE {{ project_name }}_RAW_DATA_READ TO ROLE {{ project_name }}_DBT_TEST_SERVICE_ACCOUNT_ROLE;\nGRANT ROLE {{ project_name }}_TEST_WH_USAGE TO ROLE {{ project_name }}_DBT_TEST_SERVICE_ACCOUNT_ROLE;\n\n// grant OA roles to the prod service account role\nGRANT ROLE {{ project_name }}_PROD_WRITE    TO ROLE {{ project_name }}_DBT_PROD_SERVICE_ACCOUNT_ROLE;\nGRANT ROLE {{ project_name }}_RAW_DATA_READ TO ROLE {{ project_name }}_DBT_PROD_SERVICE_ACCOUNT_ROLE;\nGRANT ROLE {{ project_name }}_PROD_WH_USAGE TO ROLE {{ project_name }}_DBT_PROD_SERVICE_ACCOUNT_ROLE;\n//=============================================================================\n\n\n//=============================================================================\n// create service accounts\n//=============================================================================\nUSE ROLE SECURITYADMIN;\n\n// test service account\nCREATE USER {{ project_name }}_DBT_TEST_SERVICE_ACCOUNT_USER\n  PASSWORD = '{{ test_svc_accnt_password }}' \n  COMMENT = 'Service account for dbt CI/CD in the test (TEST) environment of the {{ project_name }} project.'\n  DEFAULT_WAREHOUSE = {{ project_name }}_TEST_WH\n  DEFAULT_ROLE = {{ project_name }}_DBT_TEST_SERVICE_ACCOUNT_ROLE\n  MUST_CHANGE_PASSWORD = FALSE;\n\n// prod service account\nCREATE USER {{ project_name }}_DBT_PROD_SERVICE_ACCOUNT_USER\n  PASSWORD = '{{ prod_svc_accnt_password }}' \n  COMMENT = 'Service account for dbt CI/CD in the production (PROD) environment of the {{ project_name }} project.'\n  DEFAULT_WAREHOUSE = {{ project_name }}_PROD_WH\n  DEFAULT_ROLE = {{ project_name }}_DBT_PROD_SERVICE_ACCOUNT_ROLE\n  MUST_CHANGE_PASSWORD = FALSE;\n\n// grant permissions to service accounts\nGRANT ROLE {{ project_name }}_DBT_TEST_SERVICE_ACCOUNT_ROLE TO USER {{ project_name }}_DBT_TEST_SERVICE_ACCOUNT_USER;\nGRANT ROLE {{ project_name }}_DBT_PROD_SERVICE_ACCOUNT_ROLE TO USER {{ project_name }}_DBT_PROD_SERVICE_ACCOUNT_USER;\n//=============================================================================\n\n\n//=============================================================================\n// Connect this good funk to your existing warehouse junk\n//=============================================================================\n// Importantly, make sure you grant the proper read access for your sources to the {{ project_name }}_RAW_DATA_READ role\n// Something like:\nUSE ROLE SECURITYADMIN;\n-- GRANT USAGE ON DATABASE FIVETRAN                   TO ROLE {{ project_name }}_RAW_DATA_READ;\n-- GRANT USAGE ON ALL SCHEMAS IN DATABASE FIVETRAN    TO ROLE {{ project_name }}_RAW_DATA_READ;\n-- GRANT USAGE ON FUTURE SCHEMAS IN DATABASE FIVETRAN TO ROLE {{ project_name }}_RAW_DATA_READ;\n-- GRANT SELECT ON ALL TABLES IN DATABASE FIVETRAN    TO ROLE {{ project_name }}_RAW_DATA_READ;\n-- GRANT SELECT ON FUTURE TABLES IN DATABASE FIVETRAN TO ROLE {{ project_name }}_RAW_DATA_READ;\n\n// Check out this example below for adding the snowflake account usage data to your dbt projects\nUSE ROLE SECURITYADMIN;\n-- CREATE ROLE SNOWFLAKE_ACCOUNT_USAGE_READ_ROLE;\n-- GRANT ROLE SNOWFLAKE_ACCOUNT_USAGE_READ_ROLE TO ROLE SYSADMIN; -- always do this\n-- GRANT ROLE SNOWFLAKE_ACCOUNT_USAGE_READ_ROLE TO ROLE {{ project_name }}_RAW_DATA_READ;\n\n-- USE ROLE ACCOUNTADMIN;\n-- GRANT IMPORTED PRIVILEGES ON DATABASE SNOWFLAKE TO ROLE SNOWFLAKE_ACCOUNT_USAGE_READ_ROLE;\n\n// Annnnd lastly, you should probably grant the dev permissions to some of your favorite people\nUSE ROLE SECURITYADMIN;\n-- GRANT ROLE {{ project_name }}_ADMIN     TO USER LILY;\n-- GRANT ROLE {{ project_name }}_DEVELOPER TO USER PENELOPE;\n//=============================================================================\n{% endset %}\n\n{% do log('\\n\\n' ~ setup_script ~ '\\n\\n', True) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.5265367, "supported_languages": null}, "macro.secret.resize_warehouse": {"unique_id": "macro.secret.resize_warehouse", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/snowflake_utils/resize_warehouse.sql", "original_file_path": "macros/snowflake_utils/resize_warehouse.sql", "name": "resize_warehouse", "macro_sql": "{% macro resize_warehouse(warehouse_name, warehouse_size) %}\n    {% set query = 'ALTER WAREHOUSE ' ~ warehouse_name ~ ' SET WAREHOUSE_SIZE=' ~ warehouse_size ~ ';' %}\n    {% if execute %}            \n        {% do run_query(query) %}        \n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.5277104, "supported_languages": null}, "macro.secret.unpack_json": {"unique_id": "macro.secret.unpack_json", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/snowflake_utils/unpack_json.sql", "original_file_path": "macros/snowflake_utils/unpack_json.sql", "name": "unpack_json", "macro_sql": "{% macro unpack_json(model, variant_column_name) %}\n\n  {% set variant_keys_query %}\n    WITH \n\n    KEYS AS (\n      SELECT \n        OBJECT_KEYS({{variant_column_name}})\n      FROM {{model}}\n    )\n\n    SELECT \n      K.VALUE::STRING\n    \n    FROM TABLE(FLATTEN(INPUT => (SELECT * FROM KEYS))) K\n  {% endset %}\n\n  {% if execute %}\n    {% set keys = run_query(variant_keys_query).columns[0].values() %}\n\n    {% for key in keys %}\n        GET({{variant_column_name}}, '{{key}}') AS {{key}}{% if not loop.last %}, {% endif %}\n    {% endfor %}\n\n  {% else %}\n    {{ return('NULL')}}\n  {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.5295722, "supported_languages": null}, "macro.secret.update_controlled_db_read_access": {"unique_id": "macro.secret.update_controlled_db_read_access", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/snowflake_utils/update_controlled_db_read_access.sql", "original_file_path": "macros/snowflake_utils/update_controlled_db_read_access.sql", "name": "update_controlled_db_read_access", "macro_sql": "{% macro update_controlled_db_read_access(dry_run=True) %}\n\n    {# Set the database you intend to grant access to here. You could modify this macro to make this a param if you like. #}\n    {% set db = 'MY_DATABASE' %}\n    {% set schemas = ['schema_a', 'schema_b'] %}\n    {% set object_access_role = db ~ '_CONTROLLED_READ_ACCESS_ROLE' %}\n\n    {% set update_query %}\n        USE ROLE SECURITYADMIN;\n\n        -- Create the access role if it doesn't exist\n        CREATE ROLE IF NOT EXISTS {{object_access_role}};\n        GRANT ROLE {{object_access_role}} TO ROLE SYSADMIN; -- always do this as a best practice\n\n        -- Update grants to the object access role\n        GRANT USAGE ON DATABASE {{db}} TO ROLE {{object_access_role}};\n        {% for schema in schemas %}\n            GRANT USAGE ON {{db}}.{{schema}} TO ROLE {{object_access_role}};\n            GRANT SELECT ON ALL TABLES    IN SCHEMA {{db}}.{{schema}} TO ROLE {{object_access_role}};\n            GRANT SELECT ON ALL VIEWS     IN SCHEMA {{db}}.{{schema}} TO ROLE {{object_access_role}};\n            GRANT SELECT ON FUTURE TABLES IN SCHEMA {{db}}.{{schema}} TO ROLE {{object_access_role}};\n            GRANT SELECT ON FUTURE VIEWS  IN SCHEMA {{db}}.{{schema}} TO ROLE {{object_access_role}};\n        {% endfor %}\n    {% endset %}\n\n    {% if dry_run %}\n        {% do log('Dry run of update controlled db read access:\\n' ~ update_query, True) %}\n    {% else %}\n        {% do run_query(update_query) %}\n    {% endif %}\n\n    {# Always a good idea to explicitly jump back to the default role for the current environment #}\n    {% do run_query('USE ROLE ' ~ target.role) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.5331168, "supported_languages": null}, "macro.secret.stored_proc__pi": {"unique_id": "macro.secret.stored_proc__pi", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/snowflake_utils/stored_proc__pi.sql", "original_file_path": "macros/snowflake_utils/stored_proc__pi.sql", "name": "stored_proc__pi", "macro_sql": "{% macro stored_proc__pi() %}\n\n    {% set stored_proc_name %}\n        {{target.database}}.{{target.schema}}.sp_pi\n    {% endset %}\n    \n    {% set stored_proc_ddl_query %}\n        create or replace procedure {{stored_proc_name}}()\n        returns float not null\n        language javascript\n        as\n        $$\n            return 3.1415926;\n        $$\n        ;\n    {% endset %}\n\n    {% do run_query(stored_proc_ddl_query) %}\n    {% do log('Created stored proc:\\t' ~ stored_proc_name, True) %}\n\n    {# return the name of the stored procedure #}\n    {%- do return(stored_proc_name) %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.534613, "supported_languages": null}, "macro.secret.drop_empty_schemas": {"unique_id": "macro.secret.drop_empty_schemas", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/snowflake_utils/cleanup/drop_empty_schemas.sql", "original_file_path": "macros/snowflake_utils/cleanup/drop_empty_schemas.sql", "name": "drop_empty_schemas", "macro_sql": "{% macro drop_empty_schemas() %}\n\n  {% set cleanup_query %}\n\n      WITH \n      \n      ALL_SCHEMAS AS (\n        SELECT\n          CONCAT_WS('.', CATALOG_NAME, SCHEMA_NAME) AS SCHEMA_NAME\n        FROM \n          {{ target.database }}.INFORMATION_SCHEMA.SCHEMATA\n        WHERE \n          SCHEMA_NAME NOT IN ('INFORMATION_SCHEMA', 'PUBLIC')\n      ),\n\n      NON_EMPTY_SCHEMAS AS (\n        SELECT\n          DISTINCT CONCAT_WS('.', TABLE_CATALOG, TABLE_SCHEMA) AS SCHEMA_NAME\n        FROM \n          {{ target.database }}.INFORMATION_SCHEMA.TABLES\n        WHERE \n          TABLE_SCHEMA NOT IN ('INFORMATION_SCHEMA', 'PUBLIC')\n      ),\n\n      EMPTY_SCHEMAS AS (\n        SELECT * FROM ALL_SCHEMAS\n        MINUS\n        SELECT * FROM NON_EMPTY_SCHEMAS\n      )\n\n      SELECT \n        'DROP SCHEMA ' || SCHEMA_NAME || ';' as DROP_COMMANDS\n      FROM \n        EMPTY_SCHEMAS\n\n  {% endset %}\n\n    \n  {% set drop_commands = run_query(cleanup_query).columns[0].values() %}\n\n\n  {% if drop_commands %}\n    {% for drop_command in drop_commands %}\n      {% do log(drop_command, True) %}\n      {% do run_query(drop_command) %}\n    {% endfor %}\n  {% else %}\n    {% do log('No schemas to clean.', True) %}\n  {% endif %}\n  \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.536677, "supported_languages": null}, "macro.secret.drop_old_relations": {"unique_id": "macro.secret.drop_old_relations", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/snowflake_utils/cleanup/drop_old_relations.sql", "original_file_path": "macros/snowflake_utils/cleanup/drop_old_relations.sql", "name": "drop_old_relations", "macro_sql": "{% macro drop_old_relations(cutoff_in_hours) %}\n\n  {% set cleanup_query %}\n\n      WITH \n      \n      MODELS_TO_DROP AS (\n        SELECT\n          CASE \n            WHEN TABLE_TYPE = 'BASE TABLE' THEN 'TABLE'\n            WHEN TABLE_TYPE = 'VIEW' THEN 'VIEW'\n          END AS RELATION_TYPE,\n          CONCAT_WS('.', TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME) AS RELATION_NAME\n        FROM \n          {{ target.database }}.INFORMATION_SCHEMA.TABLES\n        WHERE \n          TABLE_SCHEMA NOT IN ('INFORMATION_SCHEMA', 'PUBLIC')\n          AND \n          LAST_ALTERED < DATEADD('HOUR', -{{ cutoff_in_hours }}, CURRENT_TIMESTAMP)\n      )\n\n      SELECT \n        'DROP ' || RELATION_TYPE || ' ' || RELATION_NAME || ';' as DROP_COMMANDS\n      FROM \n        MODELS_TO_DROP\n\n  {% endset %}\n    \n  {% set drop_commands = run_query(cleanup_query).columns[0].values() %}\n\n  {% if drop_commands %}\n    {% for drop_command in drop_commands %}\n      {% do log(drop_command, True) %}\n      {% do run_query(drop_command) %}\n    {% endfor %}\n  {% else %}\n    {% do log('No relations to clean.', True) %}\n  {% endif %}\n  \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.5386698, "supported_languages": null}, "macro.secret.drop_deprecated_tables": {"unique_id": "macro.secret.drop_deprecated_tables", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/snowflake_utils/cleanup/drop_deprecated_tables.sql", "original_file_path": "macros/snowflake_utils/cleanup/drop_deprecated_tables.sql", "name": "drop_deprecated_tables", "macro_sql": "{% macro drop_deprecated_tables(dry_run) %}\n\n    {% if execute %}\n\n        {% set current_models=[] %}\n\n        {% for node in graph.nodes.values()\n            | selectattr(\"resource_type\", \"in\", [\"model\", \"seed\", \"snapshot\"])%}\n            {% do current_models.append(node.name) %}\n        {% endfor %}\n\n    {% endif %}\n    \n    {% set cleanup_query %}\n        \n        with \n        models_to_drop as (\n            select\n                case\n                    when table_type = 'BASE TABLE' then 'TABLE'\n                    when table_type = 'VIEW' then 'VIEW'\n                end as relation_type,\n                concat_ws('.', table_catalog, table_schema, table_name) as relation_name\n            from\n                {{ target.database }}.information_schema.tables\n            where \n                table_schema ilike '{{ target.schema }}%'\n                and table_name not in\n                    (\n                        {%- for model in current_models -%}\n                            '{{ model.upper() }}'\n                            {%- if not loop.last -%},{% endif %}\n                        {%- endfor -%}\n                    )\n        )\n\n        select\n            'drop ' || relation_type || ' ' || relation_name || ';' as drop_commands\n        from\n            models_to_drop\n        -- intentionally exclude unhandled table_types, including 'external table`\n        where drop_commands is not null\n\n    {% endset %}\n\n    {% do log(cleanup_query, info=True) %}\n    \n    {% set drop_commands = run_query(cleanup_query).columns[0].values() %}\n    \n    {% if drop_commands %}\n        {% for drop_command in drop_commands %}\n\n            {% do log(drop_command, True) %}\n            {% if dry_run == false %}\n                {% do run_query(drop_command) %}\n                {% do log('Deprecated Tables Dropped.', True) %}\n            {% endif %}\n\n        {% endfor %}\n        \n        {% else %}\n        {% do log('No relations to clean.', True) %}\n\n    {% endif %}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.5432603, "supported_languages": null}, "macro.secret.clean_workspace": {"unique_id": "macro.secret.clean_workspace", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/snowflake_utils/cleanup/clean_workspace.sql", "original_file_path": "macros/snowflake_utils/cleanup/clean_workspace.sql", "name": "clean_workspace", "macro_sql": "{% macro clean_workspace(database=target.database, dry_run=True, schema_like=None, schema_not_like=None) %}\n    {%- set msg -%}\n        Starting clean_workspace...\n          database:        {{database}} \n          dry_run:         {{dry_run}} \n          schema_like:     {{schema_like}} \n          schema_not_like: {{schema_not_like}} \n    {%- endset -%}\n    {{ log(msg, info=True) }}\n\n\n    {% set get_drop_commands_query %}\n        SELECT\n            'DROP SCHEMA {{database}}.' || SCHEMA_NAME || ';' AS DROP_QUERY\n        FROM\n            {{database}}.INFORMATION_SCHEMA.SCHEMATA\n        WHERE\n            SCHEMA_NAME != 'INFORMATION_SCHEMA'\n        {%- if schema_like -%}\n            AND SCHEMA_NAME ILIKE '{{schema_like}}' \n        {%- endif -%}\n        {%- if schema_not_like -%}\n            AND NOT SCHEMA_NAME ILIKE '{{schema_not_like}}' \n        {%- endif -%}\n    {% endset %}\n\n\n    {{ log('\\nGenerating cleanup queries...\\n', info=True) }}\n    {% set drop_queries = run_query(get_drop_commands_query).columns[0].values() %}\n\n\n    {% for drop_query in drop_queries %}\n        {% if execute and not dry_run %}\n            {{ log('Dropping schema with command: ' ~ drop_query, info=True) }}\n            {% do run_query(drop_query) %}    \n        {% else %}\n            {{ log(drop_query, info=True) }}\n        {% endif %}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.546791, "supported_languages": null}, "macro.secret.create_or_replace_netflix_stage": {"unique_id": "macro.secret.create_or_replace_netflix_stage", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/snowflake_utils/stages/create_or_replace_netflix_stage.sql", "original_file_path": "macros/snowflake_utils/stages/create_or_replace_netflix_stage.sql", "name": "create_or_replace_netflix_stage", "macro_sql": "{% macro create_or_replace_netflix_stage(dry_run=True) %}\n\n    {# Configure here. You could modify this macro to make these params if you like. #}\n    {% set stage_db     = 'randy_pitcher_workspace_raw' %}\n    {% set stage_schema = 'netflix_loading' %}\n    {% set stage_name   = 'netflix_blob_stage' %}\n    {% set azure_url    = 'azure://snowflakestagedemo.blob.core.windows.net/netflix-snowflake-stage' %}\n    {% set sf_role      = 'randy_pitcher_workspace_admin' %}\n\n    {% set create_or_replace_query %}\n        USE ROLE {{sf_role}};\n\n        -- create the stage\n        create or replace stage {{stage_db}}.{{stage_schema}}.{{stage_name}} \n        url='{{azure_url}}'\n        FILE_FORMAT= (\n            TYPE='CSV'\n            SKIP_HEADER=1\n        );\n    {% endset %}\n\n    {% if dry_run %}\n        {% do log('Netflix stage creation dry run :\\n' ~ create_or_replace_query, True) %}\n    {% else %}\n        {% do run_query(create_or_replace_query) %}\n    {% endif %}\n\n    {# Always a good idea to explicitly jump back to the default role for the current environment #}\n    {% do run_query('USE ROLE ' ~ target.role) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.549186, "supported_languages": null}, "macro.secret.get_sources": {"unique_id": "macro.secret.get_sources", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/onsemi/_get_sources.sql", "original_file_path": "macros/onsemi/_get_sources.sql", "name": "get_sources", "macro_sql": "{% macro get_sources(database_name=target.database) %}\n\n  {#\n    Get all sources in your dbt project that are from `database_name`\n\n    Example input:\n    ---------------------------------------------------------------\n    {{ get_sources('raw') }}\n\n    Example output\n    ---------------------------------------------------------------\n    ['raw.jaffle_shop.customers', 'raw.jaffle_shop.orders', 'raw.stripe.payment']\n  #}\n  \n  {% set sources = [] -%}\n  {% if execute %}\n    {% for node in graph.sources.values() -%}\n      {%- if node.database == database_name -%}\n            {# \n          {%- do sources.append(node.relation_name) -%}\n            -- \"relation_name\":\"snowflake.account_usage.warehouse_load_history\",\n            -- \"database\":\"snowflake\",\n            -- \"schema\":\"account_usage\",\n            -- \"name\":\"warehouse_load_history\",\n            -- \"source_name\":\"snowflake_meta\",\n            #}\n          {%- do sources.append(node.schema ~ '.' ~ node.name) -%}\n      {%- endif -%}\n    {%- endfor %}\n  {% endif %}\n    {{ return(sources) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.55071, "supported_languages": null}, "macro.secret.edw_get_quoted_column_list_new": {"unique_id": "macro.secret.edw_get_quoted_column_list_new", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/onsemi/edw_get_quoted_column_list_new.sql", "original_file_path": "macros/onsemi/edw_get_quoted_column_list_new.sql", "name": "edw_get_quoted_column_list_new", "macro_sql": "{%- macro edw_get_quoted_column_list_new(param_object_name,param_exclude_column=[]) -%}\n    \n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(param_object_name) -%}\n    {%- set param_exclude_column = param_exclude_column | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in param_exclude_column -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.5525396, "supported_languages": null}, "macro.secret.edw_get_md5_column_list": {"unique_id": "macro.secret.edw_get_md5_column_list", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/onsemi/edw_get_md5_column_list.sql", "original_file_path": "macros/onsemi/edw_get_md5_column_list.sql", "name": "edw_get_md5_column_list", "macro_sql": "{% macro edw_get_md5_column_list(param_object_name,param_exclude_column) -%}\n        {%- set column_list_quoted = [] -%}\n        {%- set md5_list = [] -%}\n        {%- set table_desc =  get_columns_in_relation(param_object_name) -%}\n        \n        {% for column in table_desc %}\n                {{ column_list_quoted.append(column.name) }}\n        {% endfor %}\n\n        {% for col in param_exclude_column -%}\n                {%- if col in column_list_quoted -%}\n                        {{ column_list_quoted.remove(col) }}\n                {% endif %}\n        {% endfor %}\n\n        {% for v_column_name  in column_list_quoted %}\n            {%- set v_col_name_add = \"'col\"+ loop.index|string+\"',\" -%}\n            {{ md5_list.append(v_col_name_add + v_column_name) }}\n        {% endfor %}\n\n        {%- set dest_cols_list = md5_list | join(', ') -%}\n        {%- set md5_column = 'md5(object_construct ('+dest_cols_list +')::string ) as BIW_MD5_KEY' -%}\n    {{ return(md5_column) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.5552304, "supported_languages": null}, "macro.secret.one_time_load": {"unique_id": "macro.secret.one_time_load", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/onsemi/one_time_load.sql", "original_file_path": "macros/onsemi/one_time_load.sql", "name": "one_time_load", "macro_sql": "{% macro one_time_load(from) %}\n    \n    \n    {%- set union_relations = dbt_utils.union_relations(relations=[from,ref('seed__negative_key')]) -%}\n    {%- set star = dbt_utils.star(from) -%}    \n\n    -- one time load with an added -1 for product key\n    union_relations as ({{ union_relations }}),\n    one_time_load as (\n        select\n            -- using this to only select columns from the one_time_load_table, not the extras from other keys\n            {{ star }}\n        from union_relations\n    ),\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations", "macro.dbt_utils.star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.556378, "supported_languages": null}, "macro.secret.edw_get_column_list": {"unique_id": "macro.secret.edw_get_column_list", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/onsemi/edw_get_column_list.sql", "original_file_path": "macros/onsemi/edw_get_column_list.sql", "name": "edw_get_column_list", "macro_sql": "{% macro edw_get_column_list(param_object_name,param_exclude_column) -%}\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n        {%- if param_object_name.name == 'request' -%}\n                {{ return([]) }}\n        {% else %}\n                {%- set column_list_quoted = [] -%}\n                {%- set table_desc =  get_columns_in_relation(param_object_name) -%}\n                \n                {% for column in table_desc %}\n                        {{ column_list_quoted.append(column.name) }}\n                {% endfor %}\n\n                {% for col in param_exclude_column -%}\n                        {%- if col in column_list_quoted -%}\n                                {{ column_list_quoted.remove(col) }}\n                        {% endif %}\n                {% endfor %}\n\n                {%- set dest_cols_list = column_list_quoted | join(', ') -%}\n\n        {{ return(dest_cols_list) }}\n        {%- endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.559027, "supported_languages": null}, "macro.secret.edw_get_quoted_column_list": {"unique_id": "macro.secret.edw_get_quoted_column_list", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/onsemi/edw_get_quoted_column_list.sql", "original_file_path": "macros/onsemi/edw_get_quoted_column_list.sql", "name": "edw_get_quoted_column_list", "macro_sql": "{% macro edw_get_quoted_column_list(param_object_name,param_exclude_column) -%}\n\n        {%- set column_list_quoted = [] -%}\n        {%- set table_desc =  get_columns_in_relation(param_object_name) -%}\n        \n        {% for column in table_desc %}\n                {{ column_list_quoted.append(column.name) }}\n        {% endfor %}\n\n        {% for col in param_exclude_column -%}\n                {%- if col in column_list_quoted -%}\n                        {{ column_list_quoted.remove(col) }}\n                {% endif %}\n        {% endfor %}\n\n    {{ return(column_list_quoted) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.5607088, "supported_languages": null}, "macro.secret.check_against_information_schema": {"unique_id": "macro.secret.check_against_information_schema", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/onsemi/check_against_information_schema.sql", "original_file_path": "macros/onsemi/check_against_information_schema.sql", "name": "check_against_information_schema", "macro_sql": "{% macro check_against_information_schema(target_sources='raw', target_database='raw') %}\n    {% set sources=get_sources(target_sources) %}\n\n    {%- set information_schema_query %}\n        with\n        information_schema_relations as (\n            select\n                concat_ws('.', table_schema, table_name) as relation_name\n            from {{ target_database }}.information_schema.tables \n            {# -- where table_schema ilike '{{ target_schema }}%' #}\n        )\n\n        {# get count of sources in target database #}\n        select count(*) from information_schema_relations\n        where\n        relation_name in\n            (\n                {%- for source in sources -%}\n                    '{{ source.upper() }}'\n                    {%- if not loop.last -%},{% endif %}\n                {%- endfor -%}\n            )\n    {% endset %}\n\n    {%- set results = run_query(information_schema_query) %}\n\n    {% if execute %}\n        {% set information_schema_count = results.columns[0].values()[0] %}\n    {% else %}\n        {% set information_schema_count = [] %}\n    {% endif %}\n\n{# If the count of current sources matches count in target database, check passes #}\n    {% if sources|length == information_schema_count %}\n        {{ log(\"Test passed: Found \" ~ sources|length ~ \" sources from the `\" ~ target_sources ~ \"` database and \" ~ information_schema_count ~ \" matching sources in the `\" ~ target_database ~ \"` database\", info=True) }}\n\n    {% else %}\n{# If the count of sources does not match in both databases, check fails #}\n        {%- set find_missing_sources_query %}\n            with\n            information_schema_relations as (\n                select\n                    concat_ws('.', table_schema, table_name) as relation_name\n                from {{ target_database }}.information_schema.tables \n                {# -- where table_schema ilike '{{ target_schema }}%' #}\n            )\n            select relation_name from information_schema_relations\n            where\n            relation_name in\n                (\n                    {%- for source in sources -%}\n                        '{{ source.upper() }}'\n                        {%- if not loop.last -%},{% endif %}\n                    {%- endfor -%}\n                )\n        {% endset %}\n\n        {%- set results = run_query(find_missing_sources_query) %}\n\n        {% if execute %}\n            {% set found_sources = results.columns[0].values() %}\n\n        {# check if current sources are found within target sources, if not, list them #}\n        {% set missing_sources=[] %}\n        {%- for source in sources -%}\n            {% if source.upper() not in found_sources %}\n                {% do missing_sources.append(source) %}\n            {% endif %}\n        {%- endfor -%}\n\n        {{ log(\"Test FAILED: Missing sources in target environment: \" ~ missing_sources , info=True) }}\n        {{ missing_sources }}\n        \n        {{ exceptions.raise_compiler_error(\"Sources in `\" ~ target_sources ~ \"` database do not exist in the `\" ~ target_database ~ \"` database.\") if execute }}\n        {% else %}\n            {{ log(\"Test FAILED\", info=True) }}\n        {% endif %}\n\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.secret.get_sources", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.566443, "supported_languages": null}, "macro.secret.v_sql_update_macro": {"unique_id": "macro.secret.v_sql_update_macro", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/onsemi/v_sql_update_macro.sql", "original_file_path": "macros/onsemi/v_sql_update_macro.sql", "name": "v_sql_update_macro", "macro_sql": "{% macro v_sql_update_macro(var_value=4) %}\n    \n        update DEVELOPMENT.dbt_pkearns.seed__sample_data\n        set deleted={{ var_value }}\n        where id not in (\n            select id from {{ ref('seed__sample_data_status') }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.5671968, "supported_languages": null}, "macro.secret.edw_get_column_list_new": {"unique_id": "macro.secret.edw_get_column_list_new", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/onsemi/edw_get_column_list_new.sql", "original_file_path": "macros/onsemi/edw_get_column_list_new.sql", "name": "edw_get_column_list_new", "macro_sql": "{%- macro edw_get_column_list_new(param_object_name,param_exclude_column=[]) -%}\n    {%- set column_list_quoted = edw_get_quoted_column_list_new(param_object_name,param_exclude_column) -%}\n    {%- set dest_cols_list = column_list_quoted | join(', ') -%}\n    {{ return(dest_cols_list) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.secret.edw_get_quoted_column_list_new"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.568152, "supported_languages": null}, "macro.secret.edw_get_md5_column_list_new": {"unique_id": "macro.secret.edw_get_md5_column_list_new", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/onsemi/edw_get_md5_column_list_new.sql", "original_file_path": "macros/onsemi/edw_get_md5_column_list_new.sql", "name": "edw_get_md5_column_list_new", "macro_sql": "{% macro edw_get_md5_column_list_new(param_object_name,param_exclude_column=[]) -%}\n    {%- set column_list_quoted = edw_get_quoted_column_list_new(param_object_name,param_exclude_column) -%}\n    {%- set md5_list = [] -%}\n\n    {% for v_column_name  in column_list_quoted %}\n        {%- set v_col_name_add = \"'col\"+ loop.index|string+\"',\" -%}\n        {% do md5_list.append(v_col_name_add + v_column_name) %}\n    {% endfor %}\n\n        {%- set dest_cols_list = md5_list | join(', ') -%}\n        {%- set md5_column = 'md5(object_construct ('+dest_cols_list +')::string )' -%}\n\n    {{ return(md5_column) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.secret.edw_get_quoted_column_list_new"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.5698645, "supported_languages": null}, "macro.secret.v_sql_ins_queue_batch": {"unique_id": "macro.secret.v_sql_ins_queue_batch", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/onsemi/batch/v_sql_ins_queue_batch.sql", "original_file_path": "macros/onsemi/batch/v_sql_ins_queue_batch.sql", "name": "v_sql_ins_queue_batch", "macro_sql": "{% macro v_sql_ins_queue_batch(v_dbt_job_name, ts=current_timestamp) %}\n    \n  {% set query %}\n    CALL UTILITY.EDW_BATCH_QUEUE_PROC('\"~{{ v_dbt_job_name }}~\"' ,{{ ts }})\n  {% endset %}\n\n  {% do run_query(query) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.5707736, "supported_languages": null}, "macro.secret.v_sql_upd_failed": {"unique_id": "macro.secret.v_sql_upd_failed", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/onsemi/batch/v_sql_upd_failed.sql", "original_file_path": "macros/onsemi/batch/v_sql_upd_failed.sql", "name": "v_sql_upd_failed", "macro_sql": "{% macro v_sql_upd_failed(v_dbt_job_name) %}\n    \n  {% set query %}\n    CALL UTILITY.EDW_BATCH_FAILED_PROC('\"~{{ v_dbt_job_name }}~\"')\n  {% endset %}\n\n  {% do run_query(query) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.571565, "supported_languages": null}, "macro.secret.create_run_end_results_table": {"unique_id": "macro.secret.create_run_end_results_table", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/onsemi/batch/create_run_end_results.sql", "original_file_path": "macros/onsemi/batch/create_run_end_results.sql", "name": "create_run_end_results_table", "macro_sql": "{% macro create_run_end_results_table() %}\n\n  {{ log('Creating `dbt_meta__run_end_results` table if not exists.', info=True) }}\n\n  create table if not exists {{ target.database }}.{{ target.schema }}.dbt_meta__run_end_results (\n      run_invocation_id text not null,\n      model_identifier text not null,\n      model_name text not null,\n      relation_name text not null,\n      materialization text not null,\n      model_status text not null,\n      model_message text not null,\n      updated_at timestamp not null\n  );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.57248, "supported_languages": null}, "macro.secret.v_sql_upd_run_batch": {"unique_id": "macro.secret.v_sql_upd_run_batch", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/onsemi/batch/v_sql_upd_run_batch.sql", "original_file_path": "macros/onsemi/batch/v_sql_upd_run_batch.sql", "name": "v_sql_upd_run_batch", "macro_sql": "{% macro v_sql_upd_run_batch(v_dbt_job_name) %}\n    \n  {% set query %}\n    CALL UTILITY.EDW_BATCH_RUNNING_PROC('\"~{{ v_dbt_job_name }}~\"')\n  {% endset %}\n\n  {% do run_query(query) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.5732718, "supported_languages": null}, "macro.secret.v_sql_get_batch": {"unique_id": "macro.secret.v_sql_get_batch", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/onsemi/batch/v_sql_get_batch.sql", "original_file_path": "macros/onsemi/batch/v_sql_get_batch.sql", "name": "v_sql_get_batch", "macro_sql": "{% macro v_sql_get_batch(v_dbt_job_name) -%}\n\n    {%- set query -%}\n        SELECT\n            NVL(MAX(BATCH_ID),-1001) as V_BIW_BATCH_ID\n        FROM\n            -- target db and schema to prevent pulling from prod if run in dev\n            {{ target.database }}.{{ target.schema }}.edw_process_batch_ctl as CTL\n            INNER JOIN\n            {{ target.database }}.{{ target.schema }}.edw_process_info as INFO\n            ON CTL.PROCESS_ID = INFO.PROCESS_ID     \n            AND INFO.PROCESS_NAME= '{{ v_dbt_job_name }}'\n            AND CTL.BATCH_STATUS='R' \n    {%- endset -%}\n\n    {# -- Prevent querying of db in parsing mode #}\n    {%- if execute -%}\n        {%- set results = run_query(query) -%}\n        {%- set output = results.columns[0].values()[0] -%}\n    {%- endif -%}\n\n    {{ output }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.5748968, "supported_languages": null}, "macro.secret.v_sql_get_watermark": {"unique_id": "macro.secret.v_sql_get_watermark", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/onsemi/batch/v_sql_get_watermark.sql", "original_file_path": "macros/onsemi/batch/v_sql_get_watermark.sql", "name": "v_sql_get_watermark", "macro_sql": "{% macro v_sql_get_watermark(V_BIW_BATCH_ID) -%}\n\n   {%- call statement('get_edw_watermark', fetch_result=true) %}\n\n        SELECT\n            LWM_DTTM,\n            HWM_DTTM,\n            START_DTTM\n        FROM\n            -- target db and schema to prevent pulling from prod if run in dev\n            {{ target.database }}.{{ target.schema }}.edw_process_batch_ctl as CTL\n        WHERE BATCH_ID = {{ V_BIW_BATCH_ID }}\n        \n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_edw_watermark') -%}\n    {%- set default = [] -%}\n\n    {%- if value_list and value_list['data'] -%}\n        -- TODO: could probably find a more elegant way to do this\n        {%- set V_LWM = value_list['data'][0][0] -%}\n        {%- set V_HWM = value_list['data'][0][1] -%}\n        {%- set V_START_DTTM = value_list['data'][0][2] -%}\n\n        {{ return([V_LWM, V_HWM, V_START_DTTM]) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.5773258, "supported_languages": null}, "macro.secret.v_sql_upd_success": {"unique_id": "macro.secret.v_sql_upd_success", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/onsemi/batch/v_sql_upd_success.sql", "original_file_path": "macros/onsemi/batch/v_sql_upd_success.sql", "name": "v_sql_upd_success", "macro_sql": "{% macro v_sql_upd_success(v_dbt_job_name) %}\n    \n  {% set query %}\n    CALL UTILITY.EDW_BATCH_SUCCESS_PROC('\"~{{ v_dbt_job_name }}~\"')\n  {% endset %}\n\n  {% do run_query(query) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.5781484, "supported_languages": null}, "macro.secret.log_run_end_results": {"unique_id": "macro.secret.log_run_end_results", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/onsemi/batch/log_run_end_results.sql", "original_file_path": "macros/onsemi/batch/log_run_end_results.sql", "name": "log_run_end_results", "macro_sql": "{% macro log_run_end_results(results) %}\n\n    {% if execute %}\n    \n        {% do log('Recording model run results in `dbt_meta__run_end_results`.', info=True) %}\n\n        {% for res in results %}\n        \n            {# \n            /*\n              Because results messages can contain single quotes in the error message, we\n              replace them with double quotes to avoid errors during the insert.\n              Note: to see all results returned, test run on 1 model with:\n              log(res, info=True)\n            */ \n            #}\n\n            {% if res.message %}\n                {% set tidy_message = res.message.replace(\"'\", '\"') %}\n            {% else %}\n                {% set tidy_message = '' %}\n            {% endif %}\n            \n            {% set query -%}\n                insert into {{ target.database }}.{{ target.schema }}.dbt_meta__run_end_results values (\n                    '{{ invocation_id }}',\n                    '{{ res.node.unique_id }}',\n                    '{{ res.node.name }}',\n                    '{{ res.node.relation_name }}',\n                    '{{ res.node.config.materialized }}',\n                    '{{ res.status }}', \n                    '{{ tidy_message }}',\n                    current_timestamp()\n                );\n            {%- endset %}\n            {% do run_query(query) %}\n\n            \n        {% endfor %}\n        \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.5811658, "supported_languages": null}, "macro.secret.generate_schema_name": {"unique_id": "macro.secret.generate_schema_name", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/config/generate_schema_name.sql", "original_file_path": "macros/config/generate_schema_name.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n    {%- set default_schema = target.schema -%}\n    \n    {% set log_msg='getting custom schema:\\ntarget_name:' ~ target.name ~ '\\ncustom_schema_name:' ~ custom_schema_name %}\n    {% do log(log_msg, False) %}\n\n    {%- if custom_schema_name -%}\n        {{ custom_schema_name if 'prod' in target.name.lower() else target.schema ~ '__' ~ custom_schema_name }}\n    {%- else -%}\n        {{ default_schema }} \n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.5826204, "supported_languages": null}, "macro.secret.generate_database_name": {"unique_id": "macro.secret.generate_database_name", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/config/generate_database_name.sql", "original_file_path": "macros/config/generate_database_name.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name, node) -%}\n    {%- set default_database = target.database -%}\n    \n    {% set log_msg='getting custom database:\\ntarget_name:' ~ target.name ~ '\\ncustom_database_name:' ~ custom_database_name %}\n    {% do log(log_msg, False) %}\n\n    {%- if custom_database_name is none -%}\n        {{ default_database }} \n    {%- else -%}\n        {{ custom_database_name }}_{{ target.name | trim }}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.5839946, "supported_languages": null}, "macro.secret.create_augmented_snapshot": {"unique_id": "macro.secret.create_augmented_snapshot", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/snapshots/create_augmented_snapshot.sql", "original_file_path": "macros/snapshots/create_augmented_snapshot.sql", "name": "create_augmented_snapshot", "macro_sql": "{% macro create_augmented_snapshot(snapshot_table, table_key) %}\n\n    {% if 'snowflake' == target.type %}\n        {{ snowflake__create_augmented_snapshot(snapshot_table, table_key) }}\n    {% elif 'bigquery' == target.type %}\n        {{ bigquery__create_augmented_snapshot(snapshot_table, table_key) }}\n    {% else %}\n        {% do log('Target type \"' ~ target.type ~ '\" not supported by the create_augmented_snapshot macro at this time', True) %}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.secret.snowflake__create_augmented_snapshot", "macro.secret.bigquery__create_augmented_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.5854044, "supported_languages": null}, "macro.secret.delete_snapshots": {"unique_id": "macro.secret.delete_snapshots", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/snapshots/delete_snapshots.sql", "original_file_path": "macros/snapshots/delete_snapshots.sql", "name": "delete_snapshots", "macro_sql": "{% macro delete_snapshots() %}\n    {#\n    Run the following dbt command to delete snapshots in this project:\n        dbt run-operation delete_snapshots\n    #}\n\n    {% set query = 'drop table ' ~target.database~'.'~target.schema~'.hard_deletes__snapshot' %}\n\n    {% if execute %}\n        {% do run_query(query) %}\n        {% do log('Cleaned up snapshots with following query:\\n'~query, True) %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.5865889, "supported_languages": null}, "macro.secret.bigquery__create_augmented_snapshot": {"unique_id": "macro.secret.bigquery__create_augmented_snapshot", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/snapshots/bigquery/bigquery__create_augmented_snapshot.sql", "original_file_path": "macros/snapshots/bigquery/bigquery__create_augmented_snapshot.sql", "name": "bigquery__create_augmented_snapshot", "macro_sql": "{% macro bigquery__create_augmented_snapshot(snapshot_table, table_key) %}\n\n    {% set distant_past       =\"TIMESTAMP('1900-01-01 00:00:00+00')\"%}\n    {% set distant_future     =\"TIMESTAMP('9999-12-31 23:59:59+00')\"%}\n    {% set dbt_valid_from_min =\n        'min(dbt_valid_from) over (\n            partition by ' ~ table_key ~ ' order by dbt_valid_from rows between unbounded preceding and unbounded following\n        )'\n    %}\n\n\n    with\n\n    snapshot_with_distant_past_and_distant_future_raw as (\n        select\n            *,\n\n            if(\n                dbt_valid_from = {{ dbt_valid_from_min }},\n                {{ distant_past }},\n                dbt_valid_from\n            ) as valid_from_with_distant_past,\n\n            if(\n                dbt_valid_to is null,\n                {{ distant_future }},\n                dbt_valid_to\n            ) as valid_to_with_distant_future\n\n        from {{ snapshot_table }}\n    ),\n\n\n    snapshot_with_distant_past_and_distant_future as (\n        select \n            {{ dbt_utils.star(snapshot_table) }},\n            valid_from_with_distant_past,\n            valid_to_with_distant_future\n        \n        from snapshot_with_distant_past_and_distant_future_raw\n    ),\n\n\n    snapshot_with_is_deleted as (\n        select \n            *,\n            first_value(dbt_valid_to) over (\n                partition by {{table_key}} order by dbt_valid_to asc rows between unbounded preceding and unbounded following\n            ) is not null as is_deleted\n        \n        from snapshot_with_distant_past_and_distant_future\n    ),\n\n    snapshot_with_current_values as (\n        select \n            *,\n\n            if(\n                is_deleted or (dbt_valid_to is null),\n                true,\n                false\n            ) as is_current\n        \n        from snapshot_with_is_deleted\n    )\n\n    select * from snapshot_with_current_values\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.5888617, "supported_languages": null}, "macro.secret.snowflake__create_augmented_snapshot": {"unique_id": "macro.secret.snowflake__create_augmented_snapshot", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/snapshots/snowflake/snowflake__create_augmented_snapshot.sql", "original_file_path": "macros/snapshots/snowflake/snowflake__create_augmented_snapshot.sql", "name": "snowflake__create_augmented_snapshot", "macro_sql": "{% macro snowflake__create_augmented_snapshot(snapshot_table, table_key) %}\n\n    {% set distant_past       =\"TO_TIMESTAMP('1900-01-01 00:00:00+00')\"%}\n    {% set distant_future     =\"TO_TIMESTAMP('9999-12-31 23:59:59+00')\"%}\n    {% set dbt_valid_from_min =\n        'min(dbt_valid_from) over (\n            partition by ' ~ table_key ~ ' order by dbt_valid_from rows between unbounded preceding and unbounded following\n        )'\n    %}\n\n\n    with\n\n    snapshot_with_distant_past_and_distant_future_raw as (\n        select\n            *,\n\n            iff(\n                dbt_valid_from = {{ dbt_valid_from_min }},\n                {{ distant_past }},\n                dbt_valid_from\n            ) as valid_from_with_distant_past,\n\n            iff(\n                dbt_valid_to is null,\n                {{ distant_future }},\n                dbt_valid_to\n            ) as valid_to_with_distant_future\n\n        from {{ snapshot_table }}\n    ),\n\n\n    snapshot_with_distant_past_and_distant_future as (\n        select \n            {{ dbt_utils.star(snapshot_table) }},\n            valid_from_with_distant_past,\n            valid_to_with_distant_future\n        \n        from snapshot_with_distant_past_and_distant_future_raw\n    ),\n\n\n    snapshot_with_is_deleted as (\n        select \n            *,\n            first_value(dbt_valid_to) over (\n                partition by {{table_key}} order by dbt_valid_to asc rows between unbounded preceding and unbounded following\n            ) is not null as is_deleted\n        \n        from snapshot_with_distant_past_and_distant_future\n    ),\n\n    snapshot_with_current_values as (\n        select \n            *,\n\n            iff(\n                is_deleted or (dbt_valid_to is null),\n                true,\n                false\n            ) as is_current\n        \n        from snapshot_with_is_deleted\n    )\n\n    select * from snapshot_with_current_values\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.591128, "supported_languages": null}, "macro.secret.generate_source_yml_for_database": {"unique_id": "macro.secret.generate_source_yml_for_database", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "macros/codegen/generate_source_yml_for_database.sql", "original_file_path": "macros/codegen/generate_source_yml_for_database.sql", "name": "generate_source_yml_for_database", "macro_sql": "{% macro generate_source_yml_for_database(db='RAW', generate_cols=True) %}\n\n    {# Get schemas (technically, schemata is the plural of schema - but I am a rebel) #}\n    {% set schemas = run_query(\"select schema_name from \" ~ db ~ \".information_schema.schemata where schema_name != 'INFORMATION_SCHEMA'\").columns[0].values() %}\n\n    {# Generate source yaml for each database. There are duplicate version entries for now but I would like to fix this in the future. For now, just buck up and clean the text by hand #}\n    {% for schema in schemas %}\n        {{ codegen.generate_source(schema_name=schema, database_name=db, generate_columns=generate_cols) }}\n        {% do log('\\n---\\n\\n', true) %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.codegen.generate_source"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.5926697, "supported_languages": null}, "macro.dbt_snowflake.snowflake__copy_grants": {"unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "name": "snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.5935402, "supported_languages": null}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "name": "snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.5938077, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog": {"unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.595778, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set transient = config.get('transient', default=true) -%}\n    {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n    {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n    {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n    {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n      {%- set cluster_by_keys = [cluster_by_keys] -%}\n    {%- endif -%}\n    {%- if cluster_by_keys is not none -%}\n      {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n    {% else %}\n      {%- set cluster_by_string = none -%}\n    {%- endif -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n        create or replace {% if temporary -%}\n          temporary\n        {%- elif transient -%}\n          transient\n        {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n        (\n          {%- if cluster_by_string is not none -%}\n            select * from(\n              {{ compiled_code }}\n              ) order by ({{ cluster_by_string }})\n          {%- else -%}\n            {{ compiled_code }}\n          {%- endif %}\n        );\n      {% if cluster_by_string is not none and not temporary -%}\n        alter table {{relation}} cluster by ({{cluster_by_string}});\n      {%- endif -%}\n      {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n        alter table {{relation}} resume recluster;\n      {%- endif -%}\n\n  {%- elif language == 'python' -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation, temporary=temporary) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.617027, "supported_languages": null}, "macro.dbt_snowflake.get_column_comment_sql": {"unique_id": "macro.dbt_snowflake.get_column_comment_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6185045, "supported_languages": null}, "macro.dbt_snowflake.get_persist_docs_column_list": {"unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6190994, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.620645, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6222804, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_schemas": {"unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6234944, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6246252, "supported_languages": null}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6253176, "supported_languages": null}, "macro.dbt_snowflake.snowflake__rename_relation": {"unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6257417, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_type": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6262927, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6267283, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6277826, "supported_languages": null}, "macro.dbt_snowflake.get_current_query_tag": {"unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6282015, "supported_languages": null}, "macro.dbt_snowflake.set_query_tag": {"unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6285634, "supported_languages": null}, "macro.dbt_snowflake.snowflake__set_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6295583, "supported_languages": null}, "macro.dbt_snowflake.unset_query_tag": {"unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6299608, "supported_languages": null}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6309965, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6327655, "supported_languages": null}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6332486, "supported_languages": null}, "macro.dbt_snowflake.snowflake__truncate_relation": {"unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6338022, "supported_languages": null}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6381342, "supported_languages": null}, "macro.dbt_snowflake.materialization_seed_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.638803, "supported_languages": ["sql"]}, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n\n  /* {#\n       If we are running multiple statements (DELETE + INSERT),\n       we must first save the model query results as a temporary table\n       in order to guarantee consistent inputs to both statements.\n\n       If we are running a single statement (MERGE or INSERT alone),\n       we can save the model query definition as a view instead,\n       for faster overall incremental processing.\n  #} */\n\n  {% if language == 'sql' and (strategy in ('default', 'append', 'merge') or (unique_key is none)) %}\n    {{ return('view') }}\n  {% else %}  {#--  play it safe -- #}\n    {{ return('table') }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6415536, "supported_languages": null}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n  {% elif full_refresh_mode %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ create_view_as(tmp_relation, compiled_code) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.create_view_as", "macro.dbt.process_schema_changes", "macro.dbt.drop_relation_if_exists", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6483738, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6487613, "supported_languages": null}, "macro.dbt_snowflake.materialization_test_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6497443, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.650739, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.653227, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6538332, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6543965, "supported_languages": null}, "macro.dbt_snowflake.materialization_table_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6591113, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.py_write_table": {"unique_id": "macro.dbt_snowflake.py_write_table", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation, temporary=False) %}\n{{ compiled_code }}\ndef materialize(session, df, target_relation):\n    # make sure pandas exists\n    import importlib.util\n    package_name = 'pandas'\n    if importlib.util.find_spec(package_name):\n        import pandas\n        if isinstance(df, pandas.core.frame.DataFrame):\n          # session.write_pandas does not have overwrite function\n          df = session.createDataFrame(df)\n    df.write.mode(\"overwrite\").save_as_table(\"{{ target_relation }}\", create_temp_table={{temporary}})\n\ndef main(session):\n    dbt = dbtObj(session.table)\n    df = model(dbt, session)\n    materialize(session, df, dbt.this)\n    return \"OK\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6595871, "supported_languages": null}, "macro.dbt_snowflake.py_script_comment": {"unique_id": "macro.dbt_snowflake.py_script_comment", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n{%endmacro%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6598077, "supported_languages": null}, "macro.dbt_snowflake.materialization_view_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6611795, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6618333, "supported_languages": null}, "macro.dbt_snowflake.snowflake__safe_cast": {"unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6624484, "supported_languages": null}, "macro.dbt_snowflake.snowflake__array_construct": {"unique_id": "macro.dbt_snowflake.snowflake__array_construct", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "name": "snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6630728, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6638324, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.664256, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.664498, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6647341, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6650248, "supported_languages": null}, "macro.dbt_snowflake.snowflake__right": {"unique_id": "macro.dbt_snowflake.snowflake__right", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6657407, "supported_languages": null}, "macro.dbt_snowflake.snowflake__bool_or": {"unique_id": "macro.dbt_snowflake.snowflake__bool_or", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.666308, "supported_languages": null}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6696377, "supported_languages": null}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6708515, "supported_languages": null}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6714845, "supported_languages": null}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6747272, "supported_languages": null}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6773994, "supported_languages": null}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6789987, "supported_languages": null}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6795256, "supported_languages": null}, "macro.dbt.copy_grants": {"unique_id": "macro.dbt.copy_grants", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6826108, "supported_languages": null}, "macro.dbt.default__copy_grants": {"unique_id": "macro.dbt.default__copy_grants", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6829073, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6833017, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.683566, "supported_languages": null}, "macro.dbt.should_revoke": {"unique_id": "macro.dbt.should_revoke", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6843624, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"unique_id": "macro.dbt.get_show_grant_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.684775, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"unique_id": "macro.dbt.default__get_show_grant_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6850214, "supported_languages": null}, "macro.dbt.get_grant_sql": {"unique_id": "macro.dbt.get_grant_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.685535, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"unique_id": "macro.dbt.default__get_grant_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.685954, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"unique_id": "macro.dbt.get_revoke_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6864383, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"unique_id": "macro.dbt.default__get_revoke_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.686856, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"unique_id": "macro.dbt.get_dcl_statement_list", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6873336, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"unique_id": "macro.dbt.default__get_dcl_statement_list", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6887488, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"unique_id": "macro.dbt.call_dcl_statements", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.689165, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"unique_id": "macro.dbt.default__call_dcl_statements", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6896977, "supported_languages": null}, "macro.dbt.apply_grants": {"unique_id": "macro.dbt.apply_grants", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.690318, "supported_languages": null}, "macro.dbt.default__apply_grants": {"unique_id": "macro.dbt.default__apply_grants", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6927545, "supported_languages": null}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.693832, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6947415, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6976607, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6980226, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.698709, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.699132, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.6998518, "supported_languages": null}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.700393, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7016678, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7022204, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7038972, "supported_languages": null}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.70504, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7053714, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7056882, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7059476, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"unique_id": "macro.dbt.current_timestamp_backcompat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7063348, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"unique_id": "macro.dbt.default__current_timestamp_backcompat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7065208, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7068799, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7072444, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"unique_id": "macro.dbt.make_intermediate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.712628, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"unique_id": "macro.dbt.default__make_intermediate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.713146, "supported_languages": null}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.713619, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7142472, "supported_languages": null}, "macro.dbt.make_backup_relation": {"unique_id": "macro.dbt.make_backup_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7147634, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"unique_id": "macro.dbt.default__make_backup_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7154377, "supported_languages": null}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7158334, "supported_languages": null}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7163594, "supported_languages": null}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7167635, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7171226, "supported_languages": null}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7175536, "supported_languages": null}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7182078, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7187378, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7199287, "supported_languages": null}, "macro.dbt.load_cached_relation": {"unique_id": "macro.dbt.load_cached_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7204287, "supported_languages": null}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7207437, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.721163, "supported_languages": null}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7221696, "supported_languages": null}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7226145, "supported_languages": null}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7229826, "supported_languages": null}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7233865, "supported_languages": null}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7248476, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7252238, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7256622, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7260573, "supported_languages": null}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.726806, "supported_languages": null}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.727814, "supported_languages": null}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7304668, "supported_languages": null}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.731043, "supported_languages": null}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7314434, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7318003, "supported_languages": null}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7322109, "supported_languages": null}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.732745, "supported_languages": null}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.733182, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7338557, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7342975, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7346673, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7364883, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7368746, "supported_languages": null}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7372925, "supported_languages": null}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.738233, "supported_languages": null}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7393942, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7399917, "supported_languages": null}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7412639, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7418833, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.74253, "supported_languages": null}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7435424, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7444205, "supported_languages": null}, "macro.dbt.build_ref_function": {"unique_id": "macro.dbt.build_ref_function", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7476919, "supported_languages": null}, "macro.dbt.build_source_function": {"unique_id": "macro.dbt.build_source_function", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.748889, "supported_languages": null}, "macro.dbt.build_config_dict": {"unique_id": "macro.dbt.build_config_dict", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {%- for key in model.config.config_keys_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == 'language' -%}\n          {%- set value = 'python' -%}\n        {%- endif -%}\n        {%- set value = model.config[key] -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7498763, "supported_languages": null}, "macro.dbt.py_script_postfix": {"unique_id": "macro.dbt.py_script_postfix", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = '{{ this.database }}'\n    schema = '{{ this.schema }}'\n    identifier = '{{ this.identifier }}'\n    def __repr__(self):\n        return '{{ this }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7511218, "supported_languages": null}, "macro.dbt.py_script_comment": {"unique_id": "macro.dbt.py_script_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.751306, "supported_languages": null}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7537384, "supported_languages": null}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.754187, "supported_languages": null}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7545085, "supported_languages": null}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.754821, "supported_languages": null}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.755159, "supported_languages": null}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7561944, "supported_languages": null}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7568607, "supported_languages": null}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7575152, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7641146, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.771698, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7736285, "supported_languages": null}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7741485, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7751775, "supported_languages": null}, "macro.dbt.get_csv_sql": {"unique_id": "macro.dbt.get_csv_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7756228, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"unique_id": "macro.dbt.default__get_csv_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7759976, "supported_languages": null}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7764077, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7767355, "supported_languages": null}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7771082, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7774172, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7784848, "supported_languages": null}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7789023, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7816453, "supported_languages": null}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7859173, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7870321, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7876837, "supported_languages": null}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.788686, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.789554, "supported_languages": null}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7904387, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.790923, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7940896, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.795055, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7954156, "supported_languages": null}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7958088, "supported_languages": null}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.7963877, "supported_languages": null}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.8016827, "supported_languages": ["sql"]}, "macro.dbt.get_incremental_append_sql": {"unique_id": "macro.dbt.get_incremental_append_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.803457, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"unique_id": "macro.dbt.default__get_incremental_append_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.8040054, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"unique_id": "macro.dbt.get_incremental_delete_insert_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.8044214, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.8049777, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"unique_id": "macro.dbt.get_incremental_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.8053782, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"unique_id": "macro.dbt.default__get_incremental_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.8059382, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.8063564, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"predicates\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.8069203, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"unique_id": "macro.dbt.get_incremental_default_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.8073232, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"unique_id": "macro.dbt.default__get_incremental_default_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.8076546, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"unique_id": "macro.dbt.get_insert_into_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.8082907, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.8112302, "supported_languages": null}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.8124475, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.81388, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"unique_id": "macro.dbt.get_merge_update_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.8146842, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"unique_id": "macro.dbt.default__get_merge_update_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.8164155, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.826402, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.8348804, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.8376198, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.8401852, "supported_languages": null}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.8419971, "supported_languages": null}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.8435323, "supported_languages": null}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.8503487, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.8536525, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.8542132, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.855783, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.8563807, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.8577614, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.8590572, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.8594747, "supported_languages": null}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.860428, "supported_languages": null}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.8613155, "supported_languages": null}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.8665602, "supported_languages": ["sql"]}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.8729072, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.873288, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.8737867, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.8753033, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.8756807, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.8760858, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.8790364, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.8819318, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.8830426, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.8836365, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.8944097, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.900557, "supported_languages": null}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9011781, "supported_languages": null}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9015453, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9017518, "supported_languages": null}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9020805, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9023404, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9027765, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9045858, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9050121, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.905584, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9065268, "supported_languages": null}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.907443, "supported_languages": null}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9084156, "supported_languages": null}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.909176, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9105616, "supported_languages": null}, "macro.dbt.intersect": {"unique_id": "macro.dbt.intersect", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9113035, "supported_languages": null}, "macro.dbt.default__intersect": {"unique_id": "macro.dbt.default__intersect", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9114912, "supported_languages": null}, "macro.dbt.position": {"unique_id": "macro.dbt.position", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9123785, "supported_languages": null}, "macro.dbt.default__position": {"unique_id": "macro.dbt.default__position", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9127033, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"unique_id": "macro.dbt.escape_single_quotes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9134958, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"unique_id": "macro.dbt.default__escape_single_quotes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9138088, "supported_languages": null}, "macro.dbt.safe_cast": {"unique_id": "macro.dbt.safe_cast", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9146833, "supported_languages": null}, "macro.dbt.default__safe_cast": {"unique_id": "macro.dbt.default__safe_cast", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9151528, "supported_languages": null}, "macro.dbt.array_construct": {"unique_id": "macro.dbt.array_construct", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9161856, "supported_languages": null}, "macro.dbt.default__array_construct": {"unique_id": "macro.dbt.default__array_construct", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9167192, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"unique_id": "macro.dbt.cast_bool_to_text", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9174912, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"unique_id": "macro.dbt.default__cast_bool_to_text", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9178555, "supported_languages": null}, "macro.dbt.datediff": {"unique_id": "macro.dbt.datediff", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9187806, "supported_languages": null}, "macro.dbt.default__datediff": {"unique_id": "macro.dbt.default__datediff", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9191496, "supported_languages": null}, "macro.dbt.concat": {"unique_id": "macro.dbt.concat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.919942, "supported_languages": null}, "macro.dbt.default__concat": {"unique_id": "macro.dbt.default__concat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9202425, "supported_languages": null}, "macro.dbt.length": {"unique_id": "macro.dbt.length", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9210107, "supported_languages": null}, "macro.dbt.default__length": {"unique_id": "macro.dbt.default__length", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9212587, "supported_languages": null}, "macro.dbt.any_value": {"unique_id": "macro.dbt.any_value", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9220266, "supported_languages": null}, "macro.dbt.default__any_value": {"unique_id": "macro.dbt.default__any_value", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9222798, "supported_languages": null}, "macro.dbt.type_string": {"unique_id": "macro.dbt.type_string", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9243014, "supported_languages": null}, "macro.dbt.default__type_string": {"unique_id": "macro.dbt.default__type_string", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9246488, "supported_languages": null}, "macro.dbt.type_timestamp": {"unique_id": "macro.dbt.type_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9250033, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"unique_id": "macro.dbt.default__type_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9253325, "supported_languages": null}, "macro.dbt.type_float": {"unique_id": "macro.dbt.type_float", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.925678, "supported_languages": null}, "macro.dbt.default__type_float": {"unique_id": "macro.dbt.default__type_float", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9260201, "supported_languages": null}, "macro.dbt.type_numeric": {"unique_id": "macro.dbt.type_numeric", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9263768, "supported_languages": null}, "macro.dbt.default__type_numeric": {"unique_id": "macro.dbt.default__type_numeric", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9267616, "supported_languages": null}, "macro.dbt.type_bigint": {"unique_id": "macro.dbt.type_bigint", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9272301, "supported_languages": null}, "macro.dbt.default__type_bigint": {"unique_id": "macro.dbt.default__type_bigint", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9275897, "supported_languages": null}, "macro.dbt.type_int": {"unique_id": "macro.dbt.type_int", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9279664, "supported_languages": null}, "macro.dbt.default__type_int": {"unique_id": "macro.dbt.default__type_int", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.928316, "supported_languages": null}, "macro.dbt.type_boolean": {"unique_id": "macro.dbt.type_boolean", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9286723, "supported_languages": null}, "macro.dbt.default__type_boolean": {"unique_id": "macro.dbt.default__type_boolean", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9289927, "supported_languages": null}, "macro.dbt.array_concat": {"unique_id": "macro.dbt.array_concat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9298131, "supported_languages": null}, "macro.dbt.default__array_concat": {"unique_id": "macro.dbt.default__array_concat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9301283, "supported_languages": null}, "macro.dbt.right": {"unique_id": "macro.dbt.right", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9309936, "supported_languages": null}, "macro.dbt.default__right": {"unique_id": "macro.dbt.default__right", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9313283, "supported_languages": null}, "macro.dbt.array_append": {"unique_id": "macro.dbt.array_append", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9321768, "supported_languages": null}, "macro.dbt.default__array_append": {"unique_id": "macro.dbt.default__array_append", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9324825, "supported_languages": null}, "macro.dbt.last_day": {"unique_id": "macro.dbt.last_day", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9334133, "supported_languages": null}, "macro.dbt.default_last_day": {"unique_id": "macro.dbt.default_last_day", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9339902, "supported_languages": null}, "macro.dbt.default__last_day": {"unique_id": "macro.dbt.default__last_day", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.934318, "supported_languages": null}, "macro.dbt.split_part": {"unique_id": "macro.dbt.split_part", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9354856, "supported_languages": null}, "macro.dbt.default__split_part": {"unique_id": "macro.dbt.default__split_part", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9358573, "supported_languages": null}, "macro.dbt._split_part_negative": {"unique_id": "macro.dbt._split_part_negative", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.936364, "supported_languages": null}, "macro.dbt.date_trunc": {"unique_id": "macro.dbt.date_trunc", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9371798, "supported_languages": null}, "macro.dbt.default__date_trunc": {"unique_id": "macro.dbt.default__date_trunc", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9374852, "supported_languages": null}, "macro.dbt.string_literal": {"unique_id": "macro.dbt.string_literal", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9382646, "supported_languages": null}, "macro.dbt.default__string_literal": {"unique_id": "macro.dbt.default__string_literal", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9385328, "supported_languages": null}, "macro.dbt.hash": {"unique_id": "macro.dbt.hash", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9393451, "supported_languages": null}, "macro.dbt.default__hash": {"unique_id": "macro.dbt.default__hash", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9397118, "supported_languages": null}, "macro.dbt.except": {"unique_id": "macro.dbt.except", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9404724, "supported_languages": null}, "macro.dbt.default__except": {"unique_id": "macro.dbt.default__except", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9408073, "supported_languages": null}, "macro.dbt.bool_or": {"unique_id": "macro.dbt.bool_or", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9415665, "supported_languages": null}, "macro.dbt.default__bool_or": {"unique_id": "macro.dbt.default__bool_or", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9418075, "supported_languages": null}, "macro.dbt.replace": {"unique_id": "macro.dbt.replace", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9427354, "supported_languages": null}, "macro.dbt.default__replace": {"unique_id": "macro.dbt.default__replace", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9431105, "supported_languages": null}, "macro.dbt.dateadd": {"unique_id": "macro.dbt.dateadd", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9440508, "supported_languages": null}, "macro.dbt.default__dateadd": {"unique_id": "macro.dbt.default__dateadd", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9444222, "supported_languages": null}, "macro.dbt.listagg": {"unique_id": "macro.dbt.listagg", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9457715, "supported_languages": null}, "macro.dbt.default__listagg": {"unique_id": "macro.dbt.default__listagg", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.946657, "supported_languages": null}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.947954, "supported_languages": null}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.948474, "supported_languages": null}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9490838, "supported_languages": null}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9497483, "supported_languages": null}, "macro.dbt_artifacts.upload_model_executions": {"unique_id": "macro.dbt_artifacts.upload_model_executions", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/upload_model_executions.sql", "original_file_path": "macros/upload_model_executions.sql", "name": "upload_model_executions", "macro_sql": "{% macro upload_model_executions(results) -%}\n    {% set src_dbt_model_executions = source('dbt_artifacts', 'model_executions') %}\n    {% set models = [] %}\n    {% for result in results  %}\n        {% if result.node.resource_type == \"model\" %}\n            {% do models.append(result) %}\n        {% endif %}\n    {% endfor %}\n\n    {% if models != [] %}\n        {% set model_execution_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }}\n        from values\n        {% for model in results if model.node.resource_type == \"model\" -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = model.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                '{{ config_full_refresh }}', {# was_full_refresh #}\n\n                '{{ model.thread_id }}', {# thread_id #}\n                '{{ model.status }}', {# status #}\n\n                {% if model.timing != [] %}\n                    {% for stage in model.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in model.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ model.execution_time }}, {# total_node_runtime #}\n                null, -- rows_affected not available {# Databricks #}\n                '{{ model.node.config.materialized }}', {# materialization #}\n                '{{ model.node.schema }}', {# schema #}\n                '{{ model.node.name }}' {# name #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n\n        {{ dbt_artifacts.insert_into_metadata_table(\n            database_name=src_dbt_model_executions.database,\n            schema_name=src_dbt_model_executions.schema,\n            table_name=src_dbt_model_executions.identifier,\n            content=model_execution_values\n            )\n        }}\n    {% endif %}\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.insert_into_metadata_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9588919, "supported_languages": null}, "macro.dbt_artifacts.insert_into_metadata_table": {"unique_id": "macro.dbt_artifacts.insert_into_metadata_table", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/insert_into_metadata_table.sql", "original_file_path": "macros/insert_into_metadata_table.sql", "name": "insert_into_metadata_table", "macro_sql": "{% macro insert_into_metadata_table(database_name, schema_name, table_name, content) -%}\n    {{ return(adapter.dispatch('insert_into_metadata_table', 'dbt_artifacts')(database_name, schema_name, table_name, content)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__insert_into_metadata_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9601893, "supported_languages": null}, "macro.dbt_artifacts.spark__insert_into_metadata_table": {"unique_id": "macro.dbt_artifacts.spark__insert_into_metadata_table", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/insert_into_metadata_table.sql", "original_file_path": "macros/insert_into_metadata_table.sql", "name": "spark__insert_into_metadata_table", "macro_sql": "{% macro spark__insert_into_metadata_table(database_name, schema_name, table_name, content) -%}\n    {% set insert_into_table_query %}\n    insert into {{ schema_name }}.{{ table_name }}\n    {{ content }}\n    {% endset %}\n\n    {% do run_query(insert_into_table_query) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.960756, "supported_languages": null}, "macro.dbt_artifacts.snowflake__insert_into_metadata_table": {"unique_id": "macro.dbt_artifacts.snowflake__insert_into_metadata_table", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/insert_into_metadata_table.sql", "original_file_path": "macros/insert_into_metadata_table.sql", "name": "snowflake__insert_into_metadata_table", "macro_sql": "{% macro snowflake__insert_into_metadata_table(database_name, schema_name, table_name, content) -%}\n    {% set insert_into_table_query %}\n    insert into {{database_name}}.{{ schema_name }}.{{ table_name }}\n    {{ content }}\n    {% endset %}\n\n    {% do run_query(insert_into_table_query) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9613495, "supported_languages": null}, "macro.dbt_artifacts.create_exposures_table_if_not_exists": {"unique_id": "macro.dbt_artifacts.create_exposures_table_if_not_exists", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_exposures_table_if_not_exists.sql", "original_file_path": "macros/create_exposures_table_if_not_exists.sql", "name": "create_exposures_table_if_not_exists", "macro_sql": "{% macro create_exposures_table_if_not_exists(database_name, schema_name, table_name) -%}\n\n    {%- if adapter.get_relation(database=database_name, schema=schema_name, identifier=table_name) is none -%}\n        {% if database_name %}\n        {{ log(\"Creating table \" ~ adapter.quote(database_name ~ \".\" ~ schema_name ~ \".\" ~ table_name), info=true) }}\n        {% else %}\n        {{ log(\"Creating table \" ~ adapter.quote(schema_name ~ \".\" ~ table_name), info=true) }}\n        {% endif %}\n        {%- set query -%}\n            {{ adapter.dispatch('get_create_exposures_table_if_not_exists_statement', 'dbt_artifacts')(database_name, schema_name, table_name) }}\n        {% endset %}\n        {%- call statement(auto_begin=True) -%}\n            {{ query }}\n        {%- endcall -%}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__get_create_exposures_table_if_not_exists_statement", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9651678, "supported_languages": null}, "macro.dbt_artifacts.spark__get_create_exposures_table_if_not_exists_statement": {"unique_id": "macro.dbt_artifacts.spark__get_create_exposures_table_if_not_exists_statement", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_exposures_table_if_not_exists.sql", "original_file_path": "macros/create_exposures_table_if_not_exists.sql", "name": "spark__get_create_exposures_table_if_not_exists_statement", "macro_sql": "{% macro spark__get_create_exposures_table_if_not_exists_statement(database_name, schema_name, table_name) -%}\n    create table {{schema_name}}.{{table_name}} (\n        command_invocation_id STRING,\n        node_id STRING,\n        run_started_at TIMESTAMP,\n        name STRING,\n        type STRING,\n        owner STRING,\n        maturity STRING,\n        path STRING,\n        description STRING,\n        url STRING,\n        package_name STRING,\n        depends_on_nodes STRING\n    )\n    using delta\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9655378, "supported_languages": null}, "macro.dbt_artifacts.snowflake__get_create_exposures_table_if_not_exists_statement": {"unique_id": "macro.dbt_artifacts.snowflake__get_create_exposures_table_if_not_exists_statement", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_exposures_table_if_not_exists.sql", "original_file_path": "macros/create_exposures_table_if_not_exists.sql", "name": "snowflake__get_create_exposures_table_if_not_exists_statement", "macro_sql": "{% macro snowflake__get_create_exposures_table_if_not_exists_statement(database_name, schema_name, table_name) -%}\n    create table {{database_name}}.{{schema_name}}.{{table_name}} (\n        command_invocation_id STRING,\n        node_id STRING,\n        run_started_at TIMESTAMP_TZ,\n        name STRING,\n        type STRING,\n        owner VARIANT,\n        maturity STRING,\n        path STRING,\n        description STRING,\n        url STRING,\n        package_name STRING,\n        depends_on_nodes ARRAY\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.965909, "supported_languages": null}, "macro.dbt_artifacts.default__get_create_exposures_table_if_not_exists_statement": {"unique_id": "macro.dbt_artifacts.default__get_create_exposures_table_if_not_exists_statement", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_exposures_table_if_not_exists.sql", "original_file_path": "macros/create_exposures_table_if_not_exists.sql", "name": "default__get_create_exposures_table_if_not_exists_statement", "macro_sql": "{% macro default__get_create_exposures_table_if_not_exists_statement(database_name, schema_name, table_name) -%}\n    create table {{database_name}}.{{schema_name}}.{{table_name}} (\n        command_invocation_id STRING,\n        node_id STRING,\n        run_started_at TIMESTAMP,\n        name STRING,\n        type STRING,\n        owner STRING,\n        maturity STRING,\n        path STRING,\n        description STRING,\n        url STRING,\n        package_name STRING,\n        depends_on_nodes STRING\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9662926, "supported_languages": null}, "macro.dbt_artifacts.create_dbt_artifacts_tables": {"unique_id": "macro.dbt_artifacts.create_dbt_artifacts_tables", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_dbt_artifacts_tables.sql", "original_file_path": "macros/create_dbt_artifacts_tables.sql", "name": "create_dbt_artifacts_tables", "macro_sql": "{% macro create_dbt_artifacts_tables() %}\n\n    {% if target.type in ('spark', 'databricks') and target.database is not defined %}\n    {% set database_name = None %}\n    {% else %}\n    {% set database_name = var('dbt_artifacts_database', target.database) %}\n    {% endif %}\n\n    {%- do adapter.create_schema(api.Relation.create(database=database_name, schema=var('dbt_artifacts_schema', target.schema))) -%}\n\n    {% set src_dbt_exposures = source('dbt_artifacts', 'exposures') %}\n    {{ dbt_artifacts.create_exposures_table_if_not_exists(src_dbt_exposures.database, src_dbt_exposures.schema, src_dbt_exposures.identifier) }}\n\n    {% set src_dbt_model_executions = source('dbt_artifacts', 'model_executions') %}\n    {{ dbt_artifacts.create_model_executions_table_if_not_exists(src_dbt_model_executions.database, src_dbt_model_executions.schema, src_dbt_model_executions.identifier) }}\n\n    {% set src_dbt_models = source('dbt_artifacts', 'models') %}\n    {{ dbt_artifacts.create_models_table_if_not_exists(src_dbt_models.database, src_dbt_models.schema, src_dbt_models.identifier) }}\n\n    {% set src_dbt_seed_executions = source('dbt_artifacts', 'seed_executions') %}\n    {{ dbt_artifacts.create_seed_executions_table_if_not_exists(src_dbt_seed_executions.database, src_dbt_seed_executions.schema, src_dbt_seed_executions.identifier) }}\n\n    {% set src_dbt_seeds = source('dbt_artifacts', 'seeds') %}\n    {{ dbt_artifacts.create_seeds_table_if_not_exists(src_dbt_seeds.database, src_dbt_seeds.schema, src_dbt_seeds.identifier) }}\n\n    {% set src_dbt_snapshot_executions = source('dbt_artifacts', 'snapshot_executions') %}\n    {{ dbt_artifacts.create_snapshot_executions_table_if_not_exists(src_dbt_snapshot_executions.database, src_dbt_snapshot_executions.schema, src_dbt_snapshot_executions.identifier) }}\n\n    {% set src_dbt_snapshots = source('dbt_artifacts', 'snapshots') %}\n    {{ dbt_artifacts.create_snapshots_table_if_not_exists(src_dbt_snapshots.database, src_dbt_snapshots.schema, src_dbt_snapshots.identifier) }}\n\n    {% set src_dbt_sources = source('dbt_artifacts', 'sources') %}\n    {{ dbt_artifacts.create_sources_table_if_not_exists(src_dbt_sources.database, src_dbt_sources.schema, src_dbt_sources.identifier) }}\n\n    {% set src_dbt_test_executions = source('dbt_artifacts', 'test_executions') %}\n    {{ dbt_artifacts.create_test_executions_table_if_not_exists(src_dbt_test_executions.database, src_dbt_test_executions.schema, src_dbt_test_executions.identifier) }}\n\n    {% set src_dbt_tests = source('dbt_artifacts', 'tests') %}\n    {{ dbt_artifacts.create_tests_table_if_not_exists(src_dbt_tests.database, src_dbt_tests.schema, src_dbt_tests.identifier) }}\n\n    {% set src_dbt_invocations = source('dbt_artifacts', 'invocations') %}\n    {{ dbt_artifacts.create_invocations_table_if_not_exists(src_dbt_invocations.database, src_dbt_invocations.schema, src_dbt_invocations.identifier) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.create_exposures_table_if_not_exists", "macro.dbt_artifacts.create_model_executions_table_if_not_exists", "macro.dbt_artifacts.create_models_table_if_not_exists", "macro.dbt_artifacts.create_seed_executions_table_if_not_exists", "macro.dbt_artifacts.create_seeds_table_if_not_exists", "macro.dbt_artifacts.create_snapshot_executions_table_if_not_exists", "macro.dbt_artifacts.create_snapshots_table_if_not_exists", "macro.dbt_artifacts.create_sources_table_if_not_exists", "macro.dbt_artifacts.create_test_executions_table_if_not_exists", "macro.dbt_artifacts.create_tests_table_if_not_exists", "macro.dbt_artifacts.create_invocations_table_if_not_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9732392, "supported_languages": null}, "macro.dbt_artifacts.upload_models": {"unique_id": "macro.dbt_artifacts.upload_models", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/upload_models.sql", "original_file_path": "macros/upload_models.sql", "name": "upload_models", "macro_sql": "{% macro upload_models(graph) -%}\n    {% set src_dbt_models = source('dbt_artifacts', 'models') %}\n    {% set models = [] %}\n    {% for node in graph.nodes.values() | selectattr(\"resource_type\", \"equalto\", \"model\") %}\n        {% do models.append(node) %}\n    {% endfor %}\n\n    {% if models != [] %}\n        {% set model_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(7)) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }}\n        from values\n        {% for model in models -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n                '{{ model.database }}', {# database #}\n                '{{ model.schema }}', {# schema #}\n                '{{ model.name }}', {# name #}\n                '{{ tojson(model.depends_on.nodes) }}', {# depends_on_nodes #}\n                '{{ model.package_name }}', {# package_name #}\n                '{{ model.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                '{{ model.checksum.checksum }}', {# checksum #}\n                '{{ model.config.materialized }}' {# materialization #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n\n        {{ dbt_artifacts.insert_into_metadata_table(\n            database_name=src_dbt_models.database,\n            schema_name=src_dbt_models.schema,\n            table_name=src_dbt_models.identifier,\n            content=model_values\n            )\n        }}\n    {% endif %}\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json", "macro.dbt_artifacts.insert_into_metadata_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.979682, "supported_languages": null}, "macro.dbt_artifacts.create_models_table_if_not_exists": {"unique_id": "macro.dbt_artifacts.create_models_table_if_not_exists", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_models_table_if_not_exists.sql", "original_file_path": "macros/create_models_table_if_not_exists.sql", "name": "create_models_table_if_not_exists", "macro_sql": "{% macro create_models_table_if_not_exists(database_name, schema_name, table_name) -%}\n\n    {%- if adapter.get_relation(database=database_name, schema=schema_name, identifier=table_name) is none -%}\n        {% if database_name %}\n        {{ log(\"Creating table \" ~ adapter.quote(database_name ~ \".\" ~ schema_name ~ \".\" ~ table_name), info=true) }}\n        {% else %}\n        {{ log(\"Creating table \" ~ adapter.quote(schema_name ~ \".\" ~ table_name), info=true) }}\n        {% endif %}\n        {%- set query -%}\n            {{ adapter.dispatch('get_create_models_table_if_not_exists_statement', 'dbt_artifacts')(database_name, schema_name, table_name) }}\n        {% endset %}\n        {%- call statement(auto_begin=True) -%}\n            {{ query }}\n        {%- endcall -%}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__get_create_models_table_if_not_exists_statement", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.98345, "supported_languages": null}, "macro.dbt_artifacts.spark__get_create_models_table_if_not_exists_statement": {"unique_id": "macro.dbt_artifacts.spark__get_create_models_table_if_not_exists_statement", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_models_table_if_not_exists.sql", "original_file_path": "macros/create_models_table_if_not_exists.sql", "name": "spark__get_create_models_table_if_not_exists_statement", "macro_sql": "{% macro spark__get_create_models_table_if_not_exists_statement(database_name, schema_name, table_name) -%}\n    create table {{schema_name}}.{{table_name}} (\n        command_invocation_id STRING,\n        node_id STRING,\n        run_started_at TIMESTAMP,\n        database STRING,\n        schema STRING,\n        name STRING,\n        depends_on_nodes STRING,\n        package_name STRING,\n        path STRING,\n        checksum STRING,\n        materialization STRING\n    )\n    using delta\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9838157, "supported_languages": null}, "macro.dbt_artifacts.snowflake__get_create_models_table_if_not_exists_statement": {"unique_id": "macro.dbt_artifacts.snowflake__get_create_models_table_if_not_exists_statement", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_models_table_if_not_exists.sql", "original_file_path": "macros/create_models_table_if_not_exists.sql", "name": "snowflake__get_create_models_table_if_not_exists_statement", "macro_sql": "{% macro snowflake__get_create_models_table_if_not_exists_statement(database_name, schema_name, table_name) -%}\n    create table {{database_name}}.{{schema_name}}.{{table_name}} (\n        command_invocation_id STRING,\n        node_id STRING,\n        run_started_at TIMESTAMP_TZ,\n        database STRING,\n        schema STRING,\n        name STRING,\n        depends_on_nodes ARRAY,\n        package_name STRING,\n        path STRING,\n        checksum STRING,\n        materialization STRING\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.9842088, "supported_languages": null}, "macro.dbt_artifacts.default__get_create_models_table_if_not_exists_statement": {"unique_id": "macro.dbt_artifacts.default__get_create_models_table_if_not_exists_statement", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_models_table_if_not_exists.sql", "original_file_path": "macros/create_models_table_if_not_exists.sql", "name": "default__get_create_models_table_if_not_exists_statement", "macro_sql": "{% macro default__get_create_models_table_if_not_exists_statement(database_name, schema_name, table_name) -%}\n    create table {{database_name}}.{{schema_name}}.{{table_name}} (\n        command_invocation_id STRING,\n        node_id STRING,\n        run_started_at TIMESTAMP,\n        database STRING,\n        schema STRING,\n        name STRING,\n        depends_on_nodes STRING,\n        package_name STRING,\n        path STRING,\n        checksum STRING,\n        materialization STRING\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177026.984579, "supported_languages": null}, "macro.dbt_artifacts.migrate_from_v0_to_v1": {"unique_id": "macro.dbt_artifacts.migrate_from_v0_to_v1", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/migrate_from_v0_to_v1.sql", "original_file_path": "macros/migrate_from_v0_to_v1.sql", "name": "migrate_from_v0_to_v1", "macro_sql": "{%- macro migrate_from_v0_to_v1(old_database, old_schema, new_database, new_schema) -%}\n\n    {% set migrate_model_executions %}\n        insert into {{new_database}}.{{new_schema}}.model_executions (\n            command_invocation_id,\n            compile_started_at,\n            materialization,\n            name,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            schema,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            run_started_at\n        )\n        select\n            command_invocation_id,\n            compile_started_at,\n            model_materialization,\n            name,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            model_schema,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.fct_dbt__model_executions\n    {% endset %}\n\n    {{ log(\"Migrating model_executions\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_model_executions }}\n    {%- endcall -%}\n\n    {% set migrate_tests %}\n        insert into {{new_database}}.{{new_schema}}.tests (\n            command_invocation_id,\n            depends_on_nodes,\n            name,\n            node_id,\n            package_name,\n            tags,\n            test_path,\n            run_started_at\n        )\n        select\n            command_invocation_id,\n            depends_on_nodes,\n            name,\n            node_id,\n            package_name,\n            [],\n            test_path,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.dim_dbt__tests\n    {% endset %}\n\n    {{ log(\"Migrating tests\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_tests }}\n    {%- endcall -%}\n\n    {% set migrate_test_executions %}\n        insert into {{new_database}}.{{new_schema}}.test_executions (\n            command_invocation_id,\n            compile_started_at,\n            failures,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            run_started_at\n        )\n        select\n            command_invocation_id,\n            compile_started_at,\n            null,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.fct_dbt__test_executions\n    {% endset %}\n\n    {{ log(\"Migrating test_executions\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_test_executions }}\n    {%- endcall -%}\n\n    {% set migrate_models %}\n        insert into {{new_database}}.{{new_schema}}.models (\n            checksum,\n            command_invocation_id,\n            database,\n            depends_on_nodes,\n            materialization,\n            name,\n            node_id,\n            package_name,\n            path,\n            schema,\n            run_started_at\n        )\n        select\n            checksum,\n            command_invocation_id,\n            model_database,\n            depends_on_nodes,\n            model_materialization,\n            name,\n            node_id,\n            package_name,\n            model_path,\n            model_schema,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.dim_dbt__models\n    {% endset %}\n\n    {{ log(\"Migrating models\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_models }}\n    {%- endcall -%}\n\n    {% set migrate_seeds %}\n        insert into {{new_database}}.{{new_schema}}.seeds (\n            checksum,\n            command_invocation_id,\n            database,\n            name,\n            node_id,\n            package_name,\n            path,\n            schema,\n            run_started_at\n        )\n        select\n            checksum,\n            command_invocation_id,\n            seed_database,\n            name,\n            node_id,\n            package_name,\n            seed_path,\n            seed_schema,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.dim_dbt__seeds\n    {% endset %}\n\n    {{ log(\"Migrating seeds\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_seeds }}\n    {%- endcall -%}\n\n    {% set migrate_seed_executions %}\n        insert into {{new_database}}.{{new_schema}}.seed_executions (\n            command_invocation_id,\n            compile_started_at,\n            materialization,\n            name,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            schema,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            run_started_at\n        )\n        select\n            command_invocation_id,\n            compile_started_at,\n            'seed',\n            name,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            seed_schema,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.fct_dbt__seed_executions\n    {% endset %}\n\n    {{ log(\"Migrating seed_executions\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_seed_executions }}\n    {%- endcall -%}\n\n    {% set migrate_exposures %}\n        insert into {{new_database}}.{{new_schema}}.exposures (\n            command_invocation_id,\n            depends_on_nodes,\n            description,\n            maturity,\n            name,\n            node_id,\n            owner,\n            package_name,\n            path,\n            type,\n            url,\n            run_started_at\n        )\n        select\n            command_invocation_id,\n            [],\n            null,\n            maturity,\n            name,\n            node_id,\n            null, {#- v0 is a string, v1 is a variant -#}\n            package_name,\n            null,\n            type,\n            null,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.dim_dbt__exposures\n    {% endset %}\n\n    {{ log(\"Migrating exposures\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_exposures }}\n    {%- endcall -%}\n\n    {% set migrate_snapshots %}\n        insert into {{new_database}}.{{new_schema}}.snapshots (\n            checksum,\n            command_invocation_id,\n            database,\n            depends_on_nodes,\n            name,\n            node_id,\n            package_name,\n            path,\n            schema,\n            strategy,\n            run_started_at\n        )\n        select\n            checksum,\n            command_invocation_id,\n            snapshot_database,\n            depends_on_nodes,\n            name,\n            node_id,\n            package_name,\n            snapshot_path,\n            snapshot_schema,\n            null,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.dim_dbt__snapshots\n    {% endset %}\n\n    {{ log(\"Migrating snapshots\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_snapshots }}\n    {%- endcall -%}\n\n    {% set migrate_snapshot_executions %}\n        insert into {{new_database}}.{{new_schema}}.snapshot_executions (\n            command_invocation_id,\n            compile_started_at,\n            materialization,\n            name,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            schema,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            run_started_at\n        )\n        select\n            command_invocation_id,\n            compile_started_at,\n            'snapshot',\n            name,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            snapshot_schema,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.fct_dbt__snapshot_executions\n    {% endset %}\n\n    {{ log(\"Migrating snapshot_executions\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_snapshot_executions }}\n    {%- endcall -%}\n\n    {% set migrate_sources %}\n        insert into {{new_database}}.{{new_schema}}.sources (\n            command_invocation_id,\n            database,\n            freshness,\n            identifier,\n            loaded_at_field,\n            loader,\n            name,\n            node_id,\n            schema,\n            source_name,\n            run_started_at\n        )\n        select\n            command_invocation_id,\n            node_database,\n            parse_json('[{\"error_after\":{\"count\":null,\"period\":null},\"filter\":null,\"warn_after\":{\"count\":null,\"period\":null}}]'),\n            name,\n            null,\n            source_loader,\n            name,\n            node_id,\n            source_schema,\n            source_name,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.dim_dbt__sources\n    {% endset %}\n\n    {{ log(\"Migrating sources\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_sources }}\n    {%- endcall -%}\n\n    {{ log(\"Migration complete. You can now safely delete any data from before 1.0.0\", info=True) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.0036097, "supported_languages": null}, "macro.dbt_artifacts.upload_results": {"unique_id": "macro.dbt_artifacts.upload_results", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/upload_results.sql", "original_file_path": "macros/upload_results.sql", "name": "upload_results", "macro_sql": "{% macro upload_results(results) -%}\n    {% if execute %}\n        {% if results != [] %}\n            {% do log(\"Uploading model executions\", true) %}\n            {% do dbt_artifacts.upload_model_executions(results) %}\n            {% do log(\"Uploading seed executions\", true) %}\n            {% do dbt_artifacts.upload_seed_executions(results) %}\n            {% do log(\"Uploading snapshot executions\", true) %}\n            {% do dbt_artifacts.upload_snapshot_executions(results) %}\n            {% do log(\"Uploading test executions\", true) %}\n            {% do dbt_artifacts.upload_test_executions(results) %}\n        {% endif %}\n        {% do log(\"Uploading exposures\", true) %}\n        {% do dbt_artifacts.upload_exposures(graph) %}\n        {% do log(\"Uploading models\", true) %}\n        {% do dbt_artifacts.upload_tests(graph) %}\n        {% do log(\"Uploading seeds\", true) %}\n        {% do dbt_artifacts.upload_seeds(graph) %}\n        {% do log(\"Uploading snapshots\", true) %}\n        {% do dbt_artifacts.upload_models(graph) %}\n        {% do log(\"Uploading sources\", true) %}\n        {% do dbt_artifacts.upload_sources(graph) %}\n        {% do log(\"Uploading tests\", true) %}\n        {% do dbt_artifacts.upload_snapshots(graph) %}\n        {% do log(\"Uploading invocations\", true) %}\n        {% do dbt_artifacts.upload_invocations() %}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.upload_model_executions", "macro.dbt_artifacts.upload_seed_executions", "macro.dbt_artifacts.upload_snapshot_executions", "macro.dbt_artifacts.upload_test_executions", "macro.dbt_artifacts.upload_exposures", "macro.dbt_artifacts.upload_tests", "macro.dbt_artifacts.upload_seeds", "macro.dbt_artifacts.upload_models", "macro.dbt_artifacts.upload_sources", "macro.dbt_artifacts.upload_snapshots", "macro.dbt_artifacts.upload_invocations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.0078409, "supported_languages": null}, "macro.dbt_artifacts.parse_json": {"unique_id": "macro.dbt_artifacts.parse_json", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/parse_json.sql", "original_file_path": "macros/parse_json.sql", "name": "parse_json", "macro_sql": "{% macro parse_json(field) -%}\n  {{ return(adapter.dispatch('parse_json')(field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.0086617, "supported_languages": null}, "macro.dbt_artifacts.default__parse_json": {"unique_id": "macro.dbt_artifacts.default__parse_json", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/parse_json.sql", "original_file_path": "macros/parse_json.sql", "name": "default__parse_json", "macro_sql": "{% macro default__parse_json(field) -%}\n    {{ field }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.0088847, "supported_languages": null}, "macro.dbt_artifacts.snowflake__parse_json": {"unique_id": "macro.dbt_artifacts.snowflake__parse_json", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/parse_json.sql", "original_file_path": "macros/parse_json.sql", "name": "snowflake__parse_json", "macro_sql": "{% macro snowflake__parse_json(field) -%}\n    parse_json({{ field }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.00911, "supported_languages": null}, "macro.dbt_artifacts.upload_sources": {"unique_id": "macro.dbt_artifacts.upload_sources", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/upload_sources.sql", "original_file_path": "macros/upload_sources.sql", "name": "upload_sources", "macro_sql": "{% macro upload_sources(graph) -%}\n    {% set src_dbt_sources = source('dbt_artifacts', 'sources') %}\n    {% set sources = [] %}\n    {% for node in graph.sources.values() %}\n        {% do sources.append(node) %}\n    {% endfor %}\n\n    {% if sources != [] %}\n        {% set source_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(11)) }}\n        from values\n        {% for source in sources -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ source.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n                '{{ source.database }}', {# database #}\n                '{{ source.schema }}', {# schema #}\n                '{{ source.source_name }}', {# source_name #}\n                '{{ source.loader }}', {# loader #}\n                '{{ source.name }}', {# name #}\n                '{{ source.identifier }}', {# identifier #}\n                '{{ source.loaded_at_field | replace(\"'\",\"\\\\'\") }}', {# loaded_at_field #}\n                '{{ tojson(source.freshness) | replace(\"'\",\"\\\\'\") }}' {# freshness #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n\n        {{ dbt_artifacts.insert_into_metadata_table(\n            database_name=src_dbt_sources.database,\n            schema_name=src_dbt_sources.schema,\n            table_name=src_dbt_sources.identifier,\n            content=source_values\n            )\n        }}\n    {% endif %}\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json", "macro.dbt_artifacts.insert_into_metadata_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.0154645, "supported_languages": null}, "macro.dbt_artifacts.create_tests_table_if_not_exists": {"unique_id": "macro.dbt_artifacts.create_tests_table_if_not_exists", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_tests_table_if_not_exists.sql", "original_file_path": "macros/create_tests_table_if_not_exists.sql", "name": "create_tests_table_if_not_exists", "macro_sql": "{% macro create_tests_table_if_not_exists(database_name, schema_name, table_name) -%}\n\n    {%- if adapter.get_relation(database=database_name, schema=schema_name, identifier=table_name) is none -%}\n        {% if database_name %}\n        {{ log(\"Creating table \" ~ adapter.quote(database_name ~ \".\" ~ schema_name ~ \".\" ~ table_name), info=true) }}\n        {% else %}\n        {{ log(\"Creating table \" ~ adapter.quote(schema_name ~ \".\" ~ table_name), info=true) }}\n        {% endif %}\n        {%- set query -%}\n            {{ adapter.dispatch('get_create_tests_table_if_not_exists_statement', 'dbt_artifacts')(database_name, schema_name, table_name) }}\n        {% endset %}\n        {%- call statement(auto_begin=True) -%}\n            {{ query }}\n        {%- endcall -%}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__get_create_tests_table_if_not_exists_statement", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.018961, "supported_languages": null}, "macro.dbt_artifacts.spark__get_create_tests_table_if_not_exists_statement": {"unique_id": "macro.dbt_artifacts.spark__get_create_tests_table_if_not_exists_statement", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_tests_table_if_not_exists.sql", "original_file_path": "macros/create_tests_table_if_not_exists.sql", "name": "spark__get_create_tests_table_if_not_exists_statement", "macro_sql": "{% macro spark__get_create_tests_table_if_not_exists_statement(database_name, schema_name, table_name) -%}\n    create table {{schema_name}}.{{table_name}} (\n        command_invocation_id STRING,\n        node_id STRING,\n        run_started_at TIMESTAMP,\n        name STRING,\n        depends_on_nodes STRING,\n        package_name STRING,\n        test_path STRING,\n        tags STRING\n    )\n    using delta\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.0193157, "supported_languages": null}, "macro.dbt_artifacts.snowflake__get_create_tests_table_if_not_exists_statement": {"unique_id": "macro.dbt_artifacts.snowflake__get_create_tests_table_if_not_exists_statement", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_tests_table_if_not_exists.sql", "original_file_path": "macros/create_tests_table_if_not_exists.sql", "name": "snowflake__get_create_tests_table_if_not_exists_statement", "macro_sql": "{% macro snowflake__get_create_tests_table_if_not_exists_statement(database_name, schema_name, table_name) -%}\n    create table {{database_name}}.{{schema_name}}.{{table_name}} (\n        command_invocation_id STRING,\n        node_id STRING,\n        run_started_at TIMESTAMP_TZ,\n        name STRING,\n        depends_on_nodes ARRAY,\n        package_name STRING,\n        test_path STRING,\n        tags ARRAY\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.0196772, "supported_languages": null}, "macro.dbt_artifacts.default__get_create_tests_table_if_not_exists_statement": {"unique_id": "macro.dbt_artifacts.default__get_create_tests_table_if_not_exists_statement", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_tests_table_if_not_exists.sql", "original_file_path": "macros/create_tests_table_if_not_exists.sql", "name": "default__get_create_tests_table_if_not_exists_statement", "macro_sql": "{% macro default__get_create_tests_table_if_not_exists_statement(database_name, schema_name, table_name) -%}\n    create table {{database_name}}.{{schema_name}}.{{table_name}} (\n        command_invocation_id STRING,\n        node_id STRING,\n        run_started_at TIMESTAMP,\n        name STRING,\n        depends_on_nodes STRING,\n        package_name STRING,\n        test_path STRING,\n        tags STRING\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.020066, "supported_languages": null}, "macro.dbt_artifacts.upload_exposures": {"unique_id": "macro.dbt_artifacts.upload_exposures", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/upload_exposures.sql", "original_file_path": "macros/upload_exposures.sql", "name": "upload_exposures", "macro_sql": "{% macro upload_exposures(graph) -%}\n    {% set src_dbt_exposures = source('dbt_artifacts', 'exposures') %}\n    {% set exposures = [] %}\n    {% for node in graph.exposures.values() %}\n        {% do exposures.append(node) %}\n    {% endfor %}\n\n    {% if exposures != [] %}\n        {% set exposure_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(6)) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(12)) }}\n        from values\n        {% for exposure in exposures -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ exposure.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n                '{{ exposure.name }}', {# name #}\n                '{{ exposure.type }}', {# type #}\n                '{{ tojson(exposure.owner) }}', {# owner #}\n                '{{ exposure.maturity }}', {# maturity #}\n                '{{ exposure.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                '{{ exposure.description | replace(\"'\",\"\\\\'\") }}', {# description #}\n                '{{ exposure.url }}', {# url #}\n                '{{ exposure.package_name }}', {# package_name #}\n                '{{ tojson(exposure.depends_on.nodes) }}' {# depends_on_nodes #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n\n        {{ dbt_artifacts.insert_into_metadata_table(\n            database_name=src_dbt_exposures.database,\n            schema_name=src_dbt_exposures.schema,\n            table_name=src_dbt_exposures.identifier,\n            content=exposure_values\n            )\n        }}\n    {% endif %}\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json", "macro.dbt_artifacts.insert_into_metadata_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.0272064, "supported_languages": null}, "macro.dbt_artifacts.create_seed_executions_table_if_not_exists": {"unique_id": "macro.dbt_artifacts.create_seed_executions_table_if_not_exists", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_seed_executions_table_if_not_exists.sql", "original_file_path": "macros/create_seed_executions_table_if_not_exists.sql", "name": "create_seed_executions_table_if_not_exists", "macro_sql": "{% macro create_seed_executions_table_if_not_exists(database_name, schema_name, table_name) -%}\n\n    {%- if adapter.get_relation(database=database_name, schema=schema_name, identifier=table_name) is none -%}\n        {% if database_name %}\n        {{ log(\"Creating table \" ~ adapter.quote(database_name ~ \".\" ~ schema_name ~ \".\" ~ table_name), info=true) }}\n        {% else %}\n        {{ log(\"Creating table \" ~ adapter.quote(schema_name ~ \".\" ~ table_name), info=true) }}\n        {% endif %}\n        {%- set query -%}\n            {{ adapter.dispatch('get_create_seed_executions_table_if_not_exists_statement', 'dbt_artifacts')(database_name, schema_name, table_name) }}\n        {% endset %}\n        {%- call statement(auto_begin=True) -%}\n            {{ query }}\n        {%- endcall -%}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__get_create_seed_executions_table_if_not_exists_statement", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.0311668, "supported_languages": null}, "macro.dbt_artifacts.spark__get_create_seed_executions_table_if_not_exists_statement": {"unique_id": "macro.dbt_artifacts.spark__get_create_seed_executions_table_if_not_exists_statement", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_seed_executions_table_if_not_exists.sql", "original_file_path": "macros/create_seed_executions_table_if_not_exists.sql", "name": "spark__get_create_seed_executions_table_if_not_exists_statement", "macro_sql": "{% macro spark__get_create_seed_executions_table_if_not_exists_statement(database_name, schema_name, table_name) -%}\n    create table {{schema_name}}.{{table_name}} (\n        command_invocation_id STRING,\n        node_id STRING,\n        run_started_at TIMESTAMP,\n        was_full_refresh BOOLEAN,\n        thread_id STRING,\n        status STRING,\n        compile_started_at TIMESTAMP,\n        query_completed_at TIMESTAMP,\n        total_node_runtime DOUBLE,\n        rows_affected INTEGER,\n        materialization STRING,\n        schema STRING,\n        name STRING\n    )\n    using delta\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.0315332, "supported_languages": null}, "macro.dbt_artifacts.snowflake__get_create_seed_executions_table_if_not_exists_statement": {"unique_id": "macro.dbt_artifacts.snowflake__get_create_seed_executions_table_if_not_exists_statement", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_seed_executions_table_if_not_exists.sql", "original_file_path": "macros/create_seed_executions_table_if_not_exists.sql", "name": "snowflake__get_create_seed_executions_table_if_not_exists_statement", "macro_sql": "{% macro snowflake__get_create_seed_executions_table_if_not_exists_statement(database_name, schema_name, table_name) -%}\n    create table {{database_name}}.{{schema_name}}.{{table_name}} (\n        command_invocation_id STRING,\n        node_id STRING,\n        run_started_at TIMESTAMP_TZ,\n        was_full_refresh BOOLEAN,\n        thread_id STRING,\n        status STRING,\n        compile_started_at TIMESTAMP_TZ,\n        query_completed_at TIMESTAMP_TZ,\n        total_node_runtime INTEGER,\n        rows_affected INTEGER,\n        materialization STRING,\n        schema STRING,\n        name STRING\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.0319293, "supported_languages": null}, "macro.dbt_artifacts.default__get_create_seed_executions_table_if_not_exists_statement": {"unique_id": "macro.dbt_artifacts.default__get_create_seed_executions_table_if_not_exists_statement", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_seed_executions_table_if_not_exists.sql", "original_file_path": "macros/create_seed_executions_table_if_not_exists.sql", "name": "default__get_create_seed_executions_table_if_not_exists_statement", "macro_sql": "{% macro default__get_create_seed_executions_table_if_not_exists_statement(database_name, schema_name, table_name) -%}\n    create table {{database_name}}.{{schema_name}}.{{table_name}} (\n        command_invocation_id STRING,\n        node_id STRING,\n        run_started_at TIMESTAMP,\n        was_full_refresh BOOLEAN,\n        thread_id STRING,\n        status STRING,\n        compile_started_at TIMESTAMP,\n        query_completed_at TIMESTAMP,\n        total_node_runtime INTEGER,\n        rows_affected INTEGER,\n        materialization STRING,\n        schema STRING,\n        name STRING\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.0323062, "supported_languages": null}, "macro.dbt_artifacts.create_model_executions_table_if_not_exists": {"unique_id": "macro.dbt_artifacts.create_model_executions_table_if_not_exists", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_model_executions_table_if_not_exists.sql", "original_file_path": "macros/create_model_executions_table_if_not_exists.sql", "name": "create_model_executions_table_if_not_exists", "macro_sql": "{% macro create_model_executions_table_if_not_exists(database_name, schema_name, table_name) -%}\n\n    {%- if adapter.get_relation(database=database_name, schema=schema_name, identifier=table_name) is none -%}\n        {% if database_name %}\n        {{ log(\"Creating table \" ~ adapter.quote(database_name ~ \".\" ~ schema_name ~ \".\" ~ table_name), info=true) }}\n        {% else %}\n        {{ log(\"Creating table \" ~ adapter.quote(schema_name ~ \".\" ~ table_name), info=true) }}\n        {% endif %}\n        {%- set query -%}\n            {{ adapter.dispatch('get_create_model_executions_table_if_not_exists_statement', 'dbt_artifacts')(database_name, schema_name, table_name) }}\n        {% endset %}\n        {%- call statement(auto_begin=True) -%}\n            {{ query }}\n        {%- endcall -%}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__get_create_model_executions_table_if_not_exists_statement", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.036275, "supported_languages": null}, "macro.dbt_artifacts.spark__get_create_model_executions_table_if_not_exists_statement": {"unique_id": "macro.dbt_artifacts.spark__get_create_model_executions_table_if_not_exists_statement", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_model_executions_table_if_not_exists.sql", "original_file_path": "macros/create_model_executions_table_if_not_exists.sql", "name": "spark__get_create_model_executions_table_if_not_exists_statement", "macro_sql": "{% macro spark__get_create_model_executions_table_if_not_exists_statement(database_name, schema_name, table_name) -%}\n    create table {{schema_name}}.{{table_name}} (\n        command_invocation_id STRING,\n        node_id STRING,\n        run_started_at TIMESTAMP,\n        was_full_refresh BOOLEAN,\n        thread_id STRING,\n        status STRING,\n        compile_started_at TIMESTAMP,\n        query_completed_at TIMESTAMP,\n        total_node_runtime DOUBLE,\n        rows_affected INTEGER,\n        materialization STRING,\n        schema STRING,\n        name STRING\n    )\n    using delta\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.0366507, "supported_languages": null}, "macro.dbt_artifacts.snowflake__get_create_model_executions_table_if_not_exists_statement": {"unique_id": "macro.dbt_artifacts.snowflake__get_create_model_executions_table_if_not_exists_statement", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_model_executions_table_if_not_exists.sql", "original_file_path": "macros/create_model_executions_table_if_not_exists.sql", "name": "snowflake__get_create_model_executions_table_if_not_exists_statement", "macro_sql": "{% macro snowflake__get_create_model_executions_table_if_not_exists_statement(database_name, schema_name, table_name) -%}\n    create table {{database_name}}.{{schema_name}}.{{table_name}} (\n        command_invocation_id STRING,\n        node_id STRING,\n        run_started_at TIMESTAMP_TZ,\n        was_full_refresh BOOLEAN,\n        thread_id STRING,\n        status STRING,\n        compile_started_at TIMESTAMP_TZ,\n        query_completed_at TIMESTAMP_TZ,\n        total_node_runtime DOUBLE,\n        rows_affected INTEGER,\n        materialization STRING,\n        schema STRING,\n        name STRING\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.0370278, "supported_languages": null}, "macro.dbt_artifacts.default__get_create_model_executions_table_if_not_exists_statement": {"unique_id": "macro.dbt_artifacts.default__get_create_model_executions_table_if_not_exists_statement", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_model_executions_table_if_not_exists.sql", "original_file_path": "macros/create_model_executions_table_if_not_exists.sql", "name": "default__get_create_model_executions_table_if_not_exists_statement", "macro_sql": "{% macro default__get_create_model_executions_table_if_not_exists_statement(database_name, schema_name, table_name) -%}\n    create table {{database_name}}.{{schema_name}}.{{table_name}} (\n        command_invocation_id STRING,\n        node_id STRING,\n        run_started_at TIMESTAMP,\n        was_full_refresh BOOLEAN,\n        thread_id STRING,\n        status STRING,\n        compile_started_at TIMESTAMP,\n        query_completed_at TIMESTAMP,\n        total_node_runtime INTEGER,\n        rows_affected INTEGER,\n        materialization STRING,\n        schema STRING,\n        name STRING\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.037412, "supported_languages": null}, "macro.dbt_artifacts.create_invocations_table_if_not_exists": {"unique_id": "macro.dbt_artifacts.create_invocations_table_if_not_exists", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_invocations_table_if_not_exists.sql", "original_file_path": "macros/create_invocations_table_if_not_exists.sql", "name": "create_invocations_table_if_not_exists", "macro_sql": "{% macro create_invocations_table_if_not_exists(database_name, schema_name, table_name) -%}\n\n    {%- if adapter.get_relation(database=database_name, schema=schema_name, identifier=table_name) is none -%}\n        {% if database_name %}\n        {{ log(\"Creating table \" ~ adapter.quote(database_name ~ \".\" ~ schema_name ~ \".\" ~ table_name), info=true) }}\n        {% else %}\n        {{ log(\"Creating table \" ~ adapter.quote(schema_name ~ \".\" ~ table_name), info=true) }}\n        {% endif %}\n        {%- set query -%}\n            {{ adapter.dispatch('get_create_invocations_table_if_not_exists_statement', 'dbt_artifacts')(database_name, schema_name, table_name) }}\n        {% endset %}\n        {%- call statement(auto_begin=True) -%}\n            {{ query }}\n        {%- endcall -%}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__get_create_invocations_table_if_not_exists_statement", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.0418112, "supported_languages": null}, "macro.dbt_artifacts.spark__get_create_invocations_table_if_not_exists_statement": {"unique_id": "macro.dbt_artifacts.spark__get_create_invocations_table_if_not_exists_statement", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_invocations_table_if_not_exists.sql", "original_file_path": "macros/create_invocations_table_if_not_exists.sql", "name": "spark__get_create_invocations_table_if_not_exists_statement", "macro_sql": "{% macro spark__get_create_invocations_table_if_not_exists_statement(database_name, schema_name, table_name) -%}\n    create table {{schema_name}}.{{table_name}} (\n        command_invocation_id STRING,\n        dbt_version STRING,\n        project_name STRING,\n        run_started_at TIMESTAMP,\n        dbt_command STRING,\n        full_refresh_flag BOOLEAN,\n        target_profile_name STRING,\n        target_name STRING,\n        target_schema STRING,\n        target_threads INTEGER,\n        dbt_cloud_project_id STRING,\n        dbt_cloud_job_id STRING,\n        dbt_cloud_run_id STRING,\n        dbt_cloud_run_reason_category STRING,\n        dbt_cloud_run_reason STRING,\n        env_vars STRING,\n        dbt_vars STRING\n    )\n    using delta\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.0422146, "supported_languages": null}, "macro.dbt_artifacts.snowflake__get_create_invocations_table_if_not_exists_statement": {"unique_id": "macro.dbt_artifacts.snowflake__get_create_invocations_table_if_not_exists_statement", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_invocations_table_if_not_exists.sql", "original_file_path": "macros/create_invocations_table_if_not_exists.sql", "name": "snowflake__get_create_invocations_table_if_not_exists_statement", "macro_sql": "{% macro snowflake__get_create_invocations_table_if_not_exists_statement(database_name, schema_name, table_name) -%}\n    create table {{database_name}}.{{schema_name}}.{{table_name}} (\n        command_invocation_id STRING,\n        dbt_version STRING,\n        project_name STRING,\n        run_started_at TIMESTAMP_TZ,\n        dbt_command STRING,\n        full_refresh_flag BOOLEAN,\n        target_profile_name STRING,\n        target_name STRING,\n        target_schema STRING,\n        target_threads INTEGER,\n        dbt_cloud_project_id STRING,\n        dbt_cloud_job_id STRING,\n        dbt_cloud_run_id STRING,\n        dbt_cloud_run_reason_category STRING,\n        dbt_cloud_run_reason STRING,\n        env_vars OBJECT,\n        dbt_vars OBJECT\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.04261, "supported_languages": null}, "macro.dbt_artifacts.default__get_create_invocations_table_if_not_exists_statement": {"unique_id": "macro.dbt_artifacts.default__get_create_invocations_table_if_not_exists_statement", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_invocations_table_if_not_exists.sql", "original_file_path": "macros/create_invocations_table_if_not_exists.sql", "name": "default__get_create_invocations_table_if_not_exists_statement", "macro_sql": "{% macro default__get_create_invocations_table_if_not_exists_statement(database_name, schema_name, table_name) -%}\n    create table {{database_name}}.{{schema_name}}.{{table_name}} (\n        command_invocation_id STRING,\n        dbt_version STRING,\n        project_name STRING,\n        run_started_at TIMESTAMP,\n        dbt_command STRING,\n        full_refresh_flag BOOLEAN,\n        target_profile_name STRING,\n        target_name STRING,\n        target_schema STRING,\n        target_threads INTEGER,\n        dbt_cloud_project_id STRING,\n        dbt_cloud_job_id STRING,\n        dbt_cloud_run_id STRING,\n        dbt_cloud_run_reason_category STRING,\n        dbt_cloud_run_reason STRING,\n        env_vars STRING,\n        dbt_vars STRING\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.043, "supported_languages": null}, "macro.dbt_artifacts.upload_seeds": {"unique_id": "macro.dbt_artifacts.upload_seeds", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/upload_seeds.sql", "original_file_path": "macros/upload_seeds.sql", "name": "upload_seeds", "macro_sql": "{% macro upload_seeds(graph) -%}\n    {% set src_dbt_seeds = source('dbt_artifacts', 'seeds') %}\n    {% set seeds = [] %}\n    {% for node in graph.nodes.values() | selectattr(\"resource_type\", \"equalto\", \"seed\") %}\n        {% do seeds.append(node) %}\n    {% endfor %}\n\n    {% if seeds != [] %}\n        {% set seed_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }}\n        from values\n        {% for seed in seeds -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ seed.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n                '{{ seed.database }}', {# database #}\n                '{{ seed.schema }}', {# schema #}\n                '{{ seed.name }}', {# name #}\n                '{{ seed.package_name }}', {# package_name #}\n                '{{ seed.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                '{{ seed.checksum.checksum }}' {# checksum #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n\n        {{ dbt_artifacts.insert_into_metadata_table(\n            database_name=src_dbt_seeds.database,\n            schema_name=src_dbt_seeds.schema,\n            table_name=src_dbt_seeds.identifier,\n            content=seed_values\n            )\n        }}\n    {% endif %}\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.insert_into_metadata_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.0485513, "supported_languages": null}, "macro.dbt_artifacts.upload_snapshots": {"unique_id": "macro.dbt_artifacts.upload_snapshots", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/upload_snapshots.sql", "original_file_path": "macros/upload_snapshots.sql", "name": "upload_snapshots", "macro_sql": "{% macro upload_snapshots(graph) -%}\n    {% set src_dbt_snapshots = source('dbt_artifacts', 'snapshots') %}\n    {% set snapshots = [] %}\n    {% for node in graph.nodes.values() | selectattr(\"resource_type\", \"equalto\", \"snapshot\") %}\n        {% do snapshots.append(node) %}\n    {% endfor %}\n\n    {% if snapshots != [] %}\n        {% set snapshot_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(7)) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }}\n        from values\n        {% for snapshot in snapshots -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ snapshot.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n                '{{ snapshot.database }}', {# database #}\n                '{{ snapshot.schema }}', {# schema #}\n                '{{ snapshot.name }}', {# name #}\n                '{{ tojson(snapshot.depends_on.nodes) }}', {# depends_on_nodes #}\n                '{{ snapshot.package_name }}', {# package_name #}\n                '{{ snapshot.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                '{{ snapshot.checksum.checksum }}', {# checksum #}\n                '{{ snapshot.config.strategy }}' {# strategy #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n\n        {{ dbt_artifacts.insert_into_metadata_table(\n            database_name=src_dbt_snapshots.database,\n            schema_name=src_dbt_snapshots.schema,\n            table_name=src_dbt_snapshots.identifier,\n            content=snapshot_values\n            )\n        }}\n    {% endif %}\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json", "macro.dbt_artifacts.insert_into_metadata_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.0549967, "supported_languages": null}, "macro.dbt_artifacts.upload_invocations": {"unique_id": "macro.dbt_artifacts.upload_invocations", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/upload_invocations.sql", "original_file_path": "macros/upload_invocations.sql", "name": "upload_invocations", "macro_sql": "{% macro upload_invocations() -%}\n    {% set src_dbt_invocations = source('dbt_artifacts', 'invocations') %}\n\n    {% set invocation_values %}\n    select\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n        nullif({{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }}, ''),\n        nullif({{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }}, ''),\n        nullif({{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }}, ''),\n        nullif({{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }}, ''),\n        nullif({{ adapter.dispatch('column_identifier', 'dbt_artifacts')(15) }}, ''),\n        {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(16)) }},\n        {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(17)) }}\n    from values\n    (\n        '{{ invocation_id }}', {# command_invocation_id #}\n        '{{ dbt_version }}', {# dbt_version #}\n        '{{ project_name }}', {# project_name #}\n        '{{ run_started_at }}', {# run_started_at #}\n        '{{ flags.WHICH }}', {# dbt_command #}\n        '{{ flags.FULL_REFRESH }}', {# full_refresh_flag #}\n        '{{ target.profile_name }}', {# target_profile_name #}\n        '{{ target.name }}', {# target_name #}\n        '{{ target.schema }}', {# target_schema #}\n        {{ target.threads }}, {# target_threads #}\n\n        '{{ env_var('DBT_CLOUD_PROJECT_ID', '') }}', {# dbt_cloud_project_id #}\n        '{{ env_var('DBT_CLOUD_JOB_ID', '') }}', {# dbt_cloud_job_id #}\n        '{{ env_var('DBT_CLOUD_RUN_ID', '') }}', {# dbt_cloud_run_id #}\n        '{{ env_var('DBT_CLOUD_RUN_REASON_CATEGORY', '') }}', {# dbt_cloud_run_reason_category #}\n        '{{ env_var('DBT_CLOUD_RUN_REASON', '') }}', {# dbt_cloud_run_reason #}\n\n        {% if var('env_vars', none) %}\n            {% set env_vars_dict = {} %}\n            {% for env_variable in var('env_vars') %}\n                {% do env_vars_dict.update({env_variable: env_var(env_variable)}) %}\n            {% endfor %}\n            '{{ tojson(env_vars_dict) }}', {# env_vars #}\n        {% else %}\n            null, {# env_vars #}\n        {% endif %}\n\n        {% if var('dbt_vars', none) %}\n            {% set dbt_vars_dict = {} %}\n            {% for dbt_var in var('dbt_vars') %}\n                {% do dbt_vars_dict.update({dbt_var: var(dbt_var)}) %}\n            {% endfor %}\n            '{{ tojson(dbt_vars_dict) }}' {# dbt_vars #}\n        {% else %}\n            null {# dbt_vars #}\n        {% endif %}\n    )\n    {% endset %}\n\n    {{ dbt_artifacts.insert_into_metadata_table(\n        database_name=src_dbt_invocations.database,\n        schema_name=src_dbt_invocations.schema,\n        table_name=src_dbt_invocations.identifier,\n        content=invocation_values\n        )\n    }}\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json", "macro.dbt_artifacts.insert_into_metadata_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.0651746, "supported_languages": null}, "macro.dbt_artifacts.upload_snapshot_executions": {"unique_id": "macro.dbt_artifacts.upload_snapshot_executions", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/upload_snapshot_executions.sql", "original_file_path": "macros/upload_snapshot_executions.sql", "name": "upload_snapshot_executions", "macro_sql": "{% macro upload_snapshot_executions(results) -%}\n    {% set src_dbt_snapshot_executions = source('dbt_artifacts', 'snapshot_executions') %}\n    {% set snapshots = [] %}\n    {% for result in results  %}\n        {% if result.node.resource_type == \"snapshot\" %}\n            {% do snapshots.append(result) %}\n        {% endif %}\n    {% endfor %}\n\n    {% if snapshots != [] %}\n        {% set snapshot_execution_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }}\n        from values\n        {% for model in results if model.node.resource_type == \"snapshot\" -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = model.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                '{{ config_full_refresh }}', {# was_full_refresh #}\n\n                '{{ model.thread_id }}', {# thread_id #}\n                '{{ model.status }}', {# status #}\n\n                {% if model.timing != [] %}\n                    {% for stage in model.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in model.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ model.execution_time }}, {# total_node_runtime #}\n                null, -- rows_affected not available {# Databricks #}\n                '{{ model.node.config.materialized }}', {# materialization #}\n                '{{ model.node.schema }}', {# schema #}\n                '{{ model.node.name }}' {# name #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n\n        {{ dbt_artifacts.insert_into_metadata_table(\n            database_name=src_dbt_snapshot_executions.database,\n            schema_name=src_dbt_snapshot_executions.schema,\n            table_name=src_dbt_snapshot_executions.identifier,\n            content=snapshot_execution_values\n            )\n        }}\n    {% endif %}\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.insert_into_metadata_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.073944, "supported_languages": null}, "macro.dbt_artifacts.upload_test_executions": {"unique_id": "macro.dbt_artifacts.upload_test_executions", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/upload_test_executions.sql", "original_file_path": "macros/upload_test_executions.sql", "name": "upload_test_executions", "macro_sql": "{% macro upload_test_executions(results) -%}\n    {% set src_dbt_test_executions = source('dbt_artifacts', 'test_executions') %}\n    {% set tests = [] %}\n    {% for result in results  %}\n        {% if result.node.resource_type == \"test\" %}\n            {% do tests.append(result) %}\n        {% endif %}\n    {% endfor %}\n\n    {% if tests != [] %}\n        {% set test_execution_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }}\n        from values\n        {% for test in tests -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ test.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = test.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                '{{ config_full_refresh }}', {# was_full_refresh #}\n\n                '{{ test.thread_id }}', {# thread_id #}\n                '{{ test.status }}', {# status #}\n\n                {% if test.timing != [] %}\n                    {% for stage in test.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in test.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ test.execution_time }}, {# total_node_runtime #}\n                null, {# rows_affected not available in Databricks #}\n                {{ 'null' if test.failures is none else test.failures }} {# failures #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n\n        {{ dbt_artifacts.insert_into_metadata_table(\n            database_name=src_dbt_test_executions.database,\n            schema_name=src_dbt_test_executions.schema,\n            table_name=src_dbt_test_executions.identifier,\n            content=test_execution_values\n            )\n        }}\n    {% endif %}\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.insert_into_metadata_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.0818808, "supported_languages": null}, "macro.dbt_artifacts.create_sources_table_if_not_exists": {"unique_id": "macro.dbt_artifacts.create_sources_table_if_not_exists", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_sources_table_if_not_exists.sql", "original_file_path": "macros/create_sources_table_if_not_exists.sql", "name": "create_sources_table_if_not_exists", "macro_sql": "{% macro create_sources_table_if_not_exists(database_name, schema_name, table_name) -%}\n\n    {%- if adapter.get_relation(database=database_name, schema=schema_name, identifier=table_name) is none -%}\n        {% if database_name %}\n        {{ log(\"Creating table \" ~ adapter.quote(database_name ~ \".\" ~ schema_name ~ \".\" ~ table_name), info=true) }}\n        {% else %}\n        {{ log(\"Creating table \" ~ adapter.quote(schema_name ~ \".\" ~ table_name), info=true) }}\n        {% endif %}\n        {%- set query -%}\n            {{ adapter.dispatch('get_create_sources_table_if_not_exists_statement', 'dbt_artifacts')(database_name, schema_name, table_name) }}\n        {% endset %}\n        {%- call statement(auto_begin=True) -%}\n            {{ query }}\n        {%- endcall -%}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__get_create_sources_table_if_not_exists_statement", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.0856135, "supported_languages": null}, "macro.dbt_artifacts.spark__get_create_sources_table_if_not_exists_statement": {"unique_id": "macro.dbt_artifacts.spark__get_create_sources_table_if_not_exists_statement", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_sources_table_if_not_exists.sql", "original_file_path": "macros/create_sources_table_if_not_exists.sql", "name": "spark__get_create_sources_table_if_not_exists_statement", "macro_sql": "{% macro spark__get_create_sources_table_if_not_exists_statement(database_name, schema_name, table_name) -%}\n    create table {{schema_name}}.{{table_name}} (\n        command_invocation_id STRING,\n        node_id STRING,\n        run_started_at TIMESTAMP,\n        database STRING,\n        schema STRING,\n        source_name STRING,\n        loader STRING,\n        name STRING,\n        identifier STRING,\n        loaded_at_field STRING,\n        freshness STRING\n    )\n    using delta\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.0859969, "supported_languages": null}, "macro.dbt_artifacts.snowflake__get_create_sources_table_if_not_exists_statement": {"unique_id": "macro.dbt_artifacts.snowflake__get_create_sources_table_if_not_exists_statement", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_sources_table_if_not_exists.sql", "original_file_path": "macros/create_sources_table_if_not_exists.sql", "name": "snowflake__get_create_sources_table_if_not_exists_statement", "macro_sql": "{% macro snowflake__get_create_sources_table_if_not_exists_statement(database_name, schema_name, table_name) -%}\n    create table {{database_name}}.{{schema_name}}.{{table_name}} (\n        command_invocation_id STRING,\n        node_id STRING,\n        run_started_at TIMESTAMP_TZ,\n        database STRING,\n        schema STRING,\n        source_name STRING,\n        loader STRING,\n        name STRING,\n        identifier STRING,\n        loaded_at_field STRING,\n        freshness ARRAY\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.0863738, "supported_languages": null}, "macro.dbt_artifacts.default__get_create_sources_table_if_not_exists_statement": {"unique_id": "macro.dbt_artifacts.default__get_create_sources_table_if_not_exists_statement", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_sources_table_if_not_exists.sql", "original_file_path": "macros/create_sources_table_if_not_exists.sql", "name": "default__get_create_sources_table_if_not_exists_statement", "macro_sql": "{% macro default__get_create_sources_table_if_not_exists_statement(database_name, schema_name, table_name) -%}\n    create table {{database_name}}.{{schema_name}}.{{table_name}} (\n        command_invocation_id STRING,\n        node_id STRING,\n        run_started_at TIMESTAMP,\n        database STRING,\n        schema STRING,\n        source_name STRING,\n        loader STRING,\n        name STRING,\n        identifier STRING,\n        loaded_at_field STRING,\n        freshness STRING\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.086741, "supported_languages": null}, "macro.dbt_artifacts.column_identifier": {"unique_id": "macro.dbt_artifacts.column_identifier", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/column_identifier.sql", "original_file_path": "macros/column_identifier.sql", "name": "column_identifier", "macro_sql": "{% macro column_identifier(column_index) -%}\n  {{ return(adapter.dispatch('column_identifier')(column_index)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__column_identifier"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.0876052, "supported_languages": null}, "macro.dbt_artifacts.default__column_identifier": {"unique_id": "macro.dbt_artifacts.default__column_identifier", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/column_identifier.sql", "original_file_path": "macros/column_identifier.sql", "name": "default__column_identifier", "macro_sql": "{% macro default__column_identifier(column_index) -%}\n    {{ column_index }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.0878327, "supported_languages": null}, "macro.dbt_artifacts.snowflake__column_identifier": {"unique_id": "macro.dbt_artifacts.snowflake__column_identifier", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/column_identifier.sql", "original_file_path": "macros/column_identifier.sql", "name": "snowflake__column_identifier", "macro_sql": "{% macro snowflake__column_identifier(column_index) -%}\n    ${{ column_index }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.0881174, "supported_languages": null}, "macro.dbt_artifacts.spark__column_identifier": {"unique_id": "macro.dbt_artifacts.spark__column_identifier", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/column_identifier.sql", "original_file_path": "macros/column_identifier.sql", "name": "spark__column_identifier", "macro_sql": "{% macro spark__column_identifier(column_index) -%}\n    col{{ column_index }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.0883412, "supported_languages": null}, "macro.dbt_artifacts.upload_seed_executions": {"unique_id": "macro.dbt_artifacts.upload_seed_executions", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/upload_seed_executions.sql", "original_file_path": "macros/upload_seed_executions.sql", "name": "upload_seed_executions", "macro_sql": "{% macro upload_seed_executions(results) -%}\n    {% set src_dbt_seed_executions = source('dbt_artifacts', 'seed_executions') %}\n    {% set seeds = [] %}\n    {% for result in results  %}\n        {% if result.node.resource_type == \"seed\" %}\n            {% do seeds.append(result) %}\n        {% endif %}\n    {% endfor %}\n\n    {% if seeds != [] %}\n        {% set seed_execution_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }}\n        from values\n        {% for model in results if model.node.resource_type == \"seed\" -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = model.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                '{{ config_full_refresh }}', {# was_full_refresh #}\n\n                '{{ model.thread_id }}', {# thread_id #}\n                '{{ model.status }}', {# status #}\n\n                {% if model.timing != [] %}\n                    {% for stage in model.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in model.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ model.execution_time }}, {# total_node_runtime #}\n                null, -- rows_affected not available {# Databricks #}\n                '{{ model.node.config.materialized }}', {# materialization #}\n                '{{ model.node.schema }}', {# schema #}\n                '{{ model.node.name }}' {# name #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n\n        {{ dbt_artifacts.insert_into_metadata_table(\n            database_name=src_dbt_seed_executions.database,\n            schema_name=src_dbt_seed_executions.schema,\n            table_name=src_dbt_seed_executions.identifier,\n            content=seed_execution_values\n            )\n        }}\n    {% endif %}\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.insert_into_metadata_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.097199, "supported_languages": null}, "macro.dbt_artifacts.create_snapshots_table_if_not_exists": {"unique_id": "macro.dbt_artifacts.create_snapshots_table_if_not_exists", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_snapshots_table_if_not_exists.sql", "original_file_path": "macros/create_snapshots_table_if_not_exists.sql", "name": "create_snapshots_table_if_not_exists", "macro_sql": "{% macro create_snapshots_table_if_not_exists(database_name, schema_name, table_name) -%}\n\n    {%- if adapter.get_relation(database=database_name, schema=schema_name, identifier=table_name) is none -%}\n        {% if database_name %}\n        {{ log(\"Creating table \" ~ adapter.quote(database_name ~ \".\" ~ schema_name ~ \".\" ~ table_name), info=true) }}\n        {% else %}\n        {{ log(\"Creating table \" ~ adapter.quote(schema_name ~ \".\" ~ table_name), info=true) }}\n        {% endif %}\n        {%- set query -%}\n            {{ adapter.dispatch('get_create_snapshots_table_if_not_exists_statement', 'dbt_artifacts')(database_name, schema_name, table_name) }}\n        {% endset %}\n        {%- call statement(auto_begin=True) -%}\n            {{ query }}\n        {%- endcall -%}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__get_create_snapshots_table_if_not_exists_statement", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1009479, "supported_languages": null}, "macro.dbt_artifacts.spark__get_create_snapshots_table_if_not_exists_statement": {"unique_id": "macro.dbt_artifacts.spark__get_create_snapshots_table_if_not_exists_statement", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_snapshots_table_if_not_exists.sql", "original_file_path": "macros/create_snapshots_table_if_not_exists.sql", "name": "spark__get_create_snapshots_table_if_not_exists_statement", "macro_sql": "{% macro spark__get_create_snapshots_table_if_not_exists_statement(database_name, schema_name, table_name) -%}\n    create table {{schema_name}}.{{table_name}} (\n        command_invocation_id STRING,\n        node_id STRING,\n        run_started_at TIMESTAMP,\n        database STRING,\n        schema STRING,\n        name STRING,\n        depends_on_nodes STRING,\n        package_name STRING,\n        path STRING,\n        checksum STRING,\n        strategy STRING\n    )\n    using delta\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1013167, "supported_languages": null}, "macro.dbt_artifacts.snowflake__get_create_snapshots_table_if_not_exists_statement": {"unique_id": "macro.dbt_artifacts.snowflake__get_create_snapshots_table_if_not_exists_statement", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_snapshots_table_if_not_exists.sql", "original_file_path": "macros/create_snapshots_table_if_not_exists.sql", "name": "snowflake__get_create_snapshots_table_if_not_exists_statement", "macro_sql": "{% macro snowflake__get_create_snapshots_table_if_not_exists_statement(database_name, schema_name, table_name) -%}\n    create table {{database_name}}.{{schema_name}}.{{table_name}} (\n        command_invocation_id STRING,\n        node_id STRING,\n        run_started_at TIMESTAMP_TZ,\n        database STRING,\n        schema STRING,\n        name STRING,\n        depends_on_nodes ARRAY,\n        package_name STRING,\n        path STRING,\n        checksum STRING,\n        strategy STRING\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1016858, "supported_languages": null}, "macro.dbt_artifacts.default__get_create_snapshots_table_if_not_exists_statement": {"unique_id": "macro.dbt_artifacts.default__get_create_snapshots_table_if_not_exists_statement", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_snapshots_table_if_not_exists.sql", "original_file_path": "macros/create_snapshots_table_if_not_exists.sql", "name": "default__get_create_snapshots_table_if_not_exists_statement", "macro_sql": "{% macro default__get_create_snapshots_table_if_not_exists_statement(database_name, schema_name, table_name) -%}\n    create table {{database_name}}.{{schema_name}}.{{table_name}} (\n        command_invocation_id STRING,\n        node_id STRING,\n        run_started_at TIMESTAMP,\n        database STRING,\n        schema STRING,\n        name STRING,\n        depends_on_nodes STRING,\n        package_name STRING,\n        path STRING,\n        checksum STRING,\n        strategy STRING\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1020665, "supported_languages": null}, "macro.dbt_artifacts.create_seeds_table_if_not_exists": {"unique_id": "macro.dbt_artifacts.create_seeds_table_if_not_exists", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_seeds_table_if_not_exists.sql", "original_file_path": "macros/create_seeds_table_if_not_exists.sql", "name": "create_seeds_table_if_not_exists", "macro_sql": "{% macro create_seeds_table_if_not_exists(database_name, schema_name, table_name) -%}\n\n    {%- if adapter.get_relation(database=database_name, schema=schema_name, identifier=table_name) is none -%}\n        {% if database_name %}\n        {{ log(\"Creating table \" ~ adapter.quote(database_name ~ \".\" ~ schema_name ~ \".\" ~ table_name), info=true) }}\n        {% else %}\n        {{ log(\"Creating table \" ~ adapter.quote(schema_name ~ \".\" ~ table_name), info=true) }}\n        {% endif %}\n        {%- set query -%}\n            {{ adapter.dispatch('get_create_seeds_table_if_not_exists_statement', 'dbt_artifacts')(database_name, schema_name, table_name) }}\n        {% endset %}\n        {%- call statement(auto_begin=True) -%}\n            {{ query }}\n        {%- endcall -%}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__get_create_seeds_table_if_not_exists_statement", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1055777, "supported_languages": null}, "macro.dbt_artifacts.spark__get_create_seeds_table_if_not_exists_statement": {"unique_id": "macro.dbt_artifacts.spark__get_create_seeds_table_if_not_exists_statement", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_seeds_table_if_not_exists.sql", "original_file_path": "macros/create_seeds_table_if_not_exists.sql", "name": "spark__get_create_seeds_table_if_not_exists_statement", "macro_sql": "{% macro spark__get_create_seeds_table_if_not_exists_statement(database_name, schema_name, table_name) -%}\n    create table {{schema_name}}.{{table_name}} (\n        command_invocation_id STRING,\n        node_id STRING,\n        run_started_at TIMESTAMP,\n        database STRING,\n        schema STRING,\n        name STRING,\n        package_name STRING,\n        path STRING,\n        checksum STRING\n    )\n    using delta\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.105935, "supported_languages": null}, "macro.dbt_artifacts.snowflake__get_create_seeds_table_if_not_exists_statement": {"unique_id": "macro.dbt_artifacts.snowflake__get_create_seeds_table_if_not_exists_statement", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_seeds_table_if_not_exists.sql", "original_file_path": "macros/create_seeds_table_if_not_exists.sql", "name": "snowflake__get_create_seeds_table_if_not_exists_statement", "macro_sql": "{% macro snowflake__get_create_seeds_table_if_not_exists_statement(database_name, schema_name, table_name) -%}\n    create table {{database_name}}.{{schema_name}}.{{table_name}} (\n        command_invocation_id STRING,\n        node_id STRING,\n        run_started_at TIMESTAMP_TZ,\n        database STRING,\n        schema STRING,\n        name STRING,\n        package_name STRING,\n        path STRING,\n        checksum STRING\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.106319, "supported_languages": null}, "macro.dbt_artifacts.default__get_create_seeds_table_if_not_exists_statement": {"unique_id": "macro.dbt_artifacts.default__get_create_seeds_table_if_not_exists_statement", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_seeds_table_if_not_exists.sql", "original_file_path": "macros/create_seeds_table_if_not_exists.sql", "name": "default__get_create_seeds_table_if_not_exists_statement", "macro_sql": "{% macro default__get_create_seeds_table_if_not_exists_statement(database_name, schema_name, table_name) -%}\n    create table {{database_name}}.{{schema_name}}.{{table_name}} (\n        command_invocation_id STRING,\n        node_id STRING,\n        run_started_at TIMESTAMP,\n        database STRING,\n        schema STRING,\n        name STRING,\n        package_name STRING,\n        path STRING,\n        checksum STRING\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.106684, "supported_languages": null}, "macro.dbt_artifacts.upload_tests": {"unique_id": "macro.dbt_artifacts.upload_tests", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/upload_tests.sql", "original_file_path": "macros/upload_tests.sql", "name": "upload_tests", "macro_sql": "{% macro upload_tests(graph) -%}\n    {% set src_dbt_tests = source('dbt_artifacts', 'tests') %}\n    {% set tests = [] %}\n    {% for node in graph.nodes.values() | selectattr(\"resource_type\", \"equalto\", \"test\") %}\n        {% do tests.append(node) %}\n    {% endfor %}\n\n    {% if tests != [] %}\n        {% set test_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(5)) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(8)) }}\n        from values\n        {% for test in tests -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ test.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n                '{{ test.name }}', {# name #}\n                '{{ tojson(test.depends_on.nodes) }}', {# depends_on_nodes #}\n                '{{ test.package_name }}', {# package_name #}\n                '{{ test.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# test_path #}\n                '{{ tojson(test.tags) }}' {# tags #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n\n        {{ dbt_artifacts.insert_into_metadata_table(\n            database_name=src_dbt_tests.database,\n            schema_name=src_dbt_tests.schema,\n            table_name=src_dbt_tests.identifier,\n            content=test_values\n            )\n        }}\n    {% endif %}\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json", "macro.dbt_artifacts.insert_into_metadata_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1121342, "supported_languages": null}, "macro.dbt_artifacts.create_test_executions_table_if_not_exists": {"unique_id": "macro.dbt_artifacts.create_test_executions_table_if_not_exists", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_test_executions_table_if_not_exists.sql", "original_file_path": "macros/create_test_executions_table_if_not_exists.sql", "name": "create_test_executions_table_if_not_exists", "macro_sql": "{% macro create_test_executions_table_if_not_exists(database_name, schema_name, table_name) -%}\n\n    {%- if adapter.get_relation(database=database_name, schema=schema_name, identifier=table_name) is none -%}\n        {% if database_name %}\n        {{ log(\"Creating table \" ~ adapter.quote(database_name ~ \".\" ~ schema_name ~ \".\" ~ table_name), info=true) }}\n        {% else %}\n        {{ log(\"Creating table \" ~ adapter.quote(schema_name ~ \".\" ~ table_name), info=true) }}\n        {% endif %}\n        {%- set query -%}\n            {{ adapter.dispatch('get_create_test_executions_table_if_not_exists_statement', 'dbt_artifacts')(database_name, schema_name, table_name) }}\n        {% endset %}\n        {%- call statement(auto_begin=True) -%}\n            {{ query }}\n        {%- endcall -%}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__get_create_test_executions_table_if_not_exists_statement", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1160347, "supported_languages": null}, "macro.dbt_artifacts.spark__get_create_test_executions_table_if_not_exists_statement": {"unique_id": "macro.dbt_artifacts.spark__get_create_test_executions_table_if_not_exists_statement", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_test_executions_table_if_not_exists.sql", "original_file_path": "macros/create_test_executions_table_if_not_exists.sql", "name": "spark__get_create_test_executions_table_if_not_exists_statement", "macro_sql": "{% macro spark__get_create_test_executions_table_if_not_exists_statement(database_name, schema_name, table_name) -%}\n    create table {{schema_name}}.{{table_name}} (\n        command_invocation_id STRING,\n        node_id STRING,\n        run_started_at TIMESTAMP,\n        was_full_refresh BOOLEAN,\n        thread_id STRING,\n        status STRING,\n        compile_started_at TIMESTAMP,\n        query_completed_at TIMESTAMP,\n        total_node_runtime DOUBLE,\n        rows_affected INTEGER,\n        failures INTEGER\n    )\n    using delta\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.116411, "supported_languages": null}, "macro.dbt_artifacts.snowflake__get_create_test_executions_table_if_not_exists_statement": {"unique_id": "macro.dbt_artifacts.snowflake__get_create_test_executions_table_if_not_exists_statement", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_test_executions_table_if_not_exists.sql", "original_file_path": "macros/create_test_executions_table_if_not_exists.sql", "name": "snowflake__get_create_test_executions_table_if_not_exists_statement", "macro_sql": "{% macro snowflake__get_create_test_executions_table_if_not_exists_statement(database_name, schema_name, table_name) -%}\n    create table {{database_name}}.{{schema_name}}.{{table_name}} (\n        command_invocation_id STRING,\n        node_id STRING,\n        run_started_at TIMESTAMP_TZ,\n        was_full_refresh BOOLEAN,\n        thread_id STRING,\n        status STRING,\n        compile_started_at TIMESTAMP_TZ,\n        query_completed_at TIMESTAMP_TZ,\n        total_node_runtime DOUBLE,\n        rows_affected INTEGER,\n        failures INTEGER\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1167846, "supported_languages": null}, "macro.dbt_artifacts.default__get_create_test_executions_table_if_not_exists_statement": {"unique_id": "macro.dbt_artifacts.default__get_create_test_executions_table_if_not_exists_statement", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_test_executions_table_if_not_exists.sql", "original_file_path": "macros/create_test_executions_table_if_not_exists.sql", "name": "default__get_create_test_executions_table_if_not_exists_statement", "macro_sql": "{% macro default__get_create_test_executions_table_if_not_exists_statement(database_name, schema_name, table_name) -%}\n    create table {{database_name}}.{{schema_name}}.{{table_name}} (\n        command_invocation_id STRING,\n        node_id STRING,\n        run_started_at TIMESTAMP,\n        was_full_refresh BOOLEAN,\n        thread_id STRING,\n        status STRING,\n        compile_started_at TIMESTAMP,\n        query_completed_at TIMESTAMP,\n        total_node_runtime INTEGER,\n        rows_affected INTEGER,\n        failures INTEGER\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.117157, "supported_languages": null}, "macro.dbt_artifacts.create_snapshot_executions_table_if_not_exists": {"unique_id": "macro.dbt_artifacts.create_snapshot_executions_table_if_not_exists", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_snapshot_executions_table_if_not_exists.sql", "original_file_path": "macros/create_snapshot_executions_table_if_not_exists.sql", "name": "create_snapshot_executions_table_if_not_exists", "macro_sql": "{% macro create_snapshot_executions_table_if_not_exists(database_name, schema_name, table_name) -%}\n\n    {%- if adapter.get_relation(database=database_name, schema=schema_name, identifier=table_name) is none -%}\n        {% if database_name %}\n        {{ log(\"Creating table \" ~ adapter.quote(database_name ~ \".\" ~ schema_name ~ \".\" ~ table_name), info=true) }}\n        {% else %}\n        {{ log(\"Creating table \" ~ adapter.quote(schema_name ~ \".\" ~ table_name), info=true) }}\n        {% endif %}\n        {%- set query -%}\n            {{ adapter.dispatch('get_create_snapshot_executions_table_if_not_exists_statement', 'dbt_artifacts')(database_name, schema_name, table_name) }}\n        {% endset %}\n        {%- call statement(auto_begin=True) -%}\n            {{ query }}\n        {%- endcall -%}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__get_create_snapshot_executions_table_if_not_exists_statement", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1211557, "supported_languages": null}, "macro.dbt_artifacts.spark__get_create_snapshot_executions_table_if_not_exists_statement": {"unique_id": "macro.dbt_artifacts.spark__get_create_snapshot_executions_table_if_not_exists_statement", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_snapshot_executions_table_if_not_exists.sql", "original_file_path": "macros/create_snapshot_executions_table_if_not_exists.sql", "name": "spark__get_create_snapshot_executions_table_if_not_exists_statement", "macro_sql": "{% macro spark__get_create_snapshot_executions_table_if_not_exists_statement(database_name, schema_name, table_name) -%}\n    create or replace table {{schema_name}}.{{table_name}} (\n        command_invocation_id STRING,\n        node_id STRING,\n        run_started_at TIMESTAMP,\n        was_full_refresh BOOLEAN,\n        thread_id STRING,\n        status STRING,\n        compile_started_at TIMESTAMP,\n        query_completed_at TIMESTAMP,\n        total_node_runtime DOUBLE,\n        rows_affected INTEGER,\n        materialization STRING,\n        schema STRING,\n        name STRING\n    )\n    using delta\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1215305, "supported_languages": null}, "macro.dbt_artifacts.snowflake__get_create_snapshot_executions_table_if_not_exists_statement": {"unique_id": "macro.dbt_artifacts.snowflake__get_create_snapshot_executions_table_if_not_exists_statement", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_snapshot_executions_table_if_not_exists.sql", "original_file_path": "macros/create_snapshot_executions_table_if_not_exists.sql", "name": "snowflake__get_create_snapshot_executions_table_if_not_exists_statement", "macro_sql": "{% macro snowflake__get_create_snapshot_executions_table_if_not_exists_statement(database_name, schema_name, table_name) -%}\n    create or replace table {{database_name}}.{{schema_name}}.{{table_name}} (\n        command_invocation_id STRING,\n        node_id STRING,\n        run_started_at TIMESTAMP_TZ,\n        was_full_refresh BOOLEAN,\n        thread_id STRING,\n        status STRING,\n        compile_started_at TIMESTAMP_TZ,\n        query_completed_at TIMESTAMP_TZ,\n        total_node_runtime DOUBLE,\n        rows_affected INTEGER,\n        materialization STRING,\n        schema STRING,\n        name STRING\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1219175, "supported_languages": null}, "macro.dbt_artifacts.default__get_create_snapshot_executions_table_if_not_exists_statement": {"unique_id": "macro.dbt_artifacts.default__get_create_snapshot_executions_table_if_not_exists_statement", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "macros/create_snapshot_executions_table_if_not_exists.sql", "original_file_path": "macros/create_snapshot_executions_table_if_not_exists.sql", "name": "default__get_create_snapshot_executions_table_if_not_exists_statement", "macro_sql": "{% macro default__get_create_snapshot_executions_table_if_not_exists_statement(database_name, schema_name, table_name) -%}\n    create table {{database_name}}.{{schema_name}}.{{table_name}} (\n        command_invocation_id STRING,\n        node_id STRING,\n        run_started_at TIMESTAMP,\n        was_full_refresh BOOLEAN,\n        thread_id STRING,\n        status STRING,\n        compile_started_at TIMESTAMP,\n        query_completed_at TIMESTAMP,\n        total_node_runtime INTEGER,\n        rows_affected INTEGER,\n        materialization STRING,\n        schema STRING,\n        name STRING\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1223147, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1232455, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1236424, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1248937, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1257515, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.126684, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1270707, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.128301, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1287992, "supported_languages": null}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1304185, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1323142, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1333342, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1339962, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1353645, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1367524, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1382215, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, previous_column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.13955, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1445456, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1477828, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1491795, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1501536, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1513896, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1522334, "supported_languages": null}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1532807, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1540012, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1550822, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1561854, "supported_languages": null}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.157322, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1576967, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.158889, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1595194, "supported_languages": null}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1606333, "supported_languages": null}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1609972, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1624026, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1631281, "supported_languages": null}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1639326, "supported_languages": null}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1641262, "supported_languages": null}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1642952, "supported_languages": null}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1652696, "supported_languages": null}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1656003, "supported_languages": null}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1659305, "supported_languages": null}, "macro.dbt_utils.escape_single_quotes": {"unique_id": "macro.dbt_utils.escape_single_quotes", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.166998, "supported_languages": null}, "macro.dbt_utils.default__escape_single_quotes": {"unique_id": "macro.dbt_utils.default__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1673083, "supported_languages": null}, "macro.dbt_utils.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_utils.snowflake__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1676044, "supported_languages": null}, "macro.dbt_utils.bigquery__escape_single_quotes": {"unique_id": "macro.dbt_utils.bigquery__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1679332, "supported_languages": null}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1689065, "supported_languages": null}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1692247, "supported_languages": null}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1695142, "supported_languages": null}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1697972, "supported_languages": null}, "macro.dbt_utils.cast_array_to_string": {"unique_id": "macro.dbt_utils.cast_array_to_string", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "cast_array_to_string", "macro_sql": "{% macro cast_array_to_string(array) %}\n  {{ adapter.dispatch('cast_array_to_string', 'dbt_utils') (array) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_array_to_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1708298, "supported_languages": null}, "macro.dbt_utils.default__cast_array_to_string": {"unique_id": "macro.dbt_utils.default__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "default__cast_array_to_string", "macro_sql": "{% macro default__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1711478, "supported_languages": null}, "macro.dbt_utils.postgres__cast_array_to_string": {"unique_id": "macro.dbt_utils.postgres__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "postgres__cast_array_to_string", "macro_sql": "{% macro postgres__cast_array_to_string(array) %}\n    {%- set array_as_string -%}cast({{ array }} as {{ dbt_utils.type_string() }}){%- endset -%}\n    {{ dbt_utils.replace(dbt_utils.replace(array_as_string,\"'}'\",\"']'\"),\"'{'\",\"'['\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1717918, "supported_languages": null}, "macro.dbt_utils.redshift__cast_array_to_string": {"unique_id": "macro.dbt_utils.redshift__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "redshift__cast_array_to_string", "macro_sql": "{% macro redshift__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1721375, "supported_languages": null}, "macro.dbt_utils.bigquery__cast_array_to_string": {"unique_id": "macro.dbt_utils.bigquery__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "bigquery__cast_array_to_string", "macro_sql": "{% macro bigquery__cast_array_to_string(array) %}\n    '['||(select string_agg(cast(element as string), ',') from unnest({{ array }}) element)||']'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1723769, "supported_languages": null}, "macro.dbt_utils.array_construct": {"unique_id": "macro.dbt_utils.array_construct", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs = [], data_type = api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt_utils')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1736088, "supported_languages": null}, "macro.dbt_utils.default__array_construct": {"unique_id": "macro.dbt_utils.default__array_construct", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1741755, "supported_languages": null}, "macro.dbt_utils.snowflake__array_construct": {"unique_id": "macro.dbt_utils.snowflake__array_construct", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1744938, "supported_languages": null}, "macro.dbt_utils.redshift__array_construct": {"unique_id": "macro.dbt_utils.redshift__array_construct", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "redshift__array_construct", "macro_sql": "{% macro redshift__array_construct(inputs, data_type) -%}\n    array( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1748, "supported_languages": null}, "macro.dbt_utils.bigquery__array_construct": {"unique_id": "macro.dbt_utils.bigquery__array_construct", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    [ {{ inputs|join(' , ') }} ]\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1751153, "supported_languages": null}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1760345, "supported_languages": null}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1763582, "supported_languages": null}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1766381, "supported_languages": null}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1810522, "supported_languages": null}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1814253, "supported_languages": null}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1819143, "supported_languages": null}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1854272, "supported_languages": null}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) -%}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1858635, "supported_languages": null}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1873524, "supported_languages": null}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1875339, "supported_languages": null}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1877215, "supported_languages": null}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1879156, "supported_languages": null}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.188089, "supported_languages": null}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1884334, "supported_languages": null}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1886063, "supported_languages": null}, "macro.dbt_utils.postgres__type_timestamp": {"unique_id": "macro.dbt_utils.postgres__type_timestamp", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() %}\n    timestamp without time zone\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1887712, "supported_languages": null}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1889315, "supported_languages": null}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1892707, "supported_languages": null}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1894407, "supported_languages": null}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.189601, "supported_languages": null}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1899507, "supported_languages": null}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1901464, "supported_languages": null}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.190318, "supported_languages": null}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1906662, "supported_languages": null}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1908495, "supported_languages": null}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1910229, "supported_languages": null}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1913767, "supported_languages": null}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1915524, "supported_languages": null}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.191725, "supported_languages": null}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1926806, "supported_languages": null}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1929808, "supported_languages": null}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1938355, "supported_languages": null}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1940954, "supported_languages": null}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1943307, "supported_languages": null}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.195516, "supported_languages": null}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1957624, "supported_languages": null}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1960313, "supported_languages": null}, "macro.dbt_utils.any_value": {"unique_id": "macro.dbt_utils.any_value", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1968794, "supported_languages": null}, "macro.dbt_utils.default__any_value": {"unique_id": "macro.dbt_utils.default__any_value", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n    \n    any_value({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1971295, "supported_languages": null}, "macro.dbt_utils.postgres__any_value": {"unique_id": "macro.dbt_utils.postgres__any_value", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n    {#- /*Postgres doesn't support any_value, so we're using min() to get the same result*/ -#}\n    min({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.197387, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.1992922, "supported_languages": null}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2005165, "supported_languages": null}, "macro.dbt_utils.array_concat": {"unique_id": "macro.dbt_utils.array_concat", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt_utils')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2015007, "supported_languages": null}, "macro.dbt_utils.default__array_concat": {"unique_id": "macro.dbt_utils.default__array_concat", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2017984, "supported_languages": null}, "macro.dbt_utils.bigquery__array_concat": {"unique_id": "macro.dbt_utils.bigquery__array_concat", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.202099, "supported_languages": null}, "macro.dbt_utils.redshift__array_concat": {"unique_id": "macro.dbt_utils.redshift__array_concat", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "redshift__array_concat", "macro_sql": "{% macro redshift__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2023861, "supported_languages": null}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.203596, "supported_languages": null}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2039359, "supported_languages": null}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.204285, "supported_languages": null}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2046182, "supported_languages": null}, "macro.dbt_utils.array_append": {"unique_id": "macro.dbt_utils.array_append", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt_utils')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.205594, "supported_languages": null}, "macro.dbt_utils.default__array_append": {"unique_id": "macro.dbt_utils.default__array_append", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.205906, "supported_languages": null}, "macro.dbt_utils.bigquery__array_append": {"unique_id": "macro.dbt_utils.bigquery__array_append", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2064548, "supported_languages": null}, "macro.dbt_utils.redshift__array_append": {"unique_id": "macro.dbt_utils.redshift__array_append", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "redshift__array_append", "macro_sql": "{% macro redshift__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.206856, "supported_languages": null}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2081687, "supported_languages": null}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.20875, "supported_languages": null}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2090757, "supported_languages": null}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2099168, "supported_languages": null}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2103205, "supported_languages": null}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2129421, "supported_languages": null}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2133138, "supported_languages": null}, "macro.dbt_utils._split_part_negative": {"unique_id": "macro.dbt_utils._split_part_negative", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.213792, "supported_languages": null}, "macro.dbt_utils.postgres__split_part": {"unique_id": "macro.dbt_utils.postgres__split_part", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2145133, "supported_languages": null}, "macro.dbt_utils.redshift__split_part": {"unique_id": "macro.dbt_utils.redshift__split_part", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "redshift__split_part", "macro_sql": "{% macro redshift__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2152233, "supported_languages": null}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1\n        )]\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.216032, "supported_languages": null}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2169602, "supported_languages": null}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2172806, "supported_languages": null}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2176034, "supported_languages": null}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2184129, "supported_languages": null}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2186694, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2211704, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2221744, "supported_languages": null}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2232957, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2237048, "supported_languages": null}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2245562, "supported_languages": null}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2248597, "supported_languages": null}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2251399, "supported_languages": null}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2258945, "supported_languages": null}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.226089, "supported_languages": null}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2262604, "supported_languages": null}, "macro.dbt_utils.bool_or": {"unique_id": "macro.dbt_utils.bool_or", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2271714, "supported_languages": null}, "macro.dbt_utils.default__bool_or": {"unique_id": "macro.dbt_utils.default__bool_or", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n    \n    bool_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2274501, "supported_languages": null}, "macro.dbt_utils.snowflake__bool_or": {"unique_id": "macro.dbt_utils.snowflake__bool_or", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n    \n    boolor_agg({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.227693, "supported_languages": null}, "macro.dbt_utils.bigquery__bool_or": {"unique_id": "macro.dbt_utils.bigquery__bool_or", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n    \n    logical_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.227948, "supported_languages": null}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2292037, "supported_languages": null}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2294807, "supported_languages": null}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.229655, "supported_languages": null}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2298188, "supported_languages": null}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2301683, "supported_languages": null}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2304268, "supported_languages": null}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2307494, "supported_languages": null}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.230996, "supported_languages": null}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2312808, "supported_languages": null}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2322328, "supported_languages": null}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2326093, "supported_languages": null}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2340045, "supported_languages": null}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.234384, "supported_languages": null}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2347372, "supported_languages": null}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2350998, "supported_languages": null}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2355323, "supported_languages": null}, "macro.dbt_utils.listagg": {"unique_id": "macro.dbt_utils.listagg", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2394304, "supported_languages": null}, "macro.dbt_utils.default__listagg": {"unique_id": "macro.dbt_utils.default__listagg", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2403624, "supported_languages": null}, "macro.dbt_utils.bigquery__listagg": {"unique_id": "macro.dbt_utils.bigquery__listagg", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2410212, "supported_languages": null}, "macro.dbt_utils.postgres__listagg": {"unique_id": "macro.dbt_utils.postgres__listagg", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    \n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2418604, "supported_languages": null}, "macro.dbt_utils.redshift__listagg": {"unique_id": "macro.dbt_utils.redshift__listagg", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "redshift__listagg", "macro_sql": "{% macro redshift__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    {% set ns = namespace() %}\n    {% set ns.delimiter_text_regex = delimiter_text|trim(\"'\") %}\n    {% set special_chars %}\\,^,$,.,|,?,*,+,(,),[,],{,}{% endset %}  \n    {%- for char in special_chars.split(',') -%}\n        {% set escape_char %}\\\\{{ char }}{% endset %}\n        {% set ns.delimiter_text_regex = ns.delimiter_text_regex|replace(char,escape_char) %}\n    {%- endfor -%}\n\n    {% set regex %}'([^{{ ns.delimiter_text_regex }}]+{{ ns.delimiter_text_regex }}){1,{{ limit_num - 1}}}[^{{ ns.delimiter_text_regex }}]+'{% endset %}\n    regexp_substr(\n        listagg(\n            {{ measure }},\n            {{ delimiter_text }}\n            )\n            {% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n        ,{{ regex }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2439315, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2448275, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.245194, "supported_languages": null}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.246443, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2472775, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2477183, "supported_languages": null}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.248561, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2489374, "supported_languages": null}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.258095, "supported_languages": null}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.25918, "supported_languages": null}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.259861, "supported_languages": null}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.260933, "supported_languages": null}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2719111, "supported_languages": ["sql"]}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.272922, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2739027, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.274829, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.275515, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.276675, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2780285, "supported_languages": null}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2795782, "supported_languages": null}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {% endif %}\n\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n    {%- if cols|length <= 0 -%}\n      {{- return('*') -}}\n    {%- else -%}\n        {%- for col in cols %}\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n            {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n        {%- endfor -%}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2816691, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2831905, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2844586, "supported_languages": null}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2849562, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2857163, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.286796, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2873952, "supported_languages": null}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2883017, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2888458, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2905326, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2914174, "supported_languages": null}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.291984, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2931175, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2945776, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2964005, "supported_languages": null}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2974417, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2980955, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2991605, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2993672, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2995589, "supported_languages": null}, "macro.dbt_utils.bigquery__get_table_types_sql": {"unique_id": "macro.dbt_utils.bigquery__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "bigquery__get_table_types_sql", "macro_sql": "{% macro bigquery__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as `table_type`\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.2997487, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.3024929, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.3030784, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.3046074, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.305717, "supported_languages": null}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.3078372, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.3102226, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.3118255, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.3140311, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by=none, relation_alias=none) -%}\n\n    {%- set error_message_group_by -%}\nWarning: the `group_by` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nUse `partition_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if kwargs.get('group_by') %}\n    {%- do exceptions.warn(error_message_group_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_order_by -%}\nWarning: `order_by` as an optional parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nSupply a non-null value for `order_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if not order_by %}\n    {%- do exceptions.warn(error_message_order_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_alias -%}\nWarning: the `relation_alias` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nIf you were using `relation_alias` to point to a CTE previously then you can now pass the alias directly to `relation` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if relation_alias %}\n    {%- do exceptions.warn(error_message_alias) -%}\n    {%- endif -%}\n\n    {% set partition_by = partition_by or kwargs.get('group_by') %}\n    {% set relation = relation_alias or relation %}\n    {% set order_by = order_by or \"'1'\" %}\n\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.3208303, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.3213446, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"unique_id": "macro.dbt_utils.redshift__deduplicate", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.3217752, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"unique_id": "macro.dbt_utils.postgres__deduplicate", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.3221993, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"unique_id": "macro.dbt_utils.snowflake__deduplicate", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.3225896, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.3229644, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.3243425, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.3263202, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.3273482, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.3286395, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.3306408, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.3312283, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.332473, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.334161, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.335062, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.3357906, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.3372705, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.3390393, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.340001, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.3407307, "supported_languages": null}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.3438492, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.3482358, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.3504298, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.3535383, "supported_languages": null}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.3578517, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.3640912, "supported_languages": null}, "macro.pro_serv_utils.clone_modified_incrementals": {"unique_id": "macro.pro_serv_utils.clone_modified_incrementals", "package_name": "pro_serv_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/pro_serv_utils", "path": "macros/clone_modified_incrementals.sql", "original_file_path": "macros/clone_modified_incrementals.sql", "name": "clone_modified_incrementals", "macro_sql": "{% macro clone_modified_incrementals(from_db, from_schema) %}\n\n{%- if execute -%}\n\n    {%- if target.name == 'ci' -%}\n    \n        {%- for node in graph.nodes.values() -%}\n            {%- if node.unique_id in selected_resources and node.resource_type == 'model' and node.config.materialized == 'incremental' -%}\n                {%- set from_relation = (adapter.get_relation(database=from_db, schema=from_schema, identifier=node.name)) -%} \n                {%- if from_relation.is_table -%}\n\n                create or replace transient table {{ target.database }}.{{ generate_schema_name(custom_schema_name = node.config.schema, node = node.name) }}.{{ node.name }} clone {{ from_db }}.{{ from_schema }}.{{ node.name }};\n                \n                {% do log(\"Cloned incremental model \" ~ from_db ~ \".\" ~ from_schema ~ \".\" ~ node.name ~ \" into target schema.\", info=true) %}\n                \n                {%- endif -%}\n                \n            {%- endif -%}\n            \n        {%- endfor -%}\n\n        select 1; {# hooks will error if they dont have valid SQL in them, this handles that! #}\n    \n    {%- else -%}\n\n    select 2; {# hooks will error if they dont have valid SQL in them, this handles that! #}\n\n    {%- endif -%}\n\n{%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.secret.generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.3671682, "supported_languages": null}, "macro.pro_serv_utils.check_dupes": {"unique_id": "macro.pro_serv_utils.check_dupes", "package_name": "pro_serv_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/pro_serv_utils", "path": "macros/check_dupes.sql", "original_file_path": "macros/check_dupes.sql", "name": "check_dupes", "macro_sql": "{% macro check_dupes(model, column_name) %}\n\n    with errors as (\n        {{ test_unique(model, column_name) }}\n    )\n\n    select * from {{ model }}\n    inner join errors on {{ model.name  }}.{{ column_name }} = errors.unique_field\n    order by {{ column_name }} \n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.368117, "supported_languages": null}, "macro.pro_serv_utils.surrogate_non_hash": {"unique_id": "macro.pro_serv_utils.surrogate_non_hash", "package_name": "pro_serv_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/pro_serv_utils", "path": "macros/surrogate_non_hash.sql", "original_file_path": "macros/surrogate_non_hash.sql", "name": "surrogate_non_hash", "macro_sql": "{%- macro surrogate_non_hash(field_list) -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt_utils.concat(fields) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.3695548, "supported_languages": null}, "macro.pro_serv_utils.ci_limit": {"unique_id": "macro.pro_serv_utils.ci_limit", "package_name": "pro_serv_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/pro_serv_utils", "path": "macros/ci_limit.sql", "original_file_path": "macros/ci_limit.sql", "name": "ci_limit", "macro_sql": "{% macro ci_limit(limit=1000) %}\n\n  {%- if env_var('DBT_ENVIRONMENT_NAME', 'dev') == 'ci' -%}\n\n    limit {{ limit }}\n  \n  {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.3703856, "supported_languages": null}, "macro.pro_serv_utils.get_base2": {"unique_id": "macro.pro_serv_utils.get_base2", "package_name": "pro_serv_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/pro_serv_utils", "path": "macros/check_uniqueness.sql", "original_file_path": "macros/check_uniqueness.sql", "name": "get_base2", "macro_sql": "{% macro get_base2(myint, num_loops) %}\n  {% set ns = namespace(foo=false) %}\n  {% set ns.return_str = '' %}\n  {% set ns.buffer_int = myint %}\n  {% for i in range(num_loops) %}\n    {% set ns.return_str =  ((ns.buffer_int % 2) | string) ~ ns.return_str %}\n    {% set ns.buffer_int = ns.buffer_int // 2 %}\n  {% endfor %}\n  {{ return(ns.return_str) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.3733177, "supported_languages": null}, "macro.pro_serv_utils.get_combinations": {"unique_id": "macro.pro_serv_utils.get_combinations", "package_name": "pro_serv_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/pro_serv_utils", "path": "macros/check_uniqueness.sql", "original_file_path": "macros/check_uniqueness.sql", "name": "get_combinations", "macro_sql": "{% macro get_combinations(columns_list) %}\n  {% set combinations = [] %}\n  {% set list_len = (columns_list | length) %}\n  {% for x in range(1,2 ** list_len) %}\n    {% set selected_columns = [] %}\n    {% for one_zero in get_base2(x, list_len) %}\n      {% if one_zero == '1' %}\n        {% do selected_columns.append(columns_list[loop.index0]) %}\n      {% endif %}\n    {% endfor %}\n    {% do combinations.append(selected_columns) %}\n  {% endfor %}\n  {{ return(combinations) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.pro_serv_utils.get_base2"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.3747506, "supported_languages": null}, "macro.pro_serv_utils.check_uniqueness": {"unique_id": "macro.pro_serv_utils.check_uniqueness", "package_name": "pro_serv_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/pro_serv_utils", "path": "macros/check_uniqueness.sql", "original_file_path": "macros/check_uniqueness.sql", "name": "check_uniqueness", "macro_sql": "{% macro check_uniqueness(columns_list, reference_model) %}\n\nwith count_rows as (\n  select count(*) as num_rows from {{reference_model}}\n)\n\n, calculate_counts as (\nselect \n\n{% for combi in get_combinations(columns_list) %}\n   count(distinct {{dbt_utils.surrogate_key(combi)}}) over (partition by 1) as {{combi | join('__')}}{% if not loop.last%},{% endif %}\n{% endfor %}\nfrom {{reference_model}}\nlimit 1\n)\n\n, unioned as (\n{% for combi in get_combinations(columns_list) %}\nselect \n    '{{ combi | join(', ') }}' as columns , \n    case when (num_rows - {{combi | join('__')}}) = 0 then true else false end as is_unique\nfrom calculate_counts outer join count_rows\n{% if not loop.last%}union all{% endif %}\n{% endfor %}\n)\n\nselect * \nfrom unioned\norder by is_unique desc\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.pro_serv_utils.get_combinations", "macro.dbt_utils.surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.3760664, "supported_languages": null}, "macro.pro_serv_utils.generate_model_import_ctes": {"unique_id": "macro.pro_serv_utils.generate_model_import_ctes", "package_name": "pro_serv_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/pro_serv_utils", "path": "macros/generate_model_import_ctes.sql", "original_file_path": "macros/generate_model_import_ctes.sql", "name": "generate_model_import_ctes", "macro_sql": "{% macro generate_model_import_ctes(model_name, leading_commas = false) %}\n\n    {%- if execute -%}\n    {%- set nodes = graph.nodes.values() -%}\n\n    {%- set model = (nodes\n        | selectattr('name', 'equalto', model_name) \n        | selectattr('resource_type', 'equalto', 'model')\n        | list).pop() -%}\n\n    {%- set model_raw_sql = model.raw_sql or model.raw_code -%}\n    {%- else -%}\n    {%- set model_raw_sql = '' -%}\n    {%- endif -%}\n\n    {#-\n\n        REGEX Explanations\n\n        # with_regex\n        - matches (start of file followed by anything then whitespace\n        or whitespace\n        or a comma) followed by the word with then a space   \n\n        # from_ref \n        - matches (from or join) followed by some spaces and then {{ref(<something>)}}\n\n        # from_source \n        - matches (from or join) followed by some spaces and then {{source(<something>,<something_else>)}}\n\n        # from_var_1\n        - matches (from or join) followed by some spaces and then {{var(<something>)}}\n\n        # from_var_2\n        - matches (from or join) followed by some spaces and then {{var(<something>,<something_else>)}}\n\n        # from_table_1\n        - matches (from or join) followed by some spaces and then <something>.<something_else>\n          where each <something> is enclosed by (` or [ or \" or ' or nothing)\n\n        # from_table_2\n        - matches (from or join) followed by some spaces and then <something>.<something_else>.<something_different>\n          where each <something> is enclosed by (` or [ or \" or ' or nothing)\n\n        # from_table_3\n        - matches (from or join) followed by some spaces and then <something>\n          where <something> is enclosed by (` or [ or \" or ')\n\n        # config block\n        - matches the start of the file followed by anything and then {{config(<something>)}}\n\n    -#}\n\n    {%- set re = modules.re -%}\n\n    {%- set with_regex = '(?i)(?s)(^.*\\s*|\\s+|,)with\\s' -%}\n    {%- set does_raw_sql_contain_cte = re.search(with_regex, model_raw_sql) -%}\n\n    {%- set from_regexes = {\n        'from_ref':'(?i)(from|join)\\s+({{\\s*ref\\s*\\(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(\\)\\s*}})',\n        'from_source':'(?i)(from|join)\\s+({{\\s*source\\s*\\(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(,)(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(\\)\\s*}})',\n        'from_var_1':'(?i)(from|join)\\s+({{\\s*var\\s*\\(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(\\)\\s*}})',\n        'from_var_2':'(?i)(from|join)\\s+({{\\s*var\\s*\\(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(,)(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(\\)\\s*}})',\n        'from_table_1':'(?i)(from|join)\\s+([\\[`\\\"\\']?)(\\w+)([\\]`\\\"\\']?)(\\.)([\\[`\\\"\\']?)(\\w+)([\\]`\\\"\\']?)(?=\\s|$)',\n        'from_table_2':'(?i)(from|join)\\s+([\\[`\\\"\\']?)(\\w+)([\\]`\\\"\\']?)(\\.)([\\[`\\\"\\']?)(\\w+)([\\]`\\\"\\']?)(\\.)([\\[`\\\"\\']?)(\\w+)([\\]`\\\"\\']?)(?=\\s|$)',\n        'from_table_3':'(?i)(from|join)\\s+([\\[`\\\"\\'])([\\w ]+)([\\]`\\\"\\'])(?=\\s|$)',\n        'config_block':'(?i)(?s)^.*{{\\s*config\\s*\\([^)]+\\)\\s*}}'\n    } -%}\n\n    {%- set from_list = [] -%}\n    {%- set config_list = [] -%}\n    {%- set ns = namespace(model_sql = model_raw_sql) -%}\n\n    {%- for regex_name, regex_pattern in from_regexes.items() -%}\n\n        {%- set all_regex_matches = re.findall(regex_pattern, model_raw_sql) -%}\n\n        {%- for match in all_regex_matches -%}\n\n            {%- if regex_name == 'config_block' -%}\n                {%- set match_tuple = (match|trim, regex_name) -%}\n                {%- do config_list.append(match_tuple) -%}\n            {%- elif regex_name == 'from_source' -%}    \n                {%- set full_from_clause = match[1:]|join|trim -%}\n                {%- set cte_name = 'source_' + match[6]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%} \n            {%- elif regex_name == 'from_table_1' -%}\n                {%- set full_from_clause = match[1:]|join()|trim -%}\n                {%- set cte_name = match[2]|lower + '_' + match[6]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}   \n            {%- elif regex_name == 'from_table_2' -%}\n                {%- set full_from_clause = match[1:]|join()|trim -%}\n                {%- set cte_name = match[2]|lower + '_' + match[6]|lower + '_' + match[10]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}                     \n            {%- else -%}\n                {%- set full_from_clause = match[1:]|join|trim -%}\n                {%- set cte_name = match[2]|trim|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}\n            {%- endif -%}\n\n        {%- endfor -%}\n\n        {%- if regex_name == 'config_block' -%}\n        {%- elif regex_name == 'from_source' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> source_\\g<7>', ns.model_sql) -%}            \n        {%- elif regex_name == 'from_table_1' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>_\\g<7>', ns.model_sql) -%}     \n        {%- elif regex_name == 'from_table_2' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>_\\g<7>_\\g<11>', ns.model_sql) -%} \n        {%- else -%}   \n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>', ns.model_sql) -%}         \n        {% endif %}\n\n    {%- endfor -%}\n\n{%- if from_list|length > 0 -%}\n\n{%- set model_import_ctes -%}\n\n    {%- for config_obj in config_list -%}\n\n    {%- set ns.model_sql = ns.model_sql|replace(config_obj[0], '') -%}\n\n{{ config_obj[0] }}\n\n{% endfor -%}\n\n    {%- for from_obj in from_list|unique|sort -%}\n\n{%- if loop.first -%}with {% else -%}{%- if leading_commas -%},{%- endif -%}{%- endif -%}{{ from_obj[0] }} as (\n\n    select * from {{ from_obj[1] }}\n    {%- if from_obj[2] == 'from_source' and from_list|length > 1 %} \n    -- CAUTION: It's best practice to create staging layer for raw sources\n    {%- elif from_obj[2] == 'from_table_1' or from_obj[2] == 'from_table_2' or from_obj[2] == 'from_table_3' %}\n    -- CAUTION: It's best practice to use the ref or source function instead of a direct reference\n    {%- elif from_obj[2] == 'from_var_1' or from_obj[2] == 'from_var_2' %}\n    -- CAUTION: It's best practice to use the ref or source function instead of a var\n    {%- endif %}\n  \n){%- if does_raw_sql_contain_cte and not leading_commas -%},{%- endif %}\n{% endfor -%}\n\n{%- if does_raw_sql_contain_cte -%}\n    {%- if leading_commas -%}\n        {%- set replace_with = '\\g<1>,' -%}\n    {%- else -%}\n        {%- set replace_with = '\\g<1>' -%}\n    {%- endif -%}\n{{ re.sub(with_regex, replace_with, ns.model_sql, 1)|trim }}\n{%- else -%}\n{{ ns.model_sql|trim }}\n{%- endif -%}\n\n{%- endset -%}\n\n{%- else -%}\n\n{% set model_import_ctes = model_raw_sql %}\n\n{%- endif -%}\n\n{%- if execute -%}\n\n{{ log(model_import_ctes, info=True) }}\n{% do return(model_import_ctes) %}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.39451, "supported_languages": null}, "macro.pro_serv_utils.check_model_config_dbt_project": {"unique_id": "macro.pro_serv_utils.check_model_config_dbt_project", "package_name": "pro_serv_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/pro_serv_utils", "path": "macros/check_model_config_dbt_project.sql", "original_file_path": "macros/check_model_config_dbt_project.sql", "name": "check_model_config_dbt_project", "macro_sql": "{% macro check_model_config_dbt_project(model_name,dbt_project) %}\n  {%- set ns = namespace(found=false) -%}\n  {%- set ns.my_dict = fromyaml(dbt_project).models -%}\n  {{ (graph.nodes.values() | selectattr(\"name\",\"eq\",model_name) | list)[0].fqn }}\n  {% for i in  (graph.nodes.values() | selectattr(\"name\",\"eq\",model_name) | list)[0].fqn %}\n    level {{ loop.index }}: {{i}}\n    {{ ns.my_dict.get(i,{}) }}\n    {% set ns.my_dict = ns.my_dict.get(i,{}) -%}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.3965962, "supported_languages": null}, "macro.pro_serv_utils.lint_regex": {"unique_id": "macro.pro_serv_utils.lint_regex", "package_name": "pro_serv_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/pro_serv_utils", "path": "macros/linter_lite/lint_regex.sql", "original_file_path": "macros/linter_lite/lint_regex.sql", "name": "lint_regex", "macro_sql": "{% macro lint_regex() %}\n\n{#\n\nREGEX Explanations\n\n# read_from_table \n- matches (from or join) followed by some spaces and then <something>.<something_else>\n- in dbt we would always select from either a CTE (so, no \".\") or from a ref/source\n\n# read_from_table_2\n- matches (from or join) followed by some spaces and then (` or [ or \" or `)<something>(` or ] or \" or `)\n- in dbt we would always select from either a CTE or from a ref/source. If what we read from is quoted, it is a table\n\n# read_from_var\n- matches (from or join) followed by some spaces and then {{var()}}\n- in dbt we would always select from either a CTE or from a ref/source. We should not select from var\n\n# leading_commas\n- matches string that start with some blank characters and then a comma\n- in case people are following the approach of trailing commas\n- currently, it fails if people are starting their CTEs with comma instead of ending with commas\n\n#}\n\n\n{% set regexes = {\n    'read_from_table':'(?i)(from|join)\\s+[\\[`\\\"]?\\w+[\\]`\\\"]?\\.[\\[`\\\"]?\\w+[\\]`\\\"]?',\n    'read_from_table_2':'(?i)(from|join)\\s+[\\[`\\\"][\\w ]+[\\]`\\\"]',\n    'read_from_var':'(?i)(from|join)\\s+{{\\s*var\\s*\\([^)]+\\)\\s*}}',\n    'leading_commas':'^\\s*,.*'\n} %}\n\n{% for regex_name, regex_pattern in regexes.items() -%}\n    \n    {%- for node in graph.nodes.values()\n        | selectattr(\"resource_type\", \"equalto\", \"model\") \n    -%}\n  \n    {% set m = modules.re.search(regex_pattern, node.raw_sql, modules.re.MULTILINE) %}\n    {%- if m -%}\n\n    {%- set outp -%}\n        {{ regex_name }} found in {{ node.original_file_path }}\n    First occurence: {{ m.group(0) }}\n    {%- endset -%}\n    {{ outp }}\n    {{ log(outp ~ \"\\n\", 1) }}\n\n    {% endif -%}\n\n  {%- endfor -%}\n\n{%- endfor %}\n{{ log('Linting finished', 1) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.3995192, "supported_languages": null}, "macro.pro_serv_utils.lint_keywords_casing": {"unique_id": "macro.pro_serv_utils.lint_keywords_casing", "package_name": "pro_serv_utils", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/pro_serv_utils", "path": "macros/linter_lite/lint_keywords_casing.sql", "original_file_path": "macros/linter_lite/lint_keywords_casing.sql", "name": "lint_keywords_casing", "macro_sql": "{% macro lint_keywords_casing(keywords_case_lower = True) %}\n\n{# \n\nNote: use set instead below when available with 1.2\nthe logic is that for each model, we look at the list of all the keywords irrespective of the case and we return only the ones not in the original list (the case we are looking for)\n\n#}\n\n{%- if keyword_case_lower -%}\n    {% set sql_keywords = [\"select\", \"from\", \"join\", \"cast\", \"sum\", \"max\", \"distinct\", \"union\", \"left\", \"inner\", \"where\", \"group by\", \"partition by\", \"over\", \"qualify\"] %}\n{%- else -%}\n    {% set sql_keywords = [\"SELECT\", \"FROM\", \"JOIN\", \"CAST\", \"SUM\", \"MAX\", \"DISTINCT\", \"UNION\", \"LEFT\", \"INNER\", \"WHERE\", \"GROUP BY\", \"PARTITION BY\", \"OVER\", \"QUALIFY\"] %}\n{%- endif %}\n\n{% for node in graph.nodes.values()\n        | selectattr(\"resource_type\", \"equalto\", \"model\") \n    -%}\n    {% set m = modules.re.findall('(?i)\\s(' ~ sql_keywords | join('|') ~ ')\\s', node.raw_sql) %}\n    {%- for word in m -%}\n        {%- if word.strip() not in sql_keywords -%}\n            {%- set outp -%}\n                \"{{ word.strip() }}\" found in {{ node.original_file_path }}\n            {%- endset -%}\n                {{ outp }}\n                {{ log(outp ~ \"\\n\", 1) }}\n        {% endif -%}\n    {%- endfor -%}\n\n{%- endfor -%}\n\n\n{{ log('Linting finished', 1) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.4032564, "supported_languages": null}, "macro.codegen.generate_base_model": {"unique_id": "macro.codegen.generate_base_model", "package_name": "codegen", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/codegen", "path": "macros/generate_base_model.sql", "original_file_path": "macros/generate_base_model.sql", "name": "generate_base_model", "macro_sql": "{% macro generate_base_model(source_name, table_name, leading_commas=False) %}\n\n{%- set source_relation = source(source_name, table_name) -%}\n\n{%- set columns = adapter.get_columns_in_relation(source_relation) -%}\n{% set column_names=columns | map(attribute='name') %}\n{% set base_model_sql %}\nwith source as (\n\n    select * from {% raw %}{{ source({% endraw %}'{{ source_name }}', '{{ table_name }}'{% raw %}) }}{% endraw %}\n\n),\n\nrenamed as (\n\n    select\n        {%- if leading_commas -%}\n        {%- for column in column_names %}\n        {{\", \" if not loop.first}}{{ column | lower }}\n        {%- endfor %}\n        {%- else -%}\n        {%- for column in column_names %}\n        {{ column | lower }}{{\",\" if not loop.last}}\n        {%- endfor -%}\n        {%- endif %}\n\n    from source\n\n)\n\nselect * from renamed\n{% endset %}\n\n{% if execute %}\n\n{{ log(base_model_sql, info=True) }}\n{% do return(base_model_sql) %}\n\n{% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.4060845, "supported_languages": null}, "macro.codegen.generate_model_yaml": {"unique_id": "macro.codegen.generate_model_yaml", "package_name": "codegen", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "name": "generate_model_yaml", "macro_sql": "{% macro generate_model_yaml(model_name) %}\n\n{% set model_yaml=[] %}\n\n{% do model_yaml.append('version: 2') %}\n{% do model_yaml.append('') %}\n{% do model_yaml.append('models:') %}\n{% do model_yaml.append('  - name: ' ~ model_name | lower) %}\n{% do model_yaml.append('    description: \"\"') %}\n{% do model_yaml.append('    columns:') %}\n\n{% set relation=ref(model_name) %}\n{%- set columns = adapter.get_columns_in_relation(relation) -%}\n\n{% for column in columns %}\n    {% do model_yaml.append('      - name: ' ~ column.name | lower ) %}\n    {% do model_yaml.append('        description: \"\"') %}\n    {% do model_yaml.append('') %}\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = model_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.4091296, "supported_languages": null}, "macro.codegen.get_tables_in_schema": {"unique_id": "macro.codegen.get_tables_in_schema", "package_name": "codegen", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "name": "get_tables_in_schema", "macro_sql": "{% macro get_tables_in_schema(schema_name, database_name=target.database, table_pattern='%', exclude='') %}\n    \n    {% set tables=dbt_utils.get_relations_by_pattern(\n        schema_pattern=schema_name,\n        database=database_name,\n        table_pattern=table_pattern,\n        exclude=exclude\n    ) %}\n\n    {% set table_list= tables | map(attribute='identifier') %}\n\n    {{ return(table_list | sort) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.4118023, "supported_languages": null}, "macro.codegen.generate_source": {"unique_id": "macro.codegen.generate_source", "package_name": "codegen", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "name": "generate_source", "macro_sql": "{% macro generate_source(schema_name, database_name=target.database, generate_columns=False, include_descriptions=False, table_pattern='%', exclude='') %}\n\n{% set sources_yaml=[] %}\n\n{% do sources_yaml.append('version: 2') %}\n{% do sources_yaml.append('') %}\n{% do sources_yaml.append('sources:') %}\n{% do sources_yaml.append('  - name: ' ~ schema_name | lower) %}\n\n{% if database_name != target.database %}\n{% do sources_yaml.append('    database: ' ~ database_name | lower) %}\n{% endif %}\n\n{% do sources_yaml.append('    tables:') %}\n\n{% set tables=codegen.get_tables_in_schema(schema_name, database_name, table_pattern, exclude) %}\n\n{% for table in tables %}\n    {% do sources_yaml.append('      - name: ' ~ table | lower ) %}\n\n    {% if generate_columns %}\n    {% do sources_yaml.append('        columns:') %}\n\n        {% set table_relation=api.Relation.create(\n            database=database_name,\n            schema=schema_name,\n            identifier=table\n        ) %}\n\n        {% set columns=adapter.get_columns_in_relation(table_relation) %}\n\n        {% for column in columns %}\n            {% do sources_yaml.append('          - name: ' ~ column.name | lower ) %}\n            {% if include_descriptions %}\n                {% do sources_yaml.append('            description: \"\"' ) %}\n            {% endif %}\n        {% endfor %}\n            {% do sources_yaml.append('') %}\n\n    {% endif %}\n\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = sources_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.codegen.get_tables_in_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674177027.4155784, "supported_languages": null}}, "docs": {"secret.__overview__": {"unique_id": "secret.__overview__", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "overview.md", "original_file_path": "models/overview.md", "name": "__overview__", "block_contents": "# This is basically just a storage of random dbt snippets I grab from wherever and mostly do not create myself.  Big shout out to Randy Pitcher!"}, "secret.order_status": {"unique_id": "secret.order_status", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "staging/jaffle_shop/order_status.md", "original_file_path": "models/staging/jaffle_shop/order_status.md", "name": "order_status", "block_contents": "One of the following values:\n\n| status         | definition                                                 |\n|----------------|------------------------------------------------------------|\n| placed         | Order placed but not yet shipped                           |\n| shipped        | Order has been shipped but hasn't yet been delivered       |\n| completed      | Order has been received by customers                       |\n| return_pending | Customer has indicated they would like to return this item |\n| returned       | Item has been returned                                     |"}, "dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}, "dbt_artifacts.command_invocation_id": {"unique_id": "dbt_artifacts.command_invocation_id", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "command_invocation_id", "block_contents": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation."}, "dbt_artifacts.node_id": {"unique_id": "dbt_artifacts.node_id", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "node_id", "block_contents": "Unique node identifier."}, "dbt_artifacts.name": {"unique_id": "dbt_artifacts.name", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "name", "block_contents": "Name of the node."}, "dbt_artifacts.schema": {"unique_id": "dbt_artifacts.schema", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "schema", "block_contents": "Configured schema for the node."}, "dbt_artifacts.package_name": {"unique_id": "dbt_artifacts.package_name", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "package_name", "block_contents": "Name of the dbt package which contains the node."}, "dbt_artifacts.total_node_runtime": {"unique_id": "dbt_artifacts.total_node_runtime", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "total_node_runtime", "block_contents": "Total time spent executing this node (seconds)."}, "dbt_artifacts.compile_started_at": {"unique_id": "dbt_artifacts.compile_started_at", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "compile_started_at", "block_contents": "Timestamp when the node started compiling."}, "dbt_artifacts.depends_on_nodes": {"unique_id": "dbt_artifacts.depends_on_nodes", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "depends_on_nodes", "block_contents": "Array of node identifiers that this node depends on in the execution graph."}, "dbt_artifacts.status": {"unique_id": "dbt_artifacts.status", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "status", "block_contents": "Represents the execution status of a node, can be success, failure, or error."}, "dbt_artifacts.query_completed_at": {"unique_id": "dbt_artifacts.query_completed_at", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "query_completed_at", "block_contents": "Timestamp when the node's SQL query completed."}, "dbt_artifacts.materialization": {"unique_id": "dbt_artifacts.materialization", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "materialization", "block_contents": "The materialization of the model."}, "dbt_artifacts.database": {"unique_id": "dbt_artifacts.database", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "database", "block_contents": "The configured database for the node."}, "dbt_artifacts.rows_affected": {"unique_id": "dbt_artifacts.rows_affected", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "rows_affected", "block_contents": "Number of rows affected by the model execution."}, "dbt_artifacts.thread_id": {"unique_id": "dbt_artifacts.thread_id", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "thread_id", "block_contents": "Which thread executed this node? E.g. Thread-1"}, "dbt_artifacts.path": {"unique_id": "dbt_artifacts.path", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "path", "block_contents": "Path to the model on the local filesystem."}, "dbt_artifacts.was_full_refresh": {"unique_id": "dbt_artifacts.was_full_refresh", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "was_full_refresh", "block_contents": "Boolean flag indicating whether the nodes run was a full refresh or not."}, "dbt_artifacts.checksum": {"unique_id": "dbt_artifacts.checksum", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "checksum", "block_contents": "Checksum of the model."}, "dbt_artifacts.seed_execution_id": {"unique_id": "dbt_artifacts.seed_execution_id", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "seed_execution_id", "block_contents": "Execution ID of the seed node."}, "dbt_artifacts.test_execution_id": {"unique_id": "dbt_artifacts.test_execution_id", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "test_execution_id", "block_contents": "Execution ID of the test node."}, "dbt_artifacts.snapshot_execution_id": {"unique_id": "dbt_artifacts.snapshot_execution_id", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "snapshot_execution_id", "block_contents": "Execution ID of the snapshot node."}, "dbt_artifacts.model_execution_id": {"unique_id": "dbt_artifacts.model_execution_id", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "model_execution_id", "block_contents": "Execution ID of the model node."}, "dbt_artifacts.loader": {"unique_id": "dbt_artifacts.loader", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "loader", "block_contents": "Describes the tool that loads this source into your warehouse."}, "dbt_artifacts.freshness": {"unique_id": "dbt_artifacts.freshness", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "freshness", "block_contents": "The specified freshness of the source model."}, "dbt_artifacts.url": {"unique_id": "dbt_artifacts.url", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "url", "block_contents": "The URL of the BI tool where the data defined by the exposure can be viewed."}, "dbt_artifacts.identifier": {"unique_id": "dbt_artifacts.identifier", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "identifier", "block_contents": "Source identifier."}, "dbt_artifacts.source_name": {"unique_id": "dbt_artifacts.source_name", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "source_name", "block_contents": "Source name."}, "dbt_artifacts.test_path": {"unique_id": "dbt_artifacts.test_path", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "test_path", "block_contents": "Path to the yaml (SQL in case of a singular test) file describing the test."}, "dbt_artifacts.tags": {"unique_id": "dbt_artifacts.tags", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "tags", "block_contents": "Tags used in resource selection associated with the node."}, "dbt_artifacts.strategy": {"unique_id": "dbt_artifacts.strategy", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "strategy", "block_contents": "Snapshot \"strategies\" define how dbt knows if a row has changed. There are two strategies built-in to dbt \u2014 timestamp\nand check."}, "dbt_artifacts.failures": {"unique_id": "dbt_artifacts.failures", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "failures", "block_contents": "Test failures. Value is 1 if the test failed, 0 if successful."}, "dbt_artifacts.loaded_at_field": {"unique_id": "dbt_artifacts.loaded_at_field", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "loaded_at_field", "block_contents": "A column name (or expression) that returns a timestamp indicating freshness."}, "dbt_artifacts.type": {"unique_id": "dbt_artifacts.type", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "type", "block_contents": "Exposure type; one of dashboard, notebook, analysis, ml, application (used to organize on docs site)"}, "dbt_artifacts.description": {"unique_id": "dbt_artifacts.description", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "description", "block_contents": "Node description."}, "dbt_artifacts.maturity": {"unique_id": "dbt_artifacts.maturity", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "maturity", "block_contents": "Exposure maturity; one of high, medium, low."}, "dbt_artifacts.owner": {"unique_id": "dbt_artifacts.owner", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "owner", "block_contents": "Owner of the exposure, usually an email address."}, "dbt_artifacts.source_execution_id": {"unique_id": "dbt_artifacts.source_execution_id", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "source_execution_id", "block_contents": "Execution ID of the source node."}, "dbt_artifacts.exposure_execution_id": {"unique_id": "dbt_artifacts.exposure_execution_id", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "exposure_execution_id", "block_contents": "Execution ID of the exposure node."}, "dbt_artifacts.dbt_version": {"unique_id": "dbt_artifacts.dbt_version", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "dbt_version", "block_contents": "Installed version of dbt that is currently running."}, "dbt_artifacts.project_name": {"unique_id": "dbt_artifacts.project_name", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "project_name", "block_contents": "Name for the root-level project which is being run by dbt."}, "dbt_artifacts.run_started_at": {"unique_id": "dbt_artifacts.run_started_at", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "run_started_at", "block_contents": "The start timestamp of the dbt execution which generated the record."}, "dbt_artifacts.dbt_command": {"unique_id": "dbt_artifacts.dbt_command", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "dbt_command", "block_contents": "dbt command of this run."}, "dbt_artifacts.full_refresh_flag": {"unique_id": "dbt_artifacts.full_refresh_flag", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "full_refresh_flag", "block_contents": "Boolean flag indicating whether the dbt run was in full refresh mode or not."}, "dbt_artifacts.target_profile_name": {"unique_id": "dbt_artifacts.target_profile_name", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "target_profile_name", "block_contents": "The name of the active profile."}, "dbt_artifacts.target_name": {"unique_id": "dbt_artifacts.target_name", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "target_name", "block_contents": "The name of the active target."}, "dbt_artifacts.target_schema": {"unique_id": "dbt_artifacts.target_schema", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "target_schema", "block_contents": "The name of the target dbt schema."}, "dbt_artifacts.target_threads": {"unique_id": "dbt_artifacts.target_threads", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "target_threads", "block_contents": "The number of threads in use by dbt."}, "dbt_artifacts.dbt_cloud_project_id": {"unique_id": "dbt_artifacts.dbt_cloud_project_id", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "dbt_cloud_project_id", "block_contents": "The ID of the dbt Cloud Project for this run."}, "dbt_artifacts.dbt_cloud_job_id": {"unique_id": "dbt_artifacts.dbt_cloud_job_id", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "dbt_cloud_job_id", "block_contents": "The ID of the dbt Cloud Job for this run."}, "dbt_artifacts.dbt_cloud_run_id": {"unique_id": "dbt_artifacts.dbt_cloud_run_id", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "dbt_cloud_run_id", "block_contents": "The ID of this particular run."}, "dbt_artifacts.dbt_cloud_run_reason_category": {"unique_id": "dbt_artifacts.dbt_cloud_run_reason_category", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "dbt_cloud_run_reason_category", "block_contents": "The \"category\" of the trigger for this run."}, "dbt_artifacts.dbt_cloud_run_reason": {"unique_id": "dbt_artifacts.dbt_cloud_run_reason", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "dbt_cloud_run_reason", "block_contents": "The specific trigger for this run."}, "dbt_artifacts.env_vars": {"unique_id": "dbt_artifacts.env_vars", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "env_vars", "block_contents": "Key-value pairs of environment variables to be capture."}, "dbt_artifacts.dbt_vars": {"unique_id": "dbt_artifacts.dbt_vars", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "dbt_vars", "block_contents": "Key-value pairs of project variables to be capture."}, "dbt_artifacts.last_full_refresh_run_completed_at": {"unique_id": "dbt_artifacts.last_full_refresh_run_completed_at", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "last_full_refresh_run_completed_at", "block_contents": "Timestamp when the node's SQL query completed on the last full (non-incremental) run."}, "dbt_artifacts.last_full_refresh_run_rows_affected": {"unique_id": "dbt_artifacts.last_full_refresh_run_rows_affected", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "last_full_refresh_run_rows_affected", "block_contents": "Number of rows affected by the node's last full (non-incremental) run."}, "dbt_artifacts.last_full_refresh_run_total_runtime": {"unique_id": "dbt_artifacts.last_full_refresh_run_total_runtime", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "last_full_refresh_run_total_runtime", "block_contents": "Total time spent executing the node's last full (non-incremental) run (seconds)."}, "dbt_artifacts.last_run_completed_at": {"unique_id": "dbt_artifacts.last_run_completed_at", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "last_run_completed_at", "block_contents": "Timestamp when the node's SQL query completed on the last run."}, "dbt_artifacts.last_run_rows_affected": {"unique_id": "dbt_artifacts.last_run_rows_affected", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "last_run_rows_affected", "block_contents": "Number of rows affected by the node's last run."}, "dbt_artifacts.last_run_total_runtime": {"unique_id": "dbt_artifacts.last_run_total_runtime", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "last_run_total_runtime", "block_contents": "Total time spent executing the node's last run (seconds)."}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {"model.secret.batch_control": [{"resource_type": "model", "depends_on": {"macros": ["macro.secret.v_sql_ins_queue_batch", "macro.secret.v_sql_upd_run_batch", "macro.secret.v_sql_get_batch", "macro.secret.v_sql_get_watermark", "macro.dbt.is_incremental", "macro.secret.v_sql_upd_success"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "materialization": "incremental", "post-hook": [{"sql": "{{ v_sql_upd_success(v_dbt_job_name) }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "onsemi", "batch_control"], "unique_id": "model.secret.batch_control", "raw_code": "-- This is an example Incremental model. This is the code that you would have within all of your incremental models\n-- so they can kick off the stored procedures to update the ETL Control table\n{{\n    config(\n        materialization='incremental',\n        post_hook=\"{{ v_sql_upd_success(v_dbt_job_name) }}\",\n        enabled=false\n    )\n}}\n\n\n-- TODO: consider changing job name to the name of the file so you could use something standard like {{ this.name }} or some version of that (like fully qualified name)\n    -- I am unsure how to get the on-run-end hook to update failures otherwise\n{%- set v_dbt_job_name = 'DBT_MART_SALES_BILLING_FACT'-%}\n    --suggested alternative:\n    -- {%- set v_dbt_job_name = this.name -%}  or {%- set v_dbt_job_name = this -%}\n\n-- Step 1 Create new batch ID\n{{ v_sql_ins_queue_batch(v_dbt_job_name, current_timestamp) }}\n\n-- Step 2 Set the batch to running\n{{ v_sql_upd_run_batch(v_dbt_job_name) }}\n\n-- Step 3 Fetch the batch id\n{%- set V_BIW_BATCH_ID = v_sql_get_batch(v_dbt_job_name) -%}\n\n-- Step 4 Get the High and Low water mark\n{%- set V_LWM = v_sql_get_watermark(V_BIW_BATCH_ID)[0] -%}\n{%- set V_HWM = v_sql_get_watermark(V_BIW_BATCH_ID)[1] -%}\n{%- set V_START_DTTM = v_sql_get_watermark(V_BIW_BATCH_ID)[2] -%}\n\n\nselect\n{{ V_BIW_BATCH_ID }}  as batch_id,\n{{ V_LWM }} as V_LWM,\n{{ V_HWM }} as V_HWM,\n{{ V_START_DTTM }} as V_START_DTTM\n\n--------\n-- ... rest of the SQL here\n\n-- from\n--   some_table\n-- where\n-- {% if is_incremental() %}\n--     -- this filter will only be applied on an incremental run\n--     where event_time > (select max(event_time) from {{ this }}) \n-- {% endif %}\n--------\n\n-- Step 5 Success or Failure to ETL table\n-- success happens in post-hook, which runs only if the model succeeds\n-- failure happes via on-run-end hook: https://gist.github.com/jeremyyeo/064106e480106b49cd337f33a765ef20", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "onsemi/batch_control.sql", "original_file_path": "models/onsemi/batch_control.sql", "name": "batch_control", "alias": "batch_control", "checksum": {"name": "sha256", "checksum": "2e38d036b36fb4aa50e7682b9568e0ea1e4a52fb300bece2df3f08bbf5ef62fd"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "materialization": "incremental", "enabled": false, "post-hook": ["{{ v_sql_upd_success(v_dbt_job_name) }}"]}, "created_at": 1674177028.3910942, "config_call_dict": {"materialization": "incremental", "enabled": false, "post-hook": ["{{ v_sql_upd_success(v_dbt_job_name) }}"]}}], "model.secret.partitioned_incremental": [{"resource_type": "model", "depends_on": {"macros": ["macro.secret.standardize_timestamp", "macro.dbt_utils.star", "macro.dbt_utils.surrogate_key"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "partitioned_incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "record_id", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "partition_by": "WAREHOUSE_NAME", "partitions_to_process": ["'RANDY_PITCHER_WORKSPACE_PROD_WH'", "'RANDY_PITCHER_WORKSPACE_DEV_WH'"], "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "demos", "partitioned_incremental", "partitioned_incremental"], "unique_id": "model.secret.partitioned_incremental", "raw_code": "{{ \n    config(\n        materialized='partitioned_incremental', \n        partition_by='WAREHOUSE_NAME', \n        partitions_to_process=[\"'RANDY_PITCHER_WORKSPACE_PROD_WH'\", \"'RANDY_PITCHER_WORKSPACE_DEV_WH'\"],\n        unique_key='record_id',\n        enabled=False\n    ) \n}}\n\nWITH HISTORY AS (\n  SELECT \n    {{ standardize_timestamp('START_TIME') }} AS START_TIME_CENTRAL_TIME,\n    {{ standardize_timestamp('END_TIME') }}   AS END_TIME_CENTRAL_TIME,\n\n\t{{ \n      dbt_utils.star(\n        from=source('snowflake_meta', 'warehouse_metering_history'),\n        except=[\n          \"START_TIME\",\n          \"END_TIME\",\n          \"INGESTION_TIME\"\n        ]\n      ) \n    }}, \n\n    END_TIME AS WATERMARK,\n    {{dbt_utils.surrogate_key(['START_TIME', 'WAREHOUSE_NAME'])}} AS record_id\n\n  FROM \n    {{ source('snowflake_meta', 'warehouse_metering_history') }}\n)\n\nSELECT * FROM HISTORY\n\n-- {{this}} {{target.database}}", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "demos/partitioned_incremental/partitioned_incremental.sql", "original_file_path": "models/demos/partitioned_incremental/partitioned_incremental.sql", "name": "partitioned_incremental", "alias": "partitioned_incremental", "checksum": {"name": "sha256", "checksum": "1de383271f6eb858bb2888a2df7084d337af93e244b6ef740a66f5babbad484c"}, "tags": [], "refs": [], "sources": [["snowflake_meta", "warehouse_metering_history"], ["snowflake_meta", "warehouse_metering_history"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "partitioned_incremental", "partition_by": "WAREHOUSE_NAME", "partitions_to_process": ["'RANDY_PITCHER_WORKSPACE_PROD_WH'", "'RANDY_PITCHER_WORKSPACE_DEV_WH'"], "unique_key": "record_id", "enabled": false}, "created_at": 1674177028.5247285, "config_call_dict": {"materialized": "partitioned_incremental", "partition_by": "WAREHOUSE_NAME", "partitions_to_process": ["'RANDY_PITCHER_WORKSPACE_PROD_WH'", "'RANDY_PITCHER_WORKSPACE_DEV_WH'"], "unique_key": "record_id", "enabled": false}}], "model.secret.find_distincts": [{"resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "demos", "dedupe_incremental", "find_distincts"], "unique_id": "model.secret.find_distincts", "raw_code": "{{\n    config(\n        enabled=False\n    )\n}}\n\n-- Bigquery only -- find distinct rows\n-- cool stuff https://stackoverflow.com/questions/53719148/big-query-deduplication-query-example-explanation\nSELECT tt.*\nFROM (\n  SELECT t.id, ARRAY_AGG(t ORDER BY t.insert_time DESC LIMIT 1)[OFFSET(0)] tt\n  FROM {{ ref('dedupe_incremental') }} t\n  GROUP BY 1\n)", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "demos/dedupe_incremental/find_distincts.sql", "original_file_path": "models/demos/dedupe_incremental/find_distincts.sql", "name": "find_distincts", "alias": "find_distincts", "checksum": {"name": "sha256", "checksum": "9c37b942bc21a867429232855534519291b23af840cd2b173692911ed0aa287a"}, "tags": [], "refs": [["dedupe_incremental"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": false}, "created_at": 1674177028.5574415, "config_call_dict": {"enabled": false}}], "model.secret.stg_query_history": [{"resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": ["snowflake_meta", "daily"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": true, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "demos", "dynamic_refs", "stg_query_history"], "unique_id": "model.secret.stg_query_history", "raw_code": "{{ config(\n  tags=[\"snowflake_meta\", \"daily\"],\n  materialized='view',\n  transient=true,\n  enabled=false\n) }}\n\nWITH HISTORY AS (\n  SELECT \n    *\n\n  FROM \n  {% if target.name == 'prod' %}\n    {{ source('snowflake_meta', 'query_history') }}\n  {% elif target.name == 'qa' %}\n    {{ source('snowflake_meta_qa', 'query_history') }}\n  {% else %}\n    {{ source('snowflake_meta_dev', 'query_history') }}\n  {% endif %}\n)\n\nSELECT * FROM HISTORY", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "demos/dynamic_refs/stg_query_history.sql", "original_file_path": "models/demos/dynamic_refs/stg_query_history.sql", "name": "stg_query_history", "alias": "stg_query_history", "checksum": {"name": "sha256", "checksum": "b62eea7eaa0fb773a0ad79281405db4f5f127c0a656499b421e8d18571f02170"}, "tags": ["snowflake_meta", "daily"], "refs": [], "sources": [["snowflake_meta", "query_history"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "tags": ["snowflake_meta", "daily"], "transient": true, "enabled": false}, "created_at": 1674177028.5795722, "config_call_dict": {"tags": ["snowflake_meta", "daily"], "materialized": "view", "transient": true, "enabled": false}}], "model.secret.easy_incremental_demo": [{"resource_type": "model", "depends_on": {"macros": ["macro.secret.standardize_timestamp", "macro.dbt_utils.star"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "easy_incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "watermark": "watermark", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "prod", "fqn": ["secret", "demos", "easy_incremental", "easy_incremental_demo"], "unique_id": "model.secret.easy_incremental_demo", "raw_code": "{{ config(\n  materialized='easy_incremental',\n  watermark='watermark',\n  enabled=False\n  ) }}\n\nWITH HISTORY AS (\n  SELECT \n    {{ standardize_timestamp('START_TIME') }} AS START_TIME_CENTRAL_TIME,\n    {{ standardize_timestamp('END_TIME') }}   AS END_TIME_CENTRAL_TIME,\n\n\t{{ \n      dbt_utils.star(\n        from=source('snowflake_meta', 'warehouse_metering_history'),\n        except=[\n          \"START_TIME\",\n          \"END_TIME\",\n          \"INGESTION_TIME\"\n        ]\n      ) \n    }}, \n\n    END_TIME AS WATERMARK\n\n  FROM \n    {{ source('snowflake_meta', 'warehouse_metering_history') }}\n)\n\nSELECT * FROM HISTORY", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "demos/easy_incremental/easy_incremental_demo.sql", "original_file_path": "models/demos/easy_incremental/easy_incremental_demo.sql", "name": "easy_incremental_demo", "alias": "easy_incremental_demo", "checksum": {"name": "sha256", "checksum": "5d599329fc634c3cfd12916bbc07923affa23512a217995485d28c375048310f"}, "tags": [], "refs": [], "sources": [["snowflake_meta", "warehouse_metering_history"], ["snowflake_meta", "warehouse_metering_history"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "easy_incremental", "watermark": "watermark", "enabled": false}, "created_at": 1674177028.6133957, "config_call_dict": {"materialized": "easy_incremental", "watermark": "watermark", "enabled": false}}], "model.secret.stg_netflix_titles": [{"resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "netflix", "database": null, "tags": ["netflix"], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "netflix", "fqn": ["secret", "demos", "netflix", "stg_netflix_titles"], "unique_id": "model.secret.stg_netflix_titles", "raw_code": "{{config(materialized='incremental')}}\n\nselect * from {{ref('raw_netflix_data')}} limit 10", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "demos/netflix/stg_netflix_titles.sql", "original_file_path": "models/demos/netflix/stg_netflix_titles.sql", "name": "stg_netflix_titles", "alias": "stg_netflix_titles", "checksum": {"name": "sha256", "checksum": "76524d72e5fc52604c961479686c73adbd168d0c1ad795bb7a6122aa038009b0"}, "tags": ["netflix"], "refs": [["raw_netflix_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "enabled": false, "schema": "netflix", "tags": "netflix"}, "created_at": 1674177028.662464, "config_call_dict": {"materialized": "incremental"}}], "model.secret.loading_config": [{"resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "netflix", "database": null, "tags": ["netflix"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "netflix", "fqn": ["secret", "demos", "netflix", "netflix_data_loading", "loading_config"], "unique_id": "model.secret.loading_config", "raw_code": "select current_timestamp as updated_at, 'randy_pitcher_workspace_raw.netflix_loading.netflix_blob_stage' as stage_name, 'string' as column_type, 'show_id'      as column_name, 1  as column_position\nunion all\nselect current_timestamp as updated_at, 'randy_pitcher_workspace_raw.netflix_loading.netflix_blob_stage' as stage_name, 'string' as column_type, 'type'         as column_name, 2  as column_position\nunion all\nselect current_timestamp as updated_at, 'randy_pitcher_workspace_raw.netflix_loading.netflix_blob_stage' as stage_name, 'string' as column_type, 'title'        as column_name, 3  as column_position\nunion all\nselect current_timestamp as updated_at, 'randy_pitcher_workspace_raw.netflix_loading.netflix_blob_stage' as stage_name, 'string' as column_type, 'director'     as column_name, 4  as column_position\nunion all\nselect current_timestamp as updated_at, 'randy_pitcher_workspace_raw.netflix_loading.netflix_blob_stage' as stage_name, 'string' as column_type, 'cast'         as column_name, 5  as column_position\nunion all\nselect current_timestamp as updated_at, 'randy_pitcher_workspace_raw.netflix_loading.netflix_blob_stage' as stage_name, 'string' as column_type, 'country'      as column_name, 6  as column_position\nunion all\nselect current_timestamp as updated_at, 'randy_pitcher_workspace_raw.netflix_loading.netflix_blob_stage' as stage_name, 'string' as column_type, 'date_added'   as column_name, 7  as column_position\nunion all\nselect current_timestamp as updated_at, 'randy_pitcher_workspace_raw.netflix_loading.netflix_blob_stage' as stage_name, 'string' as column_type, 'release_year' as column_name, 8  as column_position\nunion all\nselect current_timestamp as updated_at, 'randy_pitcher_workspace_raw.netflix_loading.netflix_blob_stage' as stage_name, 'string' as column_type, 'rating'       as column_name, 9  as column_position\nunion all\nselect current_timestamp as updated_at, 'randy_pitcher_workspace_raw.netflix_loading.netflix_blob_stage' as stage_name, 'string' as column_type, 'duration'     as column_name, 10 as column_position\nunion all\nselect current_timestamp as updated_at, 'randy_pitcher_workspace_raw.netflix_loading.netflix_blob_stage' as stage_name, 'string' as column_type, 'listed_in'    as column_name, 11 as column_position\nunion all\nselect current_timestamp as updated_at, 'randy_pitcher_workspace_raw.netflix_loading.netflix_blob_stage' as stage_name, 'string' as column_type, 'description'  as column_name, 12 as column_position", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "demos/netflix/netflix_data_loading/loading_config.sql", "original_file_path": "models/demos/netflix/netflix_data_loading/loading_config.sql", "name": "loading_config", "alias": "loading_config", "checksum": {"name": "sha256", "checksum": "e2fe0613102de360c2ec70188ca70e576e7593dc613870159558c26b1b664469"}, "tags": ["netflix"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": false, "schema": "netflix", "tags": "netflix"}, "created_at": 1674177028.665667, "config_call_dict": {}}], "model.secret.raw_netflix_data": [{"resource_type": "model", "depends_on": {"macros": ["macro.secret.get_stage_columns_from_loading_config"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "netflix", "database": null, "tags": ["netflix"], "meta": {}, "materialized": "easy_incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "watermark": "date_added", "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "netflix", "fqn": ["secret", "demos", "netflix", "netflix_data_loading", "raw_netflix_data"], "unique_id": "model.secret.raw_netflix_data", "raw_code": "{{ config(materialized='easy_incremental', watermark='date_added') }}\n\nwith \n\nraw_data as (\n    select\n        {{ get_stage_columns_from_loading_config(\n            stage_name=target_stage, \n            config_table=ref('loading_config')\n        )}},\n        current_timestamp::timestamp_ntz as ingestion_time\n    \n    from\n        @{{source('netflix', 'netflix_blob_stage')}}\n)\n\n\nselect * from raw_data", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "demos/netflix/netflix_data_loading/raw_netflix_data.sql", "original_file_path": "models/demos/netflix/netflix_data_loading/raw_netflix_data.sql", "name": "raw_netflix_data", "alias": "raw_netflix_data", "checksum": {"name": "sha256", "checksum": "8f2820254d6878696b2a34169abe5a980c97cc1110a5481db612570f633a1110"}, "tags": ["netflix"], "refs": [["loading_config"]], "sources": [["netflix", "netflix_blob_stage"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "easy_incremental", "enabled": false, "schema": "netflix", "tags": "netflix", "watermark": "date_added"}, "created_at": 1674177028.6687212, "config_call_dict": {"materialized": "easy_incremental", "watermark": "date_added"}}], "snapshot.secret.snpsht__snowflake_query_history": [{"resource_type": "snapshot", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": ["snowflake_meta"], "meta": {}, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "query_id", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "strategy": "timestamp", "target_schema": "snowflake_meta", "target_database": null, "updated_at": "end_time", "check_cols": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPMENT", "schema": "snowflake_meta", "fqn": ["secret", "snowflake_meta", "snpsht__snowflake_query_history", "snpsht__snowflake_query_history"], "unique_id": "snapshot.secret.snpsht__snowflake_query_history", "raw_code": "\n\n{{\n    config(\n        unique_key = 'query_id',\n        strategy   = 'timestamp',\n        updated_at = 'end_time',\n        enabled=false\n    )\n}}\n\nselect * from {{ source('snowflake_meta', 'query_history') }}\n\n", "language": "sql", "package_name": "secret", "root_path": "/tmp/jobs/115190130/target/dbt_snowflake", "path": "snowflake_meta/snpsht__snowflake_query_history.sql", "original_file_path": "snapshots/snowflake_meta/snpsht__snowflake_query_history.sql", "name": "snpsht__snowflake_query_history", "alias": "snpsht__snowflake_query_history", "checksum": {"name": "sha256", "checksum": "36b03812104be098c3cbc6bf623a1f7e8232f8916345ad454ea2fd19cb3f6bab"}, "tags": ["snowflake_meta"], "refs": [], "sources": [["snowflake_meta", "query_history"]], "metrics": [], "description": "some description for this snapshot", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "secret://snapshots/snowflake_meta/snowflake_meta.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"tags": ["snowflake_meta"], "target_schema": "{{ 'snowflake_meta' if 'prod' in target.name.lower() else target.schema ~ '__snowflake_meta' }}", "unique_key": "query_id", "strategy": "timestamp", "updated_at": "end_time", "enabled": false}, "created_at": 1674177029.01584, "config_call_dict": {"unique_key": "query_id", "strategy": "timestamp", "updated_at": "end_time", "enabled": false}}]}, "parent_map": {"model.secret.my_first_model": [], "model.secret.json_example": [], "model.secret.my_incremental_model": [], "model.secret.incrementing_incremental": [], "model.secret.my_second_model": ["model.secret.my_first_model"], "model.secret.my_third_model": ["model.secret.my_second_model"], "model.secret.stg_stripe__payments": [], "model.secret.stg_customers": ["source.secret.jaffle_shop.customers"], "model.secret.stg_orders": ["source.secret.jaffle_shop.orders"], "model.secret.stg_payments": ["source.secret.stripe.payment"], "model.secret.product": ["seed.secret.seed__negative_key", "seed.secret.seed__product__one_time_load", "seed.secret.seed__product__one_time_load", "seed.secret.seed__product__stg_data"], "model.secret.corporation": ["seed.secret.seed__corporation__one_time_load", "seed.secret.seed__corporation__one_time_load", "seed.secret.seed__corporation__stg_data", "seed.secret.seed__negative_key"], "model.secret.stg_onsemi": [], "model.secret.check_sources": [], "model.secret.product_using_macros": ["seed.secret.seed__negative_key", "seed.secret.seed__product__one_time_load", "seed.secret.seed__product__stg_data"], "model.secret.onsemi_incremental": ["model.secret.int_onsemi", "model.secret.int_onsemi", "model.secret.int_onsemi", "model.secret.int_onsemi", "seed.secret.seed__sample_data_status", "seed.secret.seed__sample_data_status"], "model.secret.int_onsemi": ["model.secret.stg_onsemi"], "model.secret.stg_warehouse_metering_history": ["source.secret.snowflake_meta.warehouse_metering_history", "source.secret.snowflake_meta.warehouse_metering_history"], "model.secret.orders": ["model.secret.stg_orders", "model.secret.stg_payments"], "model.secret.customers": ["model.secret.orders", "model.secret.stg_customers"], "model.secret.payments__pivoted": ["model.secret.stg_payments", "model.secret.stg_payments"], "model.secret.execute_query": [], "model.secret.hard_deletes__augmented_snapshot_view": ["snapshot.secret.hard_deletes__snapshot"], "model.secret.hard_deletes_source": [], "model.secret.hard_deletes__snapshot_passthrough": ["snapshot.secret.hard_deletes__snapshot"], "model.secret.find_dupes": ["model.secret.dedupe_incremental", "model.secret.dedupe_incremental"], "model.secret.dedupe_incremental": [], "model.secret.warehouse_metering_history__incremental_snapshot": ["model.secret.stg_warehouse_metering_history"], "model.secret.custom_schema": [], "model.secret.get_dynamic_sql_value_usage": [], "model.secret.autogenerate_join_conditions": ["model.secret.customers", "model.secret.orders", "model.secret.stg_customers"], "model.secret.pack_json_demo": ["model.secret.stg_warehouse_metering_history", "model.secret.stg_warehouse_metering_history"], "model.secret.change_roles": [], "model.secret.model_with_schema_tests": [], "model.secret.local_variables": [], "model.secret.variable_usage": ["model.secret.disable_list_create"], "model.secret.skip_this_incremental": ["model.secret.disable_list_create"], "model.secret.disable_list_create": [], "model.secret.landing": [], "model.secret.show_this_variable": ["model.secret.my_first_model"], "model.secret.raw_json": [], "model.secret.dynamic_unpack": ["model.secret.raw_json", "model.secret.raw_json"], "model.secret.add_udf_function__payment_glitch": ["model.secret.define_function__payment_glitch"], "model.secret.import_pypi_package__holiday": ["model.secret.orders"], "model.secret.define_function__payment_glitch": ["model.secret.stg_payments"], "model.secret.python_builtins__describe": ["model.secret.customers"], "model.secret.use_variables__customers_limit_10": ["model.secret.customers"], "snapshot.secret.hard_deletes__snapshot": ["model.secret.hard_deletes_source"], "test.secret.assert_my_second_model_has_one_record": ["model.secret.my_second_model"], "seed.secret.sample_json_and_array_fields": [], "seed.secret.seed__edw_process_info": [], "seed.secret.seed__corporation__stg_data": [], "seed.secret.seed__corporation__one_time_load": [], "seed.secret.seed__product__stg_data": [], "seed.secret.seed__negative_key": [], "seed.secret.seed__sample_data_status": [], "seed.secret.seed__product__one_time_load": [], "seed.secret.seed__edw_process_batch_ctl": [], "seed.secret.seed__sample_data": [], "model.dbt_artifacts.dim_dbt__exposures": ["model.dbt_artifacts.stg_dbt__exposures"], "model.dbt_artifacts.dim_dbt__snapshots": ["model.dbt_artifacts.stg_dbt__snapshots"], "model.dbt_artifacts.dim_dbt__seeds": ["model.dbt_artifacts.stg_dbt__seeds"], "model.dbt_artifacts.fct_dbt__model_executions": ["model.dbt_artifacts.stg_dbt__model_executions"], "model.dbt_artifacts.fct_dbt__test_executions": ["model.dbt_artifacts.stg_dbt__test_executions"], "model.dbt_artifacts.dim_dbt__models": ["model.dbt_artifacts.stg_dbt__models"], "model.dbt_artifacts.fct_dbt__snapshot_executions": ["model.dbt_artifacts.stg_dbt__snapshot_executions"], "model.dbt_artifacts.fct_dbt__seed_executions": ["model.dbt_artifacts.stg_dbt__seed_executions"], "model.dbt_artifacts.fct_dbt__invocations": ["model.dbt_artifacts.stg_dbt__invocations"], "model.dbt_artifacts.dim_dbt__tests": ["model.dbt_artifacts.stg_dbt__tests"], "model.dbt_artifacts.dim_dbt__current_models": ["model.dbt_artifacts.stg_dbt__model_executions", "model.dbt_artifacts.stg_dbt__models"], "model.dbt_artifacts.dim_dbt__sources": ["model.dbt_artifacts.stg_dbt__sources"], "model.dbt_artifacts.stg_dbt__sources": ["source.dbt_artifacts.dbt_artifacts.sources"], "model.dbt_artifacts.stg_dbt__tests": ["source.dbt_artifacts.dbt_artifacts.tests"], "model.dbt_artifacts.stg_dbt__test_executions": ["source.dbt_artifacts.dbt_artifacts.test_executions"], "model.dbt_artifacts.stg_dbt__snapshot_executions": ["source.dbt_artifacts.dbt_artifacts.snapshot_executions"], "model.dbt_artifacts.stg_dbt__seed_executions": ["source.dbt_artifacts.dbt_artifacts.seed_executions"], "model.dbt_artifacts.stg_dbt__models": ["source.dbt_artifacts.dbt_artifacts.models"], "model.dbt_artifacts.stg_dbt__snapshots": ["source.dbt_artifacts.dbt_artifacts.snapshots"], "model.dbt_artifacts.stg_dbt__exposures": ["source.dbt_artifacts.dbt_artifacts.exposures"], "model.dbt_artifacts.stg_dbt__seeds": ["source.dbt_artifacts.dbt_artifacts.seeds"], "model.dbt_artifacts.stg_dbt__invocations": ["source.dbt_artifacts.dbt_artifacts.invocations"], "model.dbt_artifacts.stg_dbt__model_executions": ["source.dbt_artifacts.dbt_artifacts.model_executions"], "test.secret.unique_my_first_model_col.344040e6f9": ["model.secret.my_first_model"], "test.secret.not_null_my_first_model_col.9dde753ebf": ["model.secret.my_first_model"], "test.secret.unique_stg_customers_customer_id.c7614daada": ["model.secret.stg_customers"], "test.secret.not_null_stg_customers_customer_id.e2cfb1f9aa": ["model.secret.stg_customers"], "test.secret.unique_stg_orders_order_id.e3b841c71a": ["model.secret.stg_orders"], "test.secret.not_null_stg_orders_order_id.81cfe2fe64": ["model.secret.stg_orders"], "test.secret.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad": ["model.secret.stg_orders"], "test.secret.unique_customers_customer_id.c5af1ff4b1": ["model.secret.customers"], "test.secret.not_null_customers_customer_id.5c9bf9911d": ["model.secret.customers"], "test.secret.unique_orders_order_id.fed79b3a6e": ["model.secret.orders"], "test.secret.not_null_orders_order_id.cf6c17daed": ["model.secret.orders"], "test.secret.dbt_utils_expression_is_true_orders_amount_0.23e56bc9d2": ["model.secret.orders"], "test.secret.unique_model_with_schema_tests_id.c8cceb01b0": ["model.secret.model_with_schema_tests"], "test.secret.not_null_model_with_schema_tests_id.2aa929087e": ["model.secret.model_with_schema_tests"], "test.secret.source_not_null_jaffle_shop_customers_id.50aa22178f": ["source.secret.jaffle_shop.customers"], "test.secret.source_unique_jaffle_shop_customers_id.2777a7933e": ["source.secret.jaffle_shop.customers"], "test.secret.source_unique_jaffle_shop_orders_id.8a425b2fba": ["source.secret.jaffle_shop.orders"], "test.secret.source_not_null_jaffle_shop_orders_id.f924998b13": ["source.secret.jaffle_shop.orders"], "test.secret.source_accepted_values_jaffle_shop_orders_status__placed__shipped__completed__return_pending__returned.67e1753cce": ["source.secret.jaffle_shop.orders"], "test.secret.source_not_null_stripe_payment_id.f33f317f6c": ["source.secret.stripe.payment"], "test.secret.source_unique_stripe_payment_id.3b7989ce64": ["source.secret.stripe.payment"], "test.secret.source_accepted_values_stripe_payment_paymentmethod__credit_card__bank_transfer__gift_card__coupon.f91677821a": ["source.secret.stripe.payment"], "test.secret.source_accepted_values_stripe_payment_status__success__fail.911ca0ff27": ["source.secret.stripe.payment"], "source.secret.jaffle_shop.customers": [], "source.secret.jaffle_shop.orders": [], "source.secret.stripe.payment": [], "source.secret.snowflake_meta.query_history": [], "source.secret.snowflake_meta.warehouse_load_history": [], "source.secret.snowflake_meta.warehouse_metering_history": [], "source.secret.snowflake_meta.metering_history": [], "source.secret.snowflake_meta.users": [], "source.secret.snowflake_meta_qa.query_history": [], "source.secret.snowflake_meta_dev.query_history": [], "source.secret.snowflake_meta_dynamic.query_history": [], "source.secret.snowflake_meta_global_variable.query_history": [], "source.secret.netflix.netflix_blob_stage": [], "source.dbt_artifacts.dbt_artifacts.model_executions": [], "source.dbt_artifacts.dbt_artifacts.tests": [], "source.dbt_artifacts.dbt_artifacts.test_executions": [], "source.dbt_artifacts.dbt_artifacts.models": [], "source.dbt_artifacts.dbt_artifacts.seeds": [], "source.dbt_artifacts.dbt_artifacts.seed_executions": [], "source.dbt_artifacts.dbt_artifacts.exposures": [], "source.dbt_artifacts.dbt_artifacts.snapshots": [], "source.dbt_artifacts.dbt_artifacts.snapshot_executions": [], "source.dbt_artifacts.dbt_artifacts.sources": [], "source.dbt_artifacts.dbt_artifacts.invocations": []}, "child_map": {"model.secret.my_first_model": ["model.secret.my_second_model", "model.secret.show_this_variable", "test.secret.not_null_my_first_model_col.9dde753ebf", "test.secret.unique_my_first_model_col.344040e6f9"], "model.secret.json_example": [], "model.secret.my_incremental_model": [], "model.secret.incrementing_incremental": [], "model.secret.my_second_model": ["model.secret.my_third_model", "test.secret.assert_my_second_model_has_one_record"], "model.secret.my_third_model": [], "model.secret.stg_stripe__payments": [], "model.secret.stg_customers": ["model.secret.autogenerate_join_conditions", "model.secret.customers", "test.secret.not_null_stg_customers_customer_id.e2cfb1f9aa", "test.secret.unique_stg_customers_customer_id.c7614daada"], "model.secret.stg_orders": ["model.secret.orders", "test.secret.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad", "test.secret.not_null_stg_orders_order_id.81cfe2fe64", "test.secret.unique_stg_orders_order_id.e3b841c71a"], "model.secret.stg_payments": ["model.secret.define_function__payment_glitch", "model.secret.orders", "model.secret.payments__pivoted", "model.secret.payments__pivoted"], "model.secret.product": [], "model.secret.corporation": [], "model.secret.stg_onsemi": ["model.secret.int_onsemi"], "model.secret.check_sources": [], "model.secret.product_using_macros": [], "model.secret.onsemi_incremental": [], "model.secret.int_onsemi": ["model.secret.onsemi_incremental", "model.secret.onsemi_incremental", "model.secret.onsemi_incremental", "model.secret.onsemi_incremental"], "model.secret.stg_warehouse_metering_history": ["model.secret.pack_json_demo", "model.secret.pack_json_demo", "model.secret.warehouse_metering_history__incremental_snapshot"], "model.secret.orders": ["model.secret.autogenerate_join_conditions", "model.secret.customers", "model.secret.import_pypi_package__holiday", "test.secret.dbt_utils_expression_is_true_orders_amount_0.23e56bc9d2", "test.secret.not_null_orders_order_id.cf6c17daed", "test.secret.unique_orders_order_id.fed79b3a6e"], "model.secret.customers": ["model.secret.autogenerate_join_conditions", "model.secret.python_builtins__describe", "model.secret.use_variables__customers_limit_10", "test.secret.not_null_customers_customer_id.5c9bf9911d", "test.secret.unique_customers_customer_id.c5af1ff4b1"], "model.secret.payments__pivoted": [], "model.secret.execute_query": [], "model.secret.hard_deletes__augmented_snapshot_view": [], "model.secret.hard_deletes_source": ["snapshot.secret.hard_deletes__snapshot"], "model.secret.hard_deletes__snapshot_passthrough": [], "model.secret.find_dupes": [], "model.secret.dedupe_incremental": ["model.secret.find_dupes", "model.secret.find_dupes"], "model.secret.warehouse_metering_history__incremental_snapshot": [], "model.secret.custom_schema": [], "model.secret.get_dynamic_sql_value_usage": [], "model.secret.autogenerate_join_conditions": [], "model.secret.pack_json_demo": [], "model.secret.change_roles": [], "model.secret.model_with_schema_tests": ["test.secret.not_null_model_with_schema_tests_id.2aa929087e", "test.secret.unique_model_with_schema_tests_id.c8cceb01b0"], "model.secret.local_variables": [], "model.secret.variable_usage": [], "model.secret.skip_this_incremental": [], "model.secret.disable_list_create": ["model.secret.skip_this_incremental", "model.secret.variable_usage"], "model.secret.landing": [], "model.secret.show_this_variable": [], "model.secret.raw_json": ["model.secret.dynamic_unpack", "model.secret.dynamic_unpack"], "model.secret.dynamic_unpack": [], "model.secret.add_udf_function__payment_glitch": [], "model.secret.import_pypi_package__holiday": [], "model.secret.define_function__payment_glitch": ["model.secret.add_udf_function__payment_glitch"], "model.secret.python_builtins__describe": [], "model.secret.use_variables__customers_limit_10": [], "snapshot.secret.hard_deletes__snapshot": ["model.secret.hard_deletes__augmented_snapshot_view", "model.secret.hard_deletes__snapshot_passthrough"], "test.secret.assert_my_second_model_has_one_record": [], "seed.secret.sample_json_and_array_fields": [], "seed.secret.seed__edw_process_info": [], "seed.secret.seed__corporation__stg_data": ["model.secret.corporation"], "seed.secret.seed__corporation__one_time_load": ["model.secret.corporation", "model.secret.corporation"], "seed.secret.seed__product__stg_data": ["model.secret.product", "model.secret.product_using_macros"], "seed.secret.seed__negative_key": ["model.secret.corporation", "model.secret.product", "model.secret.product_using_macros"], "seed.secret.seed__sample_data_status": ["model.secret.onsemi_incremental", "model.secret.onsemi_incremental"], "seed.secret.seed__product__one_time_load": ["model.secret.product", "model.secret.product", "model.secret.product_using_macros"], "seed.secret.seed__edw_process_batch_ctl": [], "seed.secret.seed__sample_data": [], "model.dbt_artifacts.dim_dbt__exposures": [], "model.dbt_artifacts.dim_dbt__snapshots": [], "model.dbt_artifacts.dim_dbt__seeds": [], "model.dbt_artifacts.fct_dbt__model_executions": [], "model.dbt_artifacts.fct_dbt__test_executions": [], "model.dbt_artifacts.dim_dbt__models": [], "model.dbt_artifacts.fct_dbt__snapshot_executions": [], "model.dbt_artifacts.fct_dbt__seed_executions": [], "model.dbt_artifacts.fct_dbt__invocations": [], "model.dbt_artifacts.dim_dbt__tests": [], "model.dbt_artifacts.dim_dbt__current_models": [], "model.dbt_artifacts.dim_dbt__sources": [], "model.dbt_artifacts.stg_dbt__sources": ["model.dbt_artifacts.dim_dbt__sources"], "model.dbt_artifacts.stg_dbt__tests": ["model.dbt_artifacts.dim_dbt__tests"], "model.dbt_artifacts.stg_dbt__test_executions": ["model.dbt_artifacts.fct_dbt__test_executions"], "model.dbt_artifacts.stg_dbt__snapshot_executions": ["model.dbt_artifacts.fct_dbt__snapshot_executions"], "model.dbt_artifacts.stg_dbt__seed_executions": ["model.dbt_artifacts.fct_dbt__seed_executions"], "model.dbt_artifacts.stg_dbt__models": ["model.dbt_artifacts.dim_dbt__current_models", "model.dbt_artifacts.dim_dbt__models"], "model.dbt_artifacts.stg_dbt__snapshots": ["model.dbt_artifacts.dim_dbt__snapshots"], "model.dbt_artifacts.stg_dbt__exposures": ["model.dbt_artifacts.dim_dbt__exposures"], "model.dbt_artifacts.stg_dbt__seeds": ["model.dbt_artifacts.dim_dbt__seeds"], "model.dbt_artifacts.stg_dbt__invocations": ["model.dbt_artifacts.fct_dbt__invocations"], "model.dbt_artifacts.stg_dbt__model_executions": ["model.dbt_artifacts.dim_dbt__current_models", "model.dbt_artifacts.fct_dbt__model_executions"], "test.secret.unique_my_first_model_col.344040e6f9": [], "test.secret.not_null_my_first_model_col.9dde753ebf": [], "test.secret.unique_stg_customers_customer_id.c7614daada": [], "test.secret.not_null_stg_customers_customer_id.e2cfb1f9aa": [], "test.secret.unique_stg_orders_order_id.e3b841c71a": [], "test.secret.not_null_stg_orders_order_id.81cfe2fe64": [], "test.secret.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad": [], "test.secret.unique_customers_customer_id.c5af1ff4b1": [], "test.secret.not_null_customers_customer_id.5c9bf9911d": [], "test.secret.unique_orders_order_id.fed79b3a6e": [], "test.secret.not_null_orders_order_id.cf6c17daed": [], "test.secret.dbt_utils_expression_is_true_orders_amount_0.23e56bc9d2": [], "test.secret.unique_model_with_schema_tests_id.c8cceb01b0": [], "test.secret.not_null_model_with_schema_tests_id.2aa929087e": [], "test.secret.source_not_null_jaffle_shop_customers_id.50aa22178f": [], "test.secret.source_unique_jaffle_shop_customers_id.2777a7933e": [], "test.secret.source_unique_jaffle_shop_orders_id.8a425b2fba": [], "test.secret.source_not_null_jaffle_shop_orders_id.f924998b13": [], "test.secret.source_accepted_values_jaffle_shop_orders_status__placed__shipped__completed__return_pending__returned.67e1753cce": [], "test.secret.source_not_null_stripe_payment_id.f33f317f6c": [], "test.secret.source_unique_stripe_payment_id.3b7989ce64": [], "test.secret.source_accepted_values_stripe_payment_paymentmethod__credit_card__bank_transfer__gift_card__coupon.f91677821a": [], "test.secret.source_accepted_values_stripe_payment_status__success__fail.911ca0ff27": [], "source.secret.jaffle_shop.customers": ["model.secret.stg_customers", "test.secret.source_not_null_jaffle_shop_customers_id.50aa22178f", "test.secret.source_unique_jaffle_shop_customers_id.2777a7933e"], "source.secret.jaffle_shop.orders": ["model.secret.stg_orders", "test.secret.source_accepted_values_jaffle_shop_orders_status__placed__shipped__completed__return_pending__returned.67e1753cce", "test.secret.source_not_null_jaffle_shop_orders_id.f924998b13", "test.secret.source_unique_jaffle_shop_orders_id.8a425b2fba"], "source.secret.stripe.payment": ["model.secret.stg_payments", "test.secret.source_accepted_values_stripe_payment_paymentmethod__credit_card__bank_transfer__gift_card__coupon.f91677821a", "test.secret.source_accepted_values_stripe_payment_status__success__fail.911ca0ff27", "test.secret.source_not_null_stripe_payment_id.f33f317f6c", "test.secret.source_unique_stripe_payment_id.3b7989ce64"], "source.secret.snowflake_meta.query_history": [], "source.secret.snowflake_meta.warehouse_load_history": [], "source.secret.snowflake_meta.warehouse_metering_history": ["model.secret.stg_warehouse_metering_history", "model.secret.stg_warehouse_metering_history"], "source.secret.snowflake_meta.metering_history": [], "source.secret.snowflake_meta.users": [], "source.secret.snowflake_meta_qa.query_history": [], "source.secret.snowflake_meta_dev.query_history": [], "source.secret.snowflake_meta_dynamic.query_history": [], "source.secret.snowflake_meta_global_variable.query_history": [], "source.secret.netflix.netflix_blob_stage": [], "source.dbt_artifacts.dbt_artifacts.model_executions": ["model.dbt_artifacts.stg_dbt__model_executions"], "source.dbt_artifacts.dbt_artifacts.tests": ["model.dbt_artifacts.stg_dbt__tests"], "source.dbt_artifacts.dbt_artifacts.test_executions": ["model.dbt_artifacts.stg_dbt__test_executions"], "source.dbt_artifacts.dbt_artifacts.models": ["model.dbt_artifacts.stg_dbt__models"], "source.dbt_artifacts.dbt_artifacts.seeds": ["model.dbt_artifacts.stg_dbt__seeds"], "source.dbt_artifacts.dbt_artifacts.seed_executions": ["model.dbt_artifacts.stg_dbt__seed_executions"], "source.dbt_artifacts.dbt_artifacts.exposures": ["model.dbt_artifacts.stg_dbt__exposures"], "source.dbt_artifacts.dbt_artifacts.snapshots": ["model.dbt_artifacts.stg_dbt__snapshots"], "source.dbt_artifacts.dbt_artifacts.snapshot_executions": ["model.dbt_artifacts.stg_dbt__snapshot_executions"], "source.dbt_artifacts.dbt_artifacts.sources": ["model.dbt_artifacts.stg_dbt__sources"], "source.dbt_artifacts.dbt_artifacts.invocations": ["model.dbt_artifacts.stg_dbt__invocations"]}}